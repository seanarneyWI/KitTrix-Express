
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model KittingJob
 * 
 */
export type KittingJob = $Result.DefaultSelection<Prisma.$KittingJobPayload>
/**
 * Model RouteStep
 * 
 */
export type RouteStep = $Result.DefaultSelection<Prisma.$RouteStepPayload>
/**
 * Model JobProgress
 * 
 */
export type JobProgress = $Result.DefaultSelection<Prisma.$JobProgressPayload>
/**
 * Model KitExecution
 * 
 */
export type KitExecution = $Result.DefaultSelection<Prisma.$KitExecutionPayload>
/**
 * Model StepExecution
 * 
 */
export type StepExecution = $Result.DefaultSelection<Prisma.$StepExecutionPayload>
/**
 * Model JobAnalytics
 * 
 */
export type JobAnalytics = $Result.DefaultSelection<Prisma.$JobAnalyticsPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model WorkCenter
 * 
 */
export type WorkCenter = $Result.DefaultSelection<Prisma.$WorkCenterPayload>
/**
 * Model JobAssignment
 * 
 */
export type JobAssignment = $Result.DefaultSelection<Prisma.$JobAssignmentPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const JobStatus: {
  SCHEDULED: 'SCHEDULED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  PAUSED: 'PAUSED',
  CANCELLED: 'CANCELLED'
};

export type JobStatus = (typeof JobStatus)[keyof typeof JobStatus]


export const UserRole: {
  WORKER: 'WORKER',
  SUPERVISOR: 'SUPERVISOR',
  ADMIN: 'ADMIN'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const InstructionType: {
  NONE: 'NONE',
  VIDEO: 'VIDEO',
  IMAGE: 'IMAGE',
  TEXT: 'TEXT'
};

export type InstructionType = (typeof InstructionType)[keyof typeof InstructionType]

}

export type JobStatus = $Enums.JobStatus

export const JobStatus: typeof $Enums.JobStatus

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type InstructionType = $Enums.InstructionType

export const InstructionType: typeof $Enums.InstructionType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more KittingJobs
 * const kittingJobs = await prisma.kittingJob.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more KittingJobs
   * const kittingJobs = await prisma.kittingJob.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.kittingJob`: Exposes CRUD operations for the **KittingJob** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KittingJobs
    * const kittingJobs = await prisma.kittingJob.findMany()
    * ```
    */
  get kittingJob(): Prisma.KittingJobDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.routeStep`: Exposes CRUD operations for the **RouteStep** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RouteSteps
    * const routeSteps = await prisma.routeStep.findMany()
    * ```
    */
  get routeStep(): Prisma.RouteStepDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.jobProgress`: Exposes CRUD operations for the **JobProgress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JobProgresses
    * const jobProgresses = await prisma.jobProgress.findMany()
    * ```
    */
  get jobProgress(): Prisma.JobProgressDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.kitExecution`: Exposes CRUD operations for the **KitExecution** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KitExecutions
    * const kitExecutions = await prisma.kitExecution.findMany()
    * ```
    */
  get kitExecution(): Prisma.KitExecutionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.stepExecution`: Exposes CRUD operations for the **StepExecution** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StepExecutions
    * const stepExecutions = await prisma.stepExecution.findMany()
    * ```
    */
  get stepExecution(): Prisma.StepExecutionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.jobAnalytics`: Exposes CRUD operations for the **JobAnalytics** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JobAnalytics
    * const jobAnalytics = await prisma.jobAnalytics.findMany()
    * ```
    */
  get jobAnalytics(): Prisma.JobAnalyticsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workCenter`: Exposes CRUD operations for the **WorkCenter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkCenters
    * const workCenters = await prisma.workCenter.findMany()
    * ```
    */
  get workCenter(): Prisma.WorkCenterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.jobAssignment`: Exposes CRUD operations for the **JobAssignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JobAssignments
    * const jobAssignments = await prisma.jobAssignment.findMany()
    * ```
    */
  get jobAssignment(): Prisma.JobAssignmentDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.2
   * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    KittingJob: 'KittingJob',
    RouteStep: 'RouteStep',
    JobProgress: 'JobProgress',
    KitExecution: 'KitExecution',
    StepExecution: 'StepExecution',
    JobAnalytics: 'JobAnalytics',
    User: 'User',
    WorkCenter: 'WorkCenter',
    JobAssignment: 'JobAssignment'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "kittingJob" | "routeStep" | "jobProgress" | "kitExecution" | "stepExecution" | "jobAnalytics" | "user" | "workCenter" | "jobAssignment"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      KittingJob: {
        payload: Prisma.$KittingJobPayload<ExtArgs>
        fields: Prisma.KittingJobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KittingJobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KittingJobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KittingJobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KittingJobPayload>
          }
          findFirst: {
            args: Prisma.KittingJobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KittingJobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KittingJobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KittingJobPayload>
          }
          findMany: {
            args: Prisma.KittingJobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KittingJobPayload>[]
          }
          create: {
            args: Prisma.KittingJobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KittingJobPayload>
          }
          createMany: {
            args: Prisma.KittingJobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.KittingJobCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KittingJobPayload>[]
          }
          delete: {
            args: Prisma.KittingJobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KittingJobPayload>
          }
          update: {
            args: Prisma.KittingJobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KittingJobPayload>
          }
          deleteMany: {
            args: Prisma.KittingJobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KittingJobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.KittingJobUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KittingJobPayload>[]
          }
          upsert: {
            args: Prisma.KittingJobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KittingJobPayload>
          }
          aggregate: {
            args: Prisma.KittingJobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKittingJob>
          }
          groupBy: {
            args: Prisma.KittingJobGroupByArgs<ExtArgs>
            result: $Utils.Optional<KittingJobGroupByOutputType>[]
          }
          count: {
            args: Prisma.KittingJobCountArgs<ExtArgs>
            result: $Utils.Optional<KittingJobCountAggregateOutputType> | number
          }
        }
      }
      RouteStep: {
        payload: Prisma.$RouteStepPayload<ExtArgs>
        fields: Prisma.RouteStepFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RouteStepFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RouteStepPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RouteStepFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RouteStepPayload>
          }
          findFirst: {
            args: Prisma.RouteStepFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RouteStepPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RouteStepFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RouteStepPayload>
          }
          findMany: {
            args: Prisma.RouteStepFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RouteStepPayload>[]
          }
          create: {
            args: Prisma.RouteStepCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RouteStepPayload>
          }
          createMany: {
            args: Prisma.RouteStepCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RouteStepCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RouteStepPayload>[]
          }
          delete: {
            args: Prisma.RouteStepDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RouteStepPayload>
          }
          update: {
            args: Prisma.RouteStepUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RouteStepPayload>
          }
          deleteMany: {
            args: Prisma.RouteStepDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RouteStepUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RouteStepUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RouteStepPayload>[]
          }
          upsert: {
            args: Prisma.RouteStepUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RouteStepPayload>
          }
          aggregate: {
            args: Prisma.RouteStepAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRouteStep>
          }
          groupBy: {
            args: Prisma.RouteStepGroupByArgs<ExtArgs>
            result: $Utils.Optional<RouteStepGroupByOutputType>[]
          }
          count: {
            args: Prisma.RouteStepCountArgs<ExtArgs>
            result: $Utils.Optional<RouteStepCountAggregateOutputType> | number
          }
        }
      }
      JobProgress: {
        payload: Prisma.$JobProgressPayload<ExtArgs>
        fields: Prisma.JobProgressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobProgressFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobProgressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobProgressFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobProgressPayload>
          }
          findFirst: {
            args: Prisma.JobProgressFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobProgressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobProgressFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobProgressPayload>
          }
          findMany: {
            args: Prisma.JobProgressFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobProgressPayload>[]
          }
          create: {
            args: Prisma.JobProgressCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobProgressPayload>
          }
          createMany: {
            args: Prisma.JobProgressCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JobProgressCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobProgressPayload>[]
          }
          delete: {
            args: Prisma.JobProgressDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobProgressPayload>
          }
          update: {
            args: Prisma.JobProgressUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobProgressPayload>
          }
          deleteMany: {
            args: Prisma.JobProgressDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobProgressUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JobProgressUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobProgressPayload>[]
          }
          upsert: {
            args: Prisma.JobProgressUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobProgressPayload>
          }
          aggregate: {
            args: Prisma.JobProgressAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJobProgress>
          }
          groupBy: {
            args: Prisma.JobProgressGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobProgressGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobProgressCountArgs<ExtArgs>
            result: $Utils.Optional<JobProgressCountAggregateOutputType> | number
          }
        }
      }
      KitExecution: {
        payload: Prisma.$KitExecutionPayload<ExtArgs>
        fields: Prisma.KitExecutionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KitExecutionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KitExecutionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KitExecutionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KitExecutionPayload>
          }
          findFirst: {
            args: Prisma.KitExecutionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KitExecutionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KitExecutionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KitExecutionPayload>
          }
          findMany: {
            args: Prisma.KitExecutionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KitExecutionPayload>[]
          }
          create: {
            args: Prisma.KitExecutionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KitExecutionPayload>
          }
          createMany: {
            args: Prisma.KitExecutionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.KitExecutionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KitExecutionPayload>[]
          }
          delete: {
            args: Prisma.KitExecutionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KitExecutionPayload>
          }
          update: {
            args: Prisma.KitExecutionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KitExecutionPayload>
          }
          deleteMany: {
            args: Prisma.KitExecutionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KitExecutionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.KitExecutionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KitExecutionPayload>[]
          }
          upsert: {
            args: Prisma.KitExecutionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KitExecutionPayload>
          }
          aggregate: {
            args: Prisma.KitExecutionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKitExecution>
          }
          groupBy: {
            args: Prisma.KitExecutionGroupByArgs<ExtArgs>
            result: $Utils.Optional<KitExecutionGroupByOutputType>[]
          }
          count: {
            args: Prisma.KitExecutionCountArgs<ExtArgs>
            result: $Utils.Optional<KitExecutionCountAggregateOutputType> | number
          }
        }
      }
      StepExecution: {
        payload: Prisma.$StepExecutionPayload<ExtArgs>
        fields: Prisma.StepExecutionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StepExecutionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepExecutionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StepExecutionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepExecutionPayload>
          }
          findFirst: {
            args: Prisma.StepExecutionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepExecutionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StepExecutionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepExecutionPayload>
          }
          findMany: {
            args: Prisma.StepExecutionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepExecutionPayload>[]
          }
          create: {
            args: Prisma.StepExecutionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepExecutionPayload>
          }
          createMany: {
            args: Prisma.StepExecutionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StepExecutionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepExecutionPayload>[]
          }
          delete: {
            args: Prisma.StepExecutionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepExecutionPayload>
          }
          update: {
            args: Prisma.StepExecutionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepExecutionPayload>
          }
          deleteMany: {
            args: Prisma.StepExecutionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StepExecutionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StepExecutionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepExecutionPayload>[]
          }
          upsert: {
            args: Prisma.StepExecutionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepExecutionPayload>
          }
          aggregate: {
            args: Prisma.StepExecutionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStepExecution>
          }
          groupBy: {
            args: Prisma.StepExecutionGroupByArgs<ExtArgs>
            result: $Utils.Optional<StepExecutionGroupByOutputType>[]
          }
          count: {
            args: Prisma.StepExecutionCountArgs<ExtArgs>
            result: $Utils.Optional<StepExecutionCountAggregateOutputType> | number
          }
        }
      }
      JobAnalytics: {
        payload: Prisma.$JobAnalyticsPayload<ExtArgs>
        fields: Prisma.JobAnalyticsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobAnalyticsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobAnalyticsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobAnalyticsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobAnalyticsPayload>
          }
          findFirst: {
            args: Prisma.JobAnalyticsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobAnalyticsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobAnalyticsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobAnalyticsPayload>
          }
          findMany: {
            args: Prisma.JobAnalyticsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobAnalyticsPayload>[]
          }
          create: {
            args: Prisma.JobAnalyticsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobAnalyticsPayload>
          }
          createMany: {
            args: Prisma.JobAnalyticsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JobAnalyticsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobAnalyticsPayload>[]
          }
          delete: {
            args: Prisma.JobAnalyticsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobAnalyticsPayload>
          }
          update: {
            args: Prisma.JobAnalyticsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobAnalyticsPayload>
          }
          deleteMany: {
            args: Prisma.JobAnalyticsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobAnalyticsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JobAnalyticsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobAnalyticsPayload>[]
          }
          upsert: {
            args: Prisma.JobAnalyticsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobAnalyticsPayload>
          }
          aggregate: {
            args: Prisma.JobAnalyticsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJobAnalytics>
          }
          groupBy: {
            args: Prisma.JobAnalyticsGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobAnalyticsGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobAnalyticsCountArgs<ExtArgs>
            result: $Utils.Optional<JobAnalyticsCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      WorkCenter: {
        payload: Prisma.$WorkCenterPayload<ExtArgs>
        fields: Prisma.WorkCenterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkCenterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkCenterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkCenterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkCenterPayload>
          }
          findFirst: {
            args: Prisma.WorkCenterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkCenterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkCenterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkCenterPayload>
          }
          findMany: {
            args: Prisma.WorkCenterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkCenterPayload>[]
          }
          create: {
            args: Prisma.WorkCenterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkCenterPayload>
          }
          createMany: {
            args: Prisma.WorkCenterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkCenterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkCenterPayload>[]
          }
          delete: {
            args: Prisma.WorkCenterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkCenterPayload>
          }
          update: {
            args: Prisma.WorkCenterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkCenterPayload>
          }
          deleteMany: {
            args: Prisma.WorkCenterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkCenterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkCenterUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkCenterPayload>[]
          }
          upsert: {
            args: Prisma.WorkCenterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkCenterPayload>
          }
          aggregate: {
            args: Prisma.WorkCenterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkCenter>
          }
          groupBy: {
            args: Prisma.WorkCenterGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkCenterGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkCenterCountArgs<ExtArgs>
            result: $Utils.Optional<WorkCenterCountAggregateOutputType> | number
          }
        }
      }
      JobAssignment: {
        payload: Prisma.$JobAssignmentPayload<ExtArgs>
        fields: Prisma.JobAssignmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobAssignmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobAssignmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobAssignmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobAssignmentPayload>
          }
          findFirst: {
            args: Prisma.JobAssignmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobAssignmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobAssignmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobAssignmentPayload>
          }
          findMany: {
            args: Prisma.JobAssignmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobAssignmentPayload>[]
          }
          create: {
            args: Prisma.JobAssignmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobAssignmentPayload>
          }
          createMany: {
            args: Prisma.JobAssignmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JobAssignmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobAssignmentPayload>[]
          }
          delete: {
            args: Prisma.JobAssignmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobAssignmentPayload>
          }
          update: {
            args: Prisma.JobAssignmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobAssignmentPayload>
          }
          deleteMany: {
            args: Prisma.JobAssignmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobAssignmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JobAssignmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobAssignmentPayload>[]
          }
          upsert: {
            args: Prisma.JobAssignmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobAssignmentPayload>
          }
          aggregate: {
            args: Prisma.JobAssignmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJobAssignment>
          }
          groupBy: {
            args: Prisma.JobAssignmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobAssignmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobAssignmentCountArgs<ExtArgs>
            result: $Utils.Optional<JobAssignmentCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    kittingJob?: KittingJobOmit
    routeStep?: RouteStepOmit
    jobProgress?: JobProgressOmit
    kitExecution?: KitExecutionOmit
    stepExecution?: StepExecutionOmit
    jobAnalytics?: JobAnalyticsOmit
    user?: UserOmit
    workCenter?: WorkCenterOmit
    jobAssignment?: JobAssignmentOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type KittingJobCountOutputType
   */

  export type KittingJobCountOutputType = {
    routeSteps: number
    assignments: number
  }

  export type KittingJobCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    routeSteps?: boolean | KittingJobCountOutputTypeCountRouteStepsArgs
    assignments?: boolean | KittingJobCountOutputTypeCountAssignmentsArgs
  }

  // Custom InputTypes
  /**
   * KittingJobCountOutputType without action
   */
  export type KittingJobCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KittingJobCountOutputType
     */
    select?: KittingJobCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * KittingJobCountOutputType without action
   */
  export type KittingJobCountOutputTypeCountRouteStepsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RouteStepWhereInput
  }

  /**
   * KittingJobCountOutputType without action
   */
  export type KittingJobCountOutputTypeCountAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobAssignmentWhereInput
  }


  /**
   * Count Type RouteStepCountOutputType
   */

  export type RouteStepCountOutputType = {
    stepExecutions: number
  }

  export type RouteStepCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stepExecutions?: boolean | RouteStepCountOutputTypeCountStepExecutionsArgs
  }

  // Custom InputTypes
  /**
   * RouteStepCountOutputType without action
   */
  export type RouteStepCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteStepCountOutputType
     */
    select?: RouteStepCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RouteStepCountOutputType without action
   */
  export type RouteStepCountOutputTypeCountStepExecutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StepExecutionWhereInput
  }


  /**
   * Count Type JobProgressCountOutputType
   */

  export type JobProgressCountOutputType = {
    kitExecutions: number
  }

  export type JobProgressCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kitExecutions?: boolean | JobProgressCountOutputTypeCountKitExecutionsArgs
  }

  // Custom InputTypes
  /**
   * JobProgressCountOutputType without action
   */
  export type JobProgressCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobProgressCountOutputType
     */
    select?: JobProgressCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JobProgressCountOutputType without action
   */
  export type JobProgressCountOutputTypeCountKitExecutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KitExecutionWhereInput
  }


  /**
   * Count Type KitExecutionCountOutputType
   */

  export type KitExecutionCountOutputType = {
    stepExecutions: number
  }

  export type KitExecutionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stepExecutions?: boolean | KitExecutionCountOutputTypeCountStepExecutionsArgs
  }

  // Custom InputTypes
  /**
   * KitExecutionCountOutputType without action
   */
  export type KitExecutionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KitExecutionCountOutputType
     */
    select?: KitExecutionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * KitExecutionCountOutputType without action
   */
  export type KitExecutionCountOutputTypeCountStepExecutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StepExecutionWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    assignedJobs: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignedJobs?: boolean | UserCountOutputTypeCountAssignedJobsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobAssignmentWhereInput
  }


  /**
   * Count Type WorkCenterCountOutputType
   */

  export type WorkCenterCountOutputType = {
    users: number
    jobProgress: number
  }

  export type WorkCenterCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | WorkCenterCountOutputTypeCountUsersArgs
    jobProgress?: boolean | WorkCenterCountOutputTypeCountJobProgressArgs
  }

  // Custom InputTypes
  /**
   * WorkCenterCountOutputType without action
   */
  export type WorkCenterCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkCenterCountOutputType
     */
    select?: WorkCenterCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkCenterCountOutputType without action
   */
  export type WorkCenterCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * WorkCenterCountOutputType without action
   */
  export type WorkCenterCountOutputTypeCountJobProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobProgressWhereInput
  }


  /**
   * Models
   */

  /**
   * Model KittingJob
   */

  export type AggregateKittingJob = {
    _count: KittingJobCountAggregateOutputType | null
    _avg: KittingJobAvgAggregateOutputType | null
    _sum: KittingJobSumAggregateOutputType | null
    _min: KittingJobMinAggregateOutputType | null
    _max: KittingJobMaxAggregateOutputType | null
  }

  export type KittingJobAvgAggregateOutputType = {
    orderedQuantity: number | null
    runLength: number | null
    setup: number | null
    makeReady: number | null
    takeDown: number | null
    expectedKitDuration: number | null
    expectedJobDuration: number | null
  }

  export type KittingJobSumAggregateOutputType = {
    orderedQuantity: number | null
    runLength: number | null
    setup: number | null
    makeReady: number | null
    takeDown: number | null
    expectedKitDuration: number | null
    expectedJobDuration: number | null
  }

  export type KittingJobMinAggregateOutputType = {
    id: string | null
    customerName: string | null
    jobNumber: string | null
    dueDate: Date | null
    orderedQuantity: number | null
    runLength: number | null
    customerSpec: string | null
    description: string | null
    setup: number | null
    makeReady: number | null
    takeDown: number | null
    expectedKitDuration: number | null
    expectedJobDuration: number | null
    scheduledDate: Date | null
    scheduledStartTime: string | null
    status: $Enums.JobStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KittingJobMaxAggregateOutputType = {
    id: string | null
    customerName: string | null
    jobNumber: string | null
    dueDate: Date | null
    orderedQuantity: number | null
    runLength: number | null
    customerSpec: string | null
    description: string | null
    setup: number | null
    makeReady: number | null
    takeDown: number | null
    expectedKitDuration: number | null
    expectedJobDuration: number | null
    scheduledDate: Date | null
    scheduledStartTime: string | null
    status: $Enums.JobStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KittingJobCountAggregateOutputType = {
    id: number
    customerName: number
    jobNumber: number
    dueDate: number
    orderedQuantity: number
    runLength: number
    customerSpec: number
    description: number
    setup: number
    makeReady: number
    takeDown: number
    expectedKitDuration: number
    expectedJobDuration: number
    scheduledDate: number
    scheduledStartTime: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type KittingJobAvgAggregateInputType = {
    orderedQuantity?: true
    runLength?: true
    setup?: true
    makeReady?: true
    takeDown?: true
    expectedKitDuration?: true
    expectedJobDuration?: true
  }

  export type KittingJobSumAggregateInputType = {
    orderedQuantity?: true
    runLength?: true
    setup?: true
    makeReady?: true
    takeDown?: true
    expectedKitDuration?: true
    expectedJobDuration?: true
  }

  export type KittingJobMinAggregateInputType = {
    id?: true
    customerName?: true
    jobNumber?: true
    dueDate?: true
    orderedQuantity?: true
    runLength?: true
    customerSpec?: true
    description?: true
    setup?: true
    makeReady?: true
    takeDown?: true
    expectedKitDuration?: true
    expectedJobDuration?: true
    scheduledDate?: true
    scheduledStartTime?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KittingJobMaxAggregateInputType = {
    id?: true
    customerName?: true
    jobNumber?: true
    dueDate?: true
    orderedQuantity?: true
    runLength?: true
    customerSpec?: true
    description?: true
    setup?: true
    makeReady?: true
    takeDown?: true
    expectedKitDuration?: true
    expectedJobDuration?: true
    scheduledDate?: true
    scheduledStartTime?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KittingJobCountAggregateInputType = {
    id?: true
    customerName?: true
    jobNumber?: true
    dueDate?: true
    orderedQuantity?: true
    runLength?: true
    customerSpec?: true
    description?: true
    setup?: true
    makeReady?: true
    takeDown?: true
    expectedKitDuration?: true
    expectedJobDuration?: true
    scheduledDate?: true
    scheduledStartTime?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type KittingJobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KittingJob to aggregate.
     */
    where?: KittingJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KittingJobs to fetch.
     */
    orderBy?: KittingJobOrderByWithRelationInput | KittingJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KittingJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KittingJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KittingJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KittingJobs
    **/
    _count?: true | KittingJobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KittingJobAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KittingJobSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KittingJobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KittingJobMaxAggregateInputType
  }

  export type GetKittingJobAggregateType<T extends KittingJobAggregateArgs> = {
        [P in keyof T & keyof AggregateKittingJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKittingJob[P]>
      : GetScalarType<T[P], AggregateKittingJob[P]>
  }




  export type KittingJobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KittingJobWhereInput
    orderBy?: KittingJobOrderByWithAggregationInput | KittingJobOrderByWithAggregationInput[]
    by: KittingJobScalarFieldEnum[] | KittingJobScalarFieldEnum
    having?: KittingJobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KittingJobCountAggregateInputType | true
    _avg?: KittingJobAvgAggregateInputType
    _sum?: KittingJobSumAggregateInputType
    _min?: KittingJobMinAggregateInputType
    _max?: KittingJobMaxAggregateInputType
  }

  export type KittingJobGroupByOutputType = {
    id: string
    customerName: string
    jobNumber: string
    dueDate: Date
    orderedQuantity: number
    runLength: number
    customerSpec: string | null
    description: string
    setup: number
    makeReady: number
    takeDown: number
    expectedKitDuration: number
    expectedJobDuration: number
    scheduledDate: Date | null
    scheduledStartTime: string | null
    status: $Enums.JobStatus
    createdAt: Date
    updatedAt: Date
    _count: KittingJobCountAggregateOutputType | null
    _avg: KittingJobAvgAggregateOutputType | null
    _sum: KittingJobSumAggregateOutputType | null
    _min: KittingJobMinAggregateOutputType | null
    _max: KittingJobMaxAggregateOutputType | null
  }

  type GetKittingJobGroupByPayload<T extends KittingJobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KittingJobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KittingJobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KittingJobGroupByOutputType[P]>
            : GetScalarType<T[P], KittingJobGroupByOutputType[P]>
        }
      >
    >


  export type KittingJobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerName?: boolean
    jobNumber?: boolean
    dueDate?: boolean
    orderedQuantity?: boolean
    runLength?: boolean
    customerSpec?: boolean
    description?: boolean
    setup?: boolean
    makeReady?: boolean
    takeDown?: boolean
    expectedKitDuration?: boolean
    expectedJobDuration?: boolean
    scheduledDate?: boolean
    scheduledStartTime?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    routeSteps?: boolean | KittingJob$routeStepsArgs<ExtArgs>
    jobProgress?: boolean | KittingJob$jobProgressArgs<ExtArgs>
    analytics?: boolean | KittingJob$analyticsArgs<ExtArgs>
    assignments?: boolean | KittingJob$assignmentsArgs<ExtArgs>
    _count?: boolean | KittingJobCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kittingJob"]>

  export type KittingJobSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerName?: boolean
    jobNumber?: boolean
    dueDate?: boolean
    orderedQuantity?: boolean
    runLength?: boolean
    customerSpec?: boolean
    description?: boolean
    setup?: boolean
    makeReady?: boolean
    takeDown?: boolean
    expectedKitDuration?: boolean
    expectedJobDuration?: boolean
    scheduledDate?: boolean
    scheduledStartTime?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["kittingJob"]>

  export type KittingJobSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerName?: boolean
    jobNumber?: boolean
    dueDate?: boolean
    orderedQuantity?: boolean
    runLength?: boolean
    customerSpec?: boolean
    description?: boolean
    setup?: boolean
    makeReady?: boolean
    takeDown?: boolean
    expectedKitDuration?: boolean
    expectedJobDuration?: boolean
    scheduledDate?: boolean
    scheduledStartTime?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["kittingJob"]>

  export type KittingJobSelectScalar = {
    id?: boolean
    customerName?: boolean
    jobNumber?: boolean
    dueDate?: boolean
    orderedQuantity?: boolean
    runLength?: boolean
    customerSpec?: boolean
    description?: boolean
    setup?: boolean
    makeReady?: boolean
    takeDown?: boolean
    expectedKitDuration?: boolean
    expectedJobDuration?: boolean
    scheduledDate?: boolean
    scheduledStartTime?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type KittingJobOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "customerName" | "jobNumber" | "dueDate" | "orderedQuantity" | "runLength" | "customerSpec" | "description" | "setup" | "makeReady" | "takeDown" | "expectedKitDuration" | "expectedJobDuration" | "scheduledDate" | "scheduledStartTime" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["kittingJob"]>
  export type KittingJobInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    routeSteps?: boolean | KittingJob$routeStepsArgs<ExtArgs>
    jobProgress?: boolean | KittingJob$jobProgressArgs<ExtArgs>
    analytics?: boolean | KittingJob$analyticsArgs<ExtArgs>
    assignments?: boolean | KittingJob$assignmentsArgs<ExtArgs>
    _count?: boolean | KittingJobCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type KittingJobIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type KittingJobIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $KittingJobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "KittingJob"
    objects: {
      routeSteps: Prisma.$RouteStepPayload<ExtArgs>[]
      jobProgress: Prisma.$JobProgressPayload<ExtArgs> | null
      analytics: Prisma.$JobAnalyticsPayload<ExtArgs> | null
      assignments: Prisma.$JobAssignmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      customerName: string
      jobNumber: string
      dueDate: Date
      orderedQuantity: number
      runLength: number
      customerSpec: string | null
      description: string
      setup: number
      makeReady: number
      takeDown: number
      expectedKitDuration: number
      expectedJobDuration: number
      scheduledDate: Date | null
      scheduledStartTime: string | null
      status: $Enums.JobStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["kittingJob"]>
    composites: {}
  }

  type KittingJobGetPayload<S extends boolean | null | undefined | KittingJobDefaultArgs> = $Result.GetResult<Prisma.$KittingJobPayload, S>

  type KittingJobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<KittingJobFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: KittingJobCountAggregateInputType | true
    }

  export interface KittingJobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KittingJob'], meta: { name: 'KittingJob' } }
    /**
     * Find zero or one KittingJob that matches the filter.
     * @param {KittingJobFindUniqueArgs} args - Arguments to find a KittingJob
     * @example
     * // Get one KittingJob
     * const kittingJob = await prisma.kittingJob.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KittingJobFindUniqueArgs>(args: SelectSubset<T, KittingJobFindUniqueArgs<ExtArgs>>): Prisma__KittingJobClient<$Result.GetResult<Prisma.$KittingJobPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one KittingJob that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {KittingJobFindUniqueOrThrowArgs} args - Arguments to find a KittingJob
     * @example
     * // Get one KittingJob
     * const kittingJob = await prisma.kittingJob.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KittingJobFindUniqueOrThrowArgs>(args: SelectSubset<T, KittingJobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KittingJobClient<$Result.GetResult<Prisma.$KittingJobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KittingJob that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KittingJobFindFirstArgs} args - Arguments to find a KittingJob
     * @example
     * // Get one KittingJob
     * const kittingJob = await prisma.kittingJob.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KittingJobFindFirstArgs>(args?: SelectSubset<T, KittingJobFindFirstArgs<ExtArgs>>): Prisma__KittingJobClient<$Result.GetResult<Prisma.$KittingJobPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KittingJob that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KittingJobFindFirstOrThrowArgs} args - Arguments to find a KittingJob
     * @example
     * // Get one KittingJob
     * const kittingJob = await prisma.kittingJob.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KittingJobFindFirstOrThrowArgs>(args?: SelectSubset<T, KittingJobFindFirstOrThrowArgs<ExtArgs>>): Prisma__KittingJobClient<$Result.GetResult<Prisma.$KittingJobPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more KittingJobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KittingJobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KittingJobs
     * const kittingJobs = await prisma.kittingJob.findMany()
     * 
     * // Get first 10 KittingJobs
     * const kittingJobs = await prisma.kittingJob.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kittingJobWithIdOnly = await prisma.kittingJob.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends KittingJobFindManyArgs>(args?: SelectSubset<T, KittingJobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KittingJobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a KittingJob.
     * @param {KittingJobCreateArgs} args - Arguments to create a KittingJob.
     * @example
     * // Create one KittingJob
     * const KittingJob = await prisma.kittingJob.create({
     *   data: {
     *     // ... data to create a KittingJob
     *   }
     * })
     * 
     */
    create<T extends KittingJobCreateArgs>(args: SelectSubset<T, KittingJobCreateArgs<ExtArgs>>): Prisma__KittingJobClient<$Result.GetResult<Prisma.$KittingJobPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many KittingJobs.
     * @param {KittingJobCreateManyArgs} args - Arguments to create many KittingJobs.
     * @example
     * // Create many KittingJobs
     * const kittingJob = await prisma.kittingJob.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KittingJobCreateManyArgs>(args?: SelectSubset<T, KittingJobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many KittingJobs and returns the data saved in the database.
     * @param {KittingJobCreateManyAndReturnArgs} args - Arguments to create many KittingJobs.
     * @example
     * // Create many KittingJobs
     * const kittingJob = await prisma.kittingJob.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many KittingJobs and only return the `id`
     * const kittingJobWithIdOnly = await prisma.kittingJob.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends KittingJobCreateManyAndReturnArgs>(args?: SelectSubset<T, KittingJobCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KittingJobPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a KittingJob.
     * @param {KittingJobDeleteArgs} args - Arguments to delete one KittingJob.
     * @example
     * // Delete one KittingJob
     * const KittingJob = await prisma.kittingJob.delete({
     *   where: {
     *     // ... filter to delete one KittingJob
     *   }
     * })
     * 
     */
    delete<T extends KittingJobDeleteArgs>(args: SelectSubset<T, KittingJobDeleteArgs<ExtArgs>>): Prisma__KittingJobClient<$Result.GetResult<Prisma.$KittingJobPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one KittingJob.
     * @param {KittingJobUpdateArgs} args - Arguments to update one KittingJob.
     * @example
     * // Update one KittingJob
     * const kittingJob = await prisma.kittingJob.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KittingJobUpdateArgs>(args: SelectSubset<T, KittingJobUpdateArgs<ExtArgs>>): Prisma__KittingJobClient<$Result.GetResult<Prisma.$KittingJobPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more KittingJobs.
     * @param {KittingJobDeleteManyArgs} args - Arguments to filter KittingJobs to delete.
     * @example
     * // Delete a few KittingJobs
     * const { count } = await prisma.kittingJob.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KittingJobDeleteManyArgs>(args?: SelectSubset<T, KittingJobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KittingJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KittingJobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KittingJobs
     * const kittingJob = await prisma.kittingJob.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KittingJobUpdateManyArgs>(args: SelectSubset<T, KittingJobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KittingJobs and returns the data updated in the database.
     * @param {KittingJobUpdateManyAndReturnArgs} args - Arguments to update many KittingJobs.
     * @example
     * // Update many KittingJobs
     * const kittingJob = await prisma.kittingJob.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more KittingJobs and only return the `id`
     * const kittingJobWithIdOnly = await prisma.kittingJob.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends KittingJobUpdateManyAndReturnArgs>(args: SelectSubset<T, KittingJobUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KittingJobPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one KittingJob.
     * @param {KittingJobUpsertArgs} args - Arguments to update or create a KittingJob.
     * @example
     * // Update or create a KittingJob
     * const kittingJob = await prisma.kittingJob.upsert({
     *   create: {
     *     // ... data to create a KittingJob
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KittingJob we want to update
     *   }
     * })
     */
    upsert<T extends KittingJobUpsertArgs>(args: SelectSubset<T, KittingJobUpsertArgs<ExtArgs>>): Prisma__KittingJobClient<$Result.GetResult<Prisma.$KittingJobPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of KittingJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KittingJobCountArgs} args - Arguments to filter KittingJobs to count.
     * @example
     * // Count the number of KittingJobs
     * const count = await prisma.kittingJob.count({
     *   where: {
     *     // ... the filter for the KittingJobs we want to count
     *   }
     * })
    **/
    count<T extends KittingJobCountArgs>(
      args?: Subset<T, KittingJobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KittingJobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KittingJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KittingJobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KittingJobAggregateArgs>(args: Subset<T, KittingJobAggregateArgs>): Prisma.PrismaPromise<GetKittingJobAggregateType<T>>

    /**
     * Group by KittingJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KittingJobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KittingJobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KittingJobGroupByArgs['orderBy'] }
        : { orderBy?: KittingJobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KittingJobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKittingJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the KittingJob model
   */
  readonly fields: KittingJobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for KittingJob.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KittingJobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    routeSteps<T extends KittingJob$routeStepsArgs<ExtArgs> = {}>(args?: Subset<T, KittingJob$routeStepsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RouteStepPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    jobProgress<T extends KittingJob$jobProgressArgs<ExtArgs> = {}>(args?: Subset<T, KittingJob$jobProgressArgs<ExtArgs>>): Prisma__JobProgressClient<$Result.GetResult<Prisma.$JobProgressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    analytics<T extends KittingJob$analyticsArgs<ExtArgs> = {}>(args?: Subset<T, KittingJob$analyticsArgs<ExtArgs>>): Prisma__JobAnalyticsClient<$Result.GetResult<Prisma.$JobAnalyticsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    assignments<T extends KittingJob$assignmentsArgs<ExtArgs> = {}>(args?: Subset<T, KittingJob$assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the KittingJob model
   */
  interface KittingJobFieldRefs {
    readonly id: FieldRef<"KittingJob", 'String'>
    readonly customerName: FieldRef<"KittingJob", 'String'>
    readonly jobNumber: FieldRef<"KittingJob", 'String'>
    readonly dueDate: FieldRef<"KittingJob", 'DateTime'>
    readonly orderedQuantity: FieldRef<"KittingJob", 'Int'>
    readonly runLength: FieldRef<"KittingJob", 'Int'>
    readonly customerSpec: FieldRef<"KittingJob", 'String'>
    readonly description: FieldRef<"KittingJob", 'String'>
    readonly setup: FieldRef<"KittingJob", 'Int'>
    readonly makeReady: FieldRef<"KittingJob", 'Int'>
    readonly takeDown: FieldRef<"KittingJob", 'Int'>
    readonly expectedKitDuration: FieldRef<"KittingJob", 'Int'>
    readonly expectedJobDuration: FieldRef<"KittingJob", 'Int'>
    readonly scheduledDate: FieldRef<"KittingJob", 'DateTime'>
    readonly scheduledStartTime: FieldRef<"KittingJob", 'String'>
    readonly status: FieldRef<"KittingJob", 'JobStatus'>
    readonly createdAt: FieldRef<"KittingJob", 'DateTime'>
    readonly updatedAt: FieldRef<"KittingJob", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * KittingJob findUnique
   */
  export type KittingJobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KittingJob
     */
    select?: KittingJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KittingJob
     */
    omit?: KittingJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KittingJobInclude<ExtArgs> | null
    /**
     * Filter, which KittingJob to fetch.
     */
    where: KittingJobWhereUniqueInput
  }

  /**
   * KittingJob findUniqueOrThrow
   */
  export type KittingJobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KittingJob
     */
    select?: KittingJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KittingJob
     */
    omit?: KittingJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KittingJobInclude<ExtArgs> | null
    /**
     * Filter, which KittingJob to fetch.
     */
    where: KittingJobWhereUniqueInput
  }

  /**
   * KittingJob findFirst
   */
  export type KittingJobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KittingJob
     */
    select?: KittingJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KittingJob
     */
    omit?: KittingJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KittingJobInclude<ExtArgs> | null
    /**
     * Filter, which KittingJob to fetch.
     */
    where?: KittingJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KittingJobs to fetch.
     */
    orderBy?: KittingJobOrderByWithRelationInput | KittingJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KittingJobs.
     */
    cursor?: KittingJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KittingJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KittingJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KittingJobs.
     */
    distinct?: KittingJobScalarFieldEnum | KittingJobScalarFieldEnum[]
  }

  /**
   * KittingJob findFirstOrThrow
   */
  export type KittingJobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KittingJob
     */
    select?: KittingJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KittingJob
     */
    omit?: KittingJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KittingJobInclude<ExtArgs> | null
    /**
     * Filter, which KittingJob to fetch.
     */
    where?: KittingJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KittingJobs to fetch.
     */
    orderBy?: KittingJobOrderByWithRelationInput | KittingJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KittingJobs.
     */
    cursor?: KittingJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KittingJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KittingJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KittingJobs.
     */
    distinct?: KittingJobScalarFieldEnum | KittingJobScalarFieldEnum[]
  }

  /**
   * KittingJob findMany
   */
  export type KittingJobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KittingJob
     */
    select?: KittingJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KittingJob
     */
    omit?: KittingJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KittingJobInclude<ExtArgs> | null
    /**
     * Filter, which KittingJobs to fetch.
     */
    where?: KittingJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KittingJobs to fetch.
     */
    orderBy?: KittingJobOrderByWithRelationInput | KittingJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KittingJobs.
     */
    cursor?: KittingJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KittingJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KittingJobs.
     */
    skip?: number
    distinct?: KittingJobScalarFieldEnum | KittingJobScalarFieldEnum[]
  }

  /**
   * KittingJob create
   */
  export type KittingJobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KittingJob
     */
    select?: KittingJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KittingJob
     */
    omit?: KittingJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KittingJobInclude<ExtArgs> | null
    /**
     * The data needed to create a KittingJob.
     */
    data: XOR<KittingJobCreateInput, KittingJobUncheckedCreateInput>
  }

  /**
   * KittingJob createMany
   */
  export type KittingJobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many KittingJobs.
     */
    data: KittingJobCreateManyInput | KittingJobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KittingJob createManyAndReturn
   */
  export type KittingJobCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KittingJob
     */
    select?: KittingJobSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the KittingJob
     */
    omit?: KittingJobOmit<ExtArgs> | null
    /**
     * The data used to create many KittingJobs.
     */
    data: KittingJobCreateManyInput | KittingJobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KittingJob update
   */
  export type KittingJobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KittingJob
     */
    select?: KittingJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KittingJob
     */
    omit?: KittingJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KittingJobInclude<ExtArgs> | null
    /**
     * The data needed to update a KittingJob.
     */
    data: XOR<KittingJobUpdateInput, KittingJobUncheckedUpdateInput>
    /**
     * Choose, which KittingJob to update.
     */
    where: KittingJobWhereUniqueInput
  }

  /**
   * KittingJob updateMany
   */
  export type KittingJobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update KittingJobs.
     */
    data: XOR<KittingJobUpdateManyMutationInput, KittingJobUncheckedUpdateManyInput>
    /**
     * Filter which KittingJobs to update
     */
    where?: KittingJobWhereInput
    /**
     * Limit how many KittingJobs to update.
     */
    limit?: number
  }

  /**
   * KittingJob updateManyAndReturn
   */
  export type KittingJobUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KittingJob
     */
    select?: KittingJobSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the KittingJob
     */
    omit?: KittingJobOmit<ExtArgs> | null
    /**
     * The data used to update KittingJobs.
     */
    data: XOR<KittingJobUpdateManyMutationInput, KittingJobUncheckedUpdateManyInput>
    /**
     * Filter which KittingJobs to update
     */
    where?: KittingJobWhereInput
    /**
     * Limit how many KittingJobs to update.
     */
    limit?: number
  }

  /**
   * KittingJob upsert
   */
  export type KittingJobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KittingJob
     */
    select?: KittingJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KittingJob
     */
    omit?: KittingJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KittingJobInclude<ExtArgs> | null
    /**
     * The filter to search for the KittingJob to update in case it exists.
     */
    where: KittingJobWhereUniqueInput
    /**
     * In case the KittingJob found by the `where` argument doesn't exist, create a new KittingJob with this data.
     */
    create: XOR<KittingJobCreateInput, KittingJobUncheckedCreateInput>
    /**
     * In case the KittingJob was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KittingJobUpdateInput, KittingJobUncheckedUpdateInput>
  }

  /**
   * KittingJob delete
   */
  export type KittingJobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KittingJob
     */
    select?: KittingJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KittingJob
     */
    omit?: KittingJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KittingJobInclude<ExtArgs> | null
    /**
     * Filter which KittingJob to delete.
     */
    where: KittingJobWhereUniqueInput
  }

  /**
   * KittingJob deleteMany
   */
  export type KittingJobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KittingJobs to delete
     */
    where?: KittingJobWhereInput
    /**
     * Limit how many KittingJobs to delete.
     */
    limit?: number
  }

  /**
   * KittingJob.routeSteps
   */
  export type KittingJob$routeStepsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteStep
     */
    select?: RouteStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RouteStep
     */
    omit?: RouteStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteStepInclude<ExtArgs> | null
    where?: RouteStepWhereInput
    orderBy?: RouteStepOrderByWithRelationInput | RouteStepOrderByWithRelationInput[]
    cursor?: RouteStepWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RouteStepScalarFieldEnum | RouteStepScalarFieldEnum[]
  }

  /**
   * KittingJob.jobProgress
   */
  export type KittingJob$jobProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobProgress
     */
    select?: JobProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobProgress
     */
    omit?: JobProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobProgressInclude<ExtArgs> | null
    where?: JobProgressWhereInput
  }

  /**
   * KittingJob.analytics
   */
  export type KittingJob$analyticsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobAnalytics
     */
    select?: JobAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobAnalytics
     */
    omit?: JobAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobAnalyticsInclude<ExtArgs> | null
    where?: JobAnalyticsWhereInput
  }

  /**
   * KittingJob.assignments
   */
  export type KittingJob$assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobAssignment
     */
    select?: JobAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobAssignment
     */
    omit?: JobAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobAssignmentInclude<ExtArgs> | null
    where?: JobAssignmentWhereInput
    orderBy?: JobAssignmentOrderByWithRelationInput | JobAssignmentOrderByWithRelationInput[]
    cursor?: JobAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobAssignmentScalarFieldEnum | JobAssignmentScalarFieldEnum[]
  }

  /**
   * KittingJob without action
   */
  export type KittingJobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KittingJob
     */
    select?: KittingJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KittingJob
     */
    omit?: KittingJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KittingJobInclude<ExtArgs> | null
  }


  /**
   * Model RouteStep
   */

  export type AggregateRouteStep = {
    _count: RouteStepCountAggregateOutputType | null
    _avg: RouteStepAvgAggregateOutputType | null
    _sum: RouteStepSumAggregateOutputType | null
    _min: RouteStepMinAggregateOutputType | null
    _max: RouteStepMaxAggregateOutputType | null
  }

  export type RouteStepAvgAggregateOutputType = {
    expectedSeconds: number | null
    order: number | null
  }

  export type RouteStepSumAggregateOutputType = {
    expectedSeconds: number | null
    order: number | null
  }

  export type RouteStepMinAggregateOutputType = {
    id: string | null
    name: string | null
    expectedSeconds: number | null
    order: number | null
    instructionType: $Enums.InstructionType | null
    instructionUrl: string | null
    instructionText: string | null
    autoLoop: boolean | null
    kittingJobId: string | null
  }

  export type RouteStepMaxAggregateOutputType = {
    id: string | null
    name: string | null
    expectedSeconds: number | null
    order: number | null
    instructionType: $Enums.InstructionType | null
    instructionUrl: string | null
    instructionText: string | null
    autoLoop: boolean | null
    kittingJobId: string | null
  }

  export type RouteStepCountAggregateOutputType = {
    id: number
    name: number
    expectedSeconds: number
    order: number
    instructionType: number
    instructionUrl: number
    instructionText: number
    autoLoop: number
    kittingJobId: number
    _all: number
  }


  export type RouteStepAvgAggregateInputType = {
    expectedSeconds?: true
    order?: true
  }

  export type RouteStepSumAggregateInputType = {
    expectedSeconds?: true
    order?: true
  }

  export type RouteStepMinAggregateInputType = {
    id?: true
    name?: true
    expectedSeconds?: true
    order?: true
    instructionType?: true
    instructionUrl?: true
    instructionText?: true
    autoLoop?: true
    kittingJobId?: true
  }

  export type RouteStepMaxAggregateInputType = {
    id?: true
    name?: true
    expectedSeconds?: true
    order?: true
    instructionType?: true
    instructionUrl?: true
    instructionText?: true
    autoLoop?: true
    kittingJobId?: true
  }

  export type RouteStepCountAggregateInputType = {
    id?: true
    name?: true
    expectedSeconds?: true
    order?: true
    instructionType?: true
    instructionUrl?: true
    instructionText?: true
    autoLoop?: true
    kittingJobId?: true
    _all?: true
  }

  export type RouteStepAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RouteStep to aggregate.
     */
    where?: RouteStepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RouteSteps to fetch.
     */
    orderBy?: RouteStepOrderByWithRelationInput | RouteStepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RouteStepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RouteSteps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RouteSteps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RouteSteps
    **/
    _count?: true | RouteStepCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RouteStepAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RouteStepSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RouteStepMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RouteStepMaxAggregateInputType
  }

  export type GetRouteStepAggregateType<T extends RouteStepAggregateArgs> = {
        [P in keyof T & keyof AggregateRouteStep]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRouteStep[P]>
      : GetScalarType<T[P], AggregateRouteStep[P]>
  }




  export type RouteStepGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RouteStepWhereInput
    orderBy?: RouteStepOrderByWithAggregationInput | RouteStepOrderByWithAggregationInput[]
    by: RouteStepScalarFieldEnum[] | RouteStepScalarFieldEnum
    having?: RouteStepScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RouteStepCountAggregateInputType | true
    _avg?: RouteStepAvgAggregateInputType
    _sum?: RouteStepSumAggregateInputType
    _min?: RouteStepMinAggregateInputType
    _max?: RouteStepMaxAggregateInputType
  }

  export type RouteStepGroupByOutputType = {
    id: string
    name: string
    expectedSeconds: number
    order: number
    instructionType: $Enums.InstructionType
    instructionUrl: string | null
    instructionText: string | null
    autoLoop: boolean
    kittingJobId: string
    _count: RouteStepCountAggregateOutputType | null
    _avg: RouteStepAvgAggregateOutputType | null
    _sum: RouteStepSumAggregateOutputType | null
    _min: RouteStepMinAggregateOutputType | null
    _max: RouteStepMaxAggregateOutputType | null
  }

  type GetRouteStepGroupByPayload<T extends RouteStepGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RouteStepGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RouteStepGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RouteStepGroupByOutputType[P]>
            : GetScalarType<T[P], RouteStepGroupByOutputType[P]>
        }
      >
    >


  export type RouteStepSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    expectedSeconds?: boolean
    order?: boolean
    instructionType?: boolean
    instructionUrl?: boolean
    instructionText?: boolean
    autoLoop?: boolean
    kittingJobId?: boolean
    kittingJob?: boolean | KittingJobDefaultArgs<ExtArgs>
    stepExecutions?: boolean | RouteStep$stepExecutionsArgs<ExtArgs>
    _count?: boolean | RouteStepCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["routeStep"]>

  export type RouteStepSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    expectedSeconds?: boolean
    order?: boolean
    instructionType?: boolean
    instructionUrl?: boolean
    instructionText?: boolean
    autoLoop?: boolean
    kittingJobId?: boolean
    kittingJob?: boolean | KittingJobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["routeStep"]>

  export type RouteStepSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    expectedSeconds?: boolean
    order?: boolean
    instructionType?: boolean
    instructionUrl?: boolean
    instructionText?: boolean
    autoLoop?: boolean
    kittingJobId?: boolean
    kittingJob?: boolean | KittingJobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["routeStep"]>

  export type RouteStepSelectScalar = {
    id?: boolean
    name?: boolean
    expectedSeconds?: boolean
    order?: boolean
    instructionType?: boolean
    instructionUrl?: boolean
    instructionText?: boolean
    autoLoop?: boolean
    kittingJobId?: boolean
  }

  export type RouteStepOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "expectedSeconds" | "order" | "instructionType" | "instructionUrl" | "instructionText" | "autoLoop" | "kittingJobId", ExtArgs["result"]["routeStep"]>
  export type RouteStepInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kittingJob?: boolean | KittingJobDefaultArgs<ExtArgs>
    stepExecutions?: boolean | RouteStep$stepExecutionsArgs<ExtArgs>
    _count?: boolean | RouteStepCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RouteStepIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kittingJob?: boolean | KittingJobDefaultArgs<ExtArgs>
  }
  export type RouteStepIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kittingJob?: boolean | KittingJobDefaultArgs<ExtArgs>
  }

  export type $RouteStepPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RouteStep"
    objects: {
      kittingJob: Prisma.$KittingJobPayload<ExtArgs>
      stepExecutions: Prisma.$StepExecutionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      expectedSeconds: number
      order: number
      instructionType: $Enums.InstructionType
      instructionUrl: string | null
      instructionText: string | null
      autoLoop: boolean
      kittingJobId: string
    }, ExtArgs["result"]["routeStep"]>
    composites: {}
  }

  type RouteStepGetPayload<S extends boolean | null | undefined | RouteStepDefaultArgs> = $Result.GetResult<Prisma.$RouteStepPayload, S>

  type RouteStepCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RouteStepFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RouteStepCountAggregateInputType | true
    }

  export interface RouteStepDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RouteStep'], meta: { name: 'RouteStep' } }
    /**
     * Find zero or one RouteStep that matches the filter.
     * @param {RouteStepFindUniqueArgs} args - Arguments to find a RouteStep
     * @example
     * // Get one RouteStep
     * const routeStep = await prisma.routeStep.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RouteStepFindUniqueArgs>(args: SelectSubset<T, RouteStepFindUniqueArgs<ExtArgs>>): Prisma__RouteStepClient<$Result.GetResult<Prisma.$RouteStepPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RouteStep that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RouteStepFindUniqueOrThrowArgs} args - Arguments to find a RouteStep
     * @example
     * // Get one RouteStep
     * const routeStep = await prisma.routeStep.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RouteStepFindUniqueOrThrowArgs>(args: SelectSubset<T, RouteStepFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RouteStepClient<$Result.GetResult<Prisma.$RouteStepPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RouteStep that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteStepFindFirstArgs} args - Arguments to find a RouteStep
     * @example
     * // Get one RouteStep
     * const routeStep = await prisma.routeStep.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RouteStepFindFirstArgs>(args?: SelectSubset<T, RouteStepFindFirstArgs<ExtArgs>>): Prisma__RouteStepClient<$Result.GetResult<Prisma.$RouteStepPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RouteStep that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteStepFindFirstOrThrowArgs} args - Arguments to find a RouteStep
     * @example
     * // Get one RouteStep
     * const routeStep = await prisma.routeStep.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RouteStepFindFirstOrThrowArgs>(args?: SelectSubset<T, RouteStepFindFirstOrThrowArgs<ExtArgs>>): Prisma__RouteStepClient<$Result.GetResult<Prisma.$RouteStepPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RouteSteps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteStepFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RouteSteps
     * const routeSteps = await prisma.routeStep.findMany()
     * 
     * // Get first 10 RouteSteps
     * const routeSteps = await prisma.routeStep.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const routeStepWithIdOnly = await prisma.routeStep.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RouteStepFindManyArgs>(args?: SelectSubset<T, RouteStepFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RouteStepPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RouteStep.
     * @param {RouteStepCreateArgs} args - Arguments to create a RouteStep.
     * @example
     * // Create one RouteStep
     * const RouteStep = await prisma.routeStep.create({
     *   data: {
     *     // ... data to create a RouteStep
     *   }
     * })
     * 
     */
    create<T extends RouteStepCreateArgs>(args: SelectSubset<T, RouteStepCreateArgs<ExtArgs>>): Prisma__RouteStepClient<$Result.GetResult<Prisma.$RouteStepPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RouteSteps.
     * @param {RouteStepCreateManyArgs} args - Arguments to create many RouteSteps.
     * @example
     * // Create many RouteSteps
     * const routeStep = await prisma.routeStep.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RouteStepCreateManyArgs>(args?: SelectSubset<T, RouteStepCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RouteSteps and returns the data saved in the database.
     * @param {RouteStepCreateManyAndReturnArgs} args - Arguments to create many RouteSteps.
     * @example
     * // Create many RouteSteps
     * const routeStep = await prisma.routeStep.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RouteSteps and only return the `id`
     * const routeStepWithIdOnly = await prisma.routeStep.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RouteStepCreateManyAndReturnArgs>(args?: SelectSubset<T, RouteStepCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RouteStepPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RouteStep.
     * @param {RouteStepDeleteArgs} args - Arguments to delete one RouteStep.
     * @example
     * // Delete one RouteStep
     * const RouteStep = await prisma.routeStep.delete({
     *   where: {
     *     // ... filter to delete one RouteStep
     *   }
     * })
     * 
     */
    delete<T extends RouteStepDeleteArgs>(args: SelectSubset<T, RouteStepDeleteArgs<ExtArgs>>): Prisma__RouteStepClient<$Result.GetResult<Prisma.$RouteStepPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RouteStep.
     * @param {RouteStepUpdateArgs} args - Arguments to update one RouteStep.
     * @example
     * // Update one RouteStep
     * const routeStep = await prisma.routeStep.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RouteStepUpdateArgs>(args: SelectSubset<T, RouteStepUpdateArgs<ExtArgs>>): Prisma__RouteStepClient<$Result.GetResult<Prisma.$RouteStepPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RouteSteps.
     * @param {RouteStepDeleteManyArgs} args - Arguments to filter RouteSteps to delete.
     * @example
     * // Delete a few RouteSteps
     * const { count } = await prisma.routeStep.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RouteStepDeleteManyArgs>(args?: SelectSubset<T, RouteStepDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RouteSteps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteStepUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RouteSteps
     * const routeStep = await prisma.routeStep.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RouteStepUpdateManyArgs>(args: SelectSubset<T, RouteStepUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RouteSteps and returns the data updated in the database.
     * @param {RouteStepUpdateManyAndReturnArgs} args - Arguments to update many RouteSteps.
     * @example
     * // Update many RouteSteps
     * const routeStep = await prisma.routeStep.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RouteSteps and only return the `id`
     * const routeStepWithIdOnly = await prisma.routeStep.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RouteStepUpdateManyAndReturnArgs>(args: SelectSubset<T, RouteStepUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RouteStepPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RouteStep.
     * @param {RouteStepUpsertArgs} args - Arguments to update or create a RouteStep.
     * @example
     * // Update or create a RouteStep
     * const routeStep = await prisma.routeStep.upsert({
     *   create: {
     *     // ... data to create a RouteStep
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RouteStep we want to update
     *   }
     * })
     */
    upsert<T extends RouteStepUpsertArgs>(args: SelectSubset<T, RouteStepUpsertArgs<ExtArgs>>): Prisma__RouteStepClient<$Result.GetResult<Prisma.$RouteStepPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RouteSteps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteStepCountArgs} args - Arguments to filter RouteSteps to count.
     * @example
     * // Count the number of RouteSteps
     * const count = await prisma.routeStep.count({
     *   where: {
     *     // ... the filter for the RouteSteps we want to count
     *   }
     * })
    **/
    count<T extends RouteStepCountArgs>(
      args?: Subset<T, RouteStepCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RouteStepCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RouteStep.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteStepAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RouteStepAggregateArgs>(args: Subset<T, RouteStepAggregateArgs>): Prisma.PrismaPromise<GetRouteStepAggregateType<T>>

    /**
     * Group by RouteStep.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteStepGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RouteStepGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RouteStepGroupByArgs['orderBy'] }
        : { orderBy?: RouteStepGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RouteStepGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRouteStepGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RouteStep model
   */
  readonly fields: RouteStepFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RouteStep.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RouteStepClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    kittingJob<T extends KittingJobDefaultArgs<ExtArgs> = {}>(args?: Subset<T, KittingJobDefaultArgs<ExtArgs>>): Prisma__KittingJobClient<$Result.GetResult<Prisma.$KittingJobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    stepExecutions<T extends RouteStep$stepExecutionsArgs<ExtArgs> = {}>(args?: Subset<T, RouteStep$stepExecutionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StepExecutionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RouteStep model
   */
  interface RouteStepFieldRefs {
    readonly id: FieldRef<"RouteStep", 'String'>
    readonly name: FieldRef<"RouteStep", 'String'>
    readonly expectedSeconds: FieldRef<"RouteStep", 'Int'>
    readonly order: FieldRef<"RouteStep", 'Int'>
    readonly instructionType: FieldRef<"RouteStep", 'InstructionType'>
    readonly instructionUrl: FieldRef<"RouteStep", 'String'>
    readonly instructionText: FieldRef<"RouteStep", 'String'>
    readonly autoLoop: FieldRef<"RouteStep", 'Boolean'>
    readonly kittingJobId: FieldRef<"RouteStep", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RouteStep findUnique
   */
  export type RouteStepFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteStep
     */
    select?: RouteStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RouteStep
     */
    omit?: RouteStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteStepInclude<ExtArgs> | null
    /**
     * Filter, which RouteStep to fetch.
     */
    where: RouteStepWhereUniqueInput
  }

  /**
   * RouteStep findUniqueOrThrow
   */
  export type RouteStepFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteStep
     */
    select?: RouteStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RouteStep
     */
    omit?: RouteStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteStepInclude<ExtArgs> | null
    /**
     * Filter, which RouteStep to fetch.
     */
    where: RouteStepWhereUniqueInput
  }

  /**
   * RouteStep findFirst
   */
  export type RouteStepFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteStep
     */
    select?: RouteStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RouteStep
     */
    omit?: RouteStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteStepInclude<ExtArgs> | null
    /**
     * Filter, which RouteStep to fetch.
     */
    where?: RouteStepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RouteSteps to fetch.
     */
    orderBy?: RouteStepOrderByWithRelationInput | RouteStepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RouteSteps.
     */
    cursor?: RouteStepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RouteSteps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RouteSteps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RouteSteps.
     */
    distinct?: RouteStepScalarFieldEnum | RouteStepScalarFieldEnum[]
  }

  /**
   * RouteStep findFirstOrThrow
   */
  export type RouteStepFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteStep
     */
    select?: RouteStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RouteStep
     */
    omit?: RouteStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteStepInclude<ExtArgs> | null
    /**
     * Filter, which RouteStep to fetch.
     */
    where?: RouteStepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RouteSteps to fetch.
     */
    orderBy?: RouteStepOrderByWithRelationInput | RouteStepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RouteSteps.
     */
    cursor?: RouteStepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RouteSteps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RouteSteps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RouteSteps.
     */
    distinct?: RouteStepScalarFieldEnum | RouteStepScalarFieldEnum[]
  }

  /**
   * RouteStep findMany
   */
  export type RouteStepFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteStep
     */
    select?: RouteStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RouteStep
     */
    omit?: RouteStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteStepInclude<ExtArgs> | null
    /**
     * Filter, which RouteSteps to fetch.
     */
    where?: RouteStepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RouteSteps to fetch.
     */
    orderBy?: RouteStepOrderByWithRelationInput | RouteStepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RouteSteps.
     */
    cursor?: RouteStepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RouteSteps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RouteSteps.
     */
    skip?: number
    distinct?: RouteStepScalarFieldEnum | RouteStepScalarFieldEnum[]
  }

  /**
   * RouteStep create
   */
  export type RouteStepCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteStep
     */
    select?: RouteStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RouteStep
     */
    omit?: RouteStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteStepInclude<ExtArgs> | null
    /**
     * The data needed to create a RouteStep.
     */
    data: XOR<RouteStepCreateInput, RouteStepUncheckedCreateInput>
  }

  /**
   * RouteStep createMany
   */
  export type RouteStepCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RouteSteps.
     */
    data: RouteStepCreateManyInput | RouteStepCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RouteStep createManyAndReturn
   */
  export type RouteStepCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteStep
     */
    select?: RouteStepSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RouteStep
     */
    omit?: RouteStepOmit<ExtArgs> | null
    /**
     * The data used to create many RouteSteps.
     */
    data: RouteStepCreateManyInput | RouteStepCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteStepIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RouteStep update
   */
  export type RouteStepUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteStep
     */
    select?: RouteStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RouteStep
     */
    omit?: RouteStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteStepInclude<ExtArgs> | null
    /**
     * The data needed to update a RouteStep.
     */
    data: XOR<RouteStepUpdateInput, RouteStepUncheckedUpdateInput>
    /**
     * Choose, which RouteStep to update.
     */
    where: RouteStepWhereUniqueInput
  }

  /**
   * RouteStep updateMany
   */
  export type RouteStepUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RouteSteps.
     */
    data: XOR<RouteStepUpdateManyMutationInput, RouteStepUncheckedUpdateManyInput>
    /**
     * Filter which RouteSteps to update
     */
    where?: RouteStepWhereInput
    /**
     * Limit how many RouteSteps to update.
     */
    limit?: number
  }

  /**
   * RouteStep updateManyAndReturn
   */
  export type RouteStepUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteStep
     */
    select?: RouteStepSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RouteStep
     */
    omit?: RouteStepOmit<ExtArgs> | null
    /**
     * The data used to update RouteSteps.
     */
    data: XOR<RouteStepUpdateManyMutationInput, RouteStepUncheckedUpdateManyInput>
    /**
     * Filter which RouteSteps to update
     */
    where?: RouteStepWhereInput
    /**
     * Limit how many RouteSteps to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteStepIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RouteStep upsert
   */
  export type RouteStepUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteStep
     */
    select?: RouteStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RouteStep
     */
    omit?: RouteStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteStepInclude<ExtArgs> | null
    /**
     * The filter to search for the RouteStep to update in case it exists.
     */
    where: RouteStepWhereUniqueInput
    /**
     * In case the RouteStep found by the `where` argument doesn't exist, create a new RouteStep with this data.
     */
    create: XOR<RouteStepCreateInput, RouteStepUncheckedCreateInput>
    /**
     * In case the RouteStep was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RouteStepUpdateInput, RouteStepUncheckedUpdateInput>
  }

  /**
   * RouteStep delete
   */
  export type RouteStepDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteStep
     */
    select?: RouteStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RouteStep
     */
    omit?: RouteStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteStepInclude<ExtArgs> | null
    /**
     * Filter which RouteStep to delete.
     */
    where: RouteStepWhereUniqueInput
  }

  /**
   * RouteStep deleteMany
   */
  export type RouteStepDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RouteSteps to delete
     */
    where?: RouteStepWhereInput
    /**
     * Limit how many RouteSteps to delete.
     */
    limit?: number
  }

  /**
   * RouteStep.stepExecutions
   */
  export type RouteStep$stepExecutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepExecution
     */
    select?: StepExecutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StepExecution
     */
    omit?: StepExecutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepExecutionInclude<ExtArgs> | null
    where?: StepExecutionWhereInput
    orderBy?: StepExecutionOrderByWithRelationInput | StepExecutionOrderByWithRelationInput[]
    cursor?: StepExecutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StepExecutionScalarFieldEnum | StepExecutionScalarFieldEnum[]
  }

  /**
   * RouteStep without action
   */
  export type RouteStepDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteStep
     */
    select?: RouteStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RouteStep
     */
    omit?: RouteStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteStepInclude<ExtArgs> | null
  }


  /**
   * Model JobProgress
   */

  export type AggregateJobProgress = {
    _count: JobProgressCountAggregateOutputType | null
    _avg: JobProgressAvgAggregateOutputType | null
    _sum: JobProgressSumAggregateOutputType | null
    _min: JobProgressMinAggregateOutputType | null
    _max: JobProgressMaxAggregateOutputType | null
  }

  export type JobProgressAvgAggregateOutputType = {
    actualJobDuration: number | null
    completedKits: number | null
    remainingKits: number | null
    currentKitNumber: number | null
    pausedTime: number | null
  }

  export type JobProgressSumAggregateOutputType = {
    actualJobDuration: number | null
    completedKits: number | null
    remainingKits: number | null
    currentKitNumber: number | null
    pausedTime: number | null
  }

  export type JobProgressMinAggregateOutputType = {
    id: string | null
    jobId: string | null
    startTime: Date | null
    endTime: Date | null
    actualJobDuration: number | null
    completedKits: number | null
    remainingKits: number | null
    currentKitNumber: number | null
    isActive: boolean | null
    pausedTime: number | null
    workCenterId: string | null
    assignedWorker: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JobProgressMaxAggregateOutputType = {
    id: string | null
    jobId: string | null
    startTime: Date | null
    endTime: Date | null
    actualJobDuration: number | null
    completedKits: number | null
    remainingKits: number | null
    currentKitNumber: number | null
    isActive: boolean | null
    pausedTime: number | null
    workCenterId: string | null
    assignedWorker: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JobProgressCountAggregateOutputType = {
    id: number
    jobId: number
    startTime: number
    endTime: number
    actualJobDuration: number
    completedKits: number
    remainingKits: number
    currentKitNumber: number
    isActive: number
    pausedTime: number
    workCenterId: number
    assignedWorker: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type JobProgressAvgAggregateInputType = {
    actualJobDuration?: true
    completedKits?: true
    remainingKits?: true
    currentKitNumber?: true
    pausedTime?: true
  }

  export type JobProgressSumAggregateInputType = {
    actualJobDuration?: true
    completedKits?: true
    remainingKits?: true
    currentKitNumber?: true
    pausedTime?: true
  }

  export type JobProgressMinAggregateInputType = {
    id?: true
    jobId?: true
    startTime?: true
    endTime?: true
    actualJobDuration?: true
    completedKits?: true
    remainingKits?: true
    currentKitNumber?: true
    isActive?: true
    pausedTime?: true
    workCenterId?: true
    assignedWorker?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JobProgressMaxAggregateInputType = {
    id?: true
    jobId?: true
    startTime?: true
    endTime?: true
    actualJobDuration?: true
    completedKits?: true
    remainingKits?: true
    currentKitNumber?: true
    isActive?: true
    pausedTime?: true
    workCenterId?: true
    assignedWorker?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JobProgressCountAggregateInputType = {
    id?: true
    jobId?: true
    startTime?: true
    endTime?: true
    actualJobDuration?: true
    completedKits?: true
    remainingKits?: true
    currentKitNumber?: true
    isActive?: true
    pausedTime?: true
    workCenterId?: true
    assignedWorker?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type JobProgressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobProgress to aggregate.
     */
    where?: JobProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobProgresses to fetch.
     */
    orderBy?: JobProgressOrderByWithRelationInput | JobProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JobProgresses
    **/
    _count?: true | JobProgressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobProgressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobProgressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobProgressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobProgressMaxAggregateInputType
  }

  export type GetJobProgressAggregateType<T extends JobProgressAggregateArgs> = {
        [P in keyof T & keyof AggregateJobProgress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobProgress[P]>
      : GetScalarType<T[P], AggregateJobProgress[P]>
  }




  export type JobProgressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobProgressWhereInput
    orderBy?: JobProgressOrderByWithAggregationInput | JobProgressOrderByWithAggregationInput[]
    by: JobProgressScalarFieldEnum[] | JobProgressScalarFieldEnum
    having?: JobProgressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobProgressCountAggregateInputType | true
    _avg?: JobProgressAvgAggregateInputType
    _sum?: JobProgressSumAggregateInputType
    _min?: JobProgressMinAggregateInputType
    _max?: JobProgressMaxAggregateInputType
  }

  export type JobProgressGroupByOutputType = {
    id: string
    jobId: string
    startTime: Date | null
    endTime: Date | null
    actualJobDuration: number | null
    completedKits: number
    remainingKits: number
    currentKitNumber: number | null
    isActive: boolean
    pausedTime: number
    workCenterId: string | null
    assignedWorker: string | null
    createdAt: Date
    updatedAt: Date
    _count: JobProgressCountAggregateOutputType | null
    _avg: JobProgressAvgAggregateOutputType | null
    _sum: JobProgressSumAggregateOutputType | null
    _min: JobProgressMinAggregateOutputType | null
    _max: JobProgressMaxAggregateOutputType | null
  }

  type GetJobProgressGroupByPayload<T extends JobProgressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobProgressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobProgressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobProgressGroupByOutputType[P]>
            : GetScalarType<T[P], JobProgressGroupByOutputType[P]>
        }
      >
    >


  export type JobProgressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    startTime?: boolean
    endTime?: boolean
    actualJobDuration?: boolean
    completedKits?: boolean
    remainingKits?: boolean
    currentKitNumber?: boolean
    isActive?: boolean
    pausedTime?: boolean
    workCenterId?: boolean
    assignedWorker?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    kittingJob?: boolean | KittingJobDefaultArgs<ExtArgs>
    workCenter?: boolean | JobProgress$workCenterArgs<ExtArgs>
    kitExecutions?: boolean | JobProgress$kitExecutionsArgs<ExtArgs>
    _count?: boolean | JobProgressCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobProgress"]>

  export type JobProgressSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    startTime?: boolean
    endTime?: boolean
    actualJobDuration?: boolean
    completedKits?: boolean
    remainingKits?: boolean
    currentKitNumber?: boolean
    isActive?: boolean
    pausedTime?: boolean
    workCenterId?: boolean
    assignedWorker?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    kittingJob?: boolean | KittingJobDefaultArgs<ExtArgs>
    workCenter?: boolean | JobProgress$workCenterArgs<ExtArgs>
  }, ExtArgs["result"]["jobProgress"]>

  export type JobProgressSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    startTime?: boolean
    endTime?: boolean
    actualJobDuration?: boolean
    completedKits?: boolean
    remainingKits?: boolean
    currentKitNumber?: boolean
    isActive?: boolean
    pausedTime?: boolean
    workCenterId?: boolean
    assignedWorker?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    kittingJob?: boolean | KittingJobDefaultArgs<ExtArgs>
    workCenter?: boolean | JobProgress$workCenterArgs<ExtArgs>
  }, ExtArgs["result"]["jobProgress"]>

  export type JobProgressSelectScalar = {
    id?: boolean
    jobId?: boolean
    startTime?: boolean
    endTime?: boolean
    actualJobDuration?: boolean
    completedKits?: boolean
    remainingKits?: boolean
    currentKitNumber?: boolean
    isActive?: boolean
    pausedTime?: boolean
    workCenterId?: boolean
    assignedWorker?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type JobProgressOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "jobId" | "startTime" | "endTime" | "actualJobDuration" | "completedKits" | "remainingKits" | "currentKitNumber" | "isActive" | "pausedTime" | "workCenterId" | "assignedWorker" | "createdAt" | "updatedAt", ExtArgs["result"]["jobProgress"]>
  export type JobProgressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kittingJob?: boolean | KittingJobDefaultArgs<ExtArgs>
    workCenter?: boolean | JobProgress$workCenterArgs<ExtArgs>
    kitExecutions?: boolean | JobProgress$kitExecutionsArgs<ExtArgs>
    _count?: boolean | JobProgressCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type JobProgressIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kittingJob?: boolean | KittingJobDefaultArgs<ExtArgs>
    workCenter?: boolean | JobProgress$workCenterArgs<ExtArgs>
  }
  export type JobProgressIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kittingJob?: boolean | KittingJobDefaultArgs<ExtArgs>
    workCenter?: boolean | JobProgress$workCenterArgs<ExtArgs>
  }

  export type $JobProgressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JobProgress"
    objects: {
      kittingJob: Prisma.$KittingJobPayload<ExtArgs>
      workCenter: Prisma.$WorkCenterPayload<ExtArgs> | null
      kitExecutions: Prisma.$KitExecutionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      jobId: string
      startTime: Date | null
      endTime: Date | null
      actualJobDuration: number | null
      completedKits: number
      remainingKits: number
      currentKitNumber: number | null
      isActive: boolean
      pausedTime: number
      workCenterId: string | null
      assignedWorker: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["jobProgress"]>
    composites: {}
  }

  type JobProgressGetPayload<S extends boolean | null | undefined | JobProgressDefaultArgs> = $Result.GetResult<Prisma.$JobProgressPayload, S>

  type JobProgressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JobProgressFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JobProgressCountAggregateInputType | true
    }

  export interface JobProgressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JobProgress'], meta: { name: 'JobProgress' } }
    /**
     * Find zero or one JobProgress that matches the filter.
     * @param {JobProgressFindUniqueArgs} args - Arguments to find a JobProgress
     * @example
     * // Get one JobProgress
     * const jobProgress = await prisma.jobProgress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobProgressFindUniqueArgs>(args: SelectSubset<T, JobProgressFindUniqueArgs<ExtArgs>>): Prisma__JobProgressClient<$Result.GetResult<Prisma.$JobProgressPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one JobProgress that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JobProgressFindUniqueOrThrowArgs} args - Arguments to find a JobProgress
     * @example
     * // Get one JobProgress
     * const jobProgress = await prisma.jobProgress.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobProgressFindUniqueOrThrowArgs>(args: SelectSubset<T, JobProgressFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobProgressClient<$Result.GetResult<Prisma.$JobProgressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobProgress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobProgressFindFirstArgs} args - Arguments to find a JobProgress
     * @example
     * // Get one JobProgress
     * const jobProgress = await prisma.jobProgress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobProgressFindFirstArgs>(args?: SelectSubset<T, JobProgressFindFirstArgs<ExtArgs>>): Prisma__JobProgressClient<$Result.GetResult<Prisma.$JobProgressPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobProgress that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobProgressFindFirstOrThrowArgs} args - Arguments to find a JobProgress
     * @example
     * // Get one JobProgress
     * const jobProgress = await prisma.jobProgress.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobProgressFindFirstOrThrowArgs>(args?: SelectSubset<T, JobProgressFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobProgressClient<$Result.GetResult<Prisma.$JobProgressPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more JobProgresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobProgressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JobProgresses
     * const jobProgresses = await prisma.jobProgress.findMany()
     * 
     * // Get first 10 JobProgresses
     * const jobProgresses = await prisma.jobProgress.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobProgressWithIdOnly = await prisma.jobProgress.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobProgressFindManyArgs>(args?: SelectSubset<T, JobProgressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobProgressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a JobProgress.
     * @param {JobProgressCreateArgs} args - Arguments to create a JobProgress.
     * @example
     * // Create one JobProgress
     * const JobProgress = await prisma.jobProgress.create({
     *   data: {
     *     // ... data to create a JobProgress
     *   }
     * })
     * 
     */
    create<T extends JobProgressCreateArgs>(args: SelectSubset<T, JobProgressCreateArgs<ExtArgs>>): Prisma__JobProgressClient<$Result.GetResult<Prisma.$JobProgressPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many JobProgresses.
     * @param {JobProgressCreateManyArgs} args - Arguments to create many JobProgresses.
     * @example
     * // Create many JobProgresses
     * const jobProgress = await prisma.jobProgress.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobProgressCreateManyArgs>(args?: SelectSubset<T, JobProgressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JobProgresses and returns the data saved in the database.
     * @param {JobProgressCreateManyAndReturnArgs} args - Arguments to create many JobProgresses.
     * @example
     * // Create many JobProgresses
     * const jobProgress = await prisma.jobProgress.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JobProgresses and only return the `id`
     * const jobProgressWithIdOnly = await prisma.jobProgress.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JobProgressCreateManyAndReturnArgs>(args?: SelectSubset<T, JobProgressCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobProgressPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a JobProgress.
     * @param {JobProgressDeleteArgs} args - Arguments to delete one JobProgress.
     * @example
     * // Delete one JobProgress
     * const JobProgress = await prisma.jobProgress.delete({
     *   where: {
     *     // ... filter to delete one JobProgress
     *   }
     * })
     * 
     */
    delete<T extends JobProgressDeleteArgs>(args: SelectSubset<T, JobProgressDeleteArgs<ExtArgs>>): Prisma__JobProgressClient<$Result.GetResult<Prisma.$JobProgressPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one JobProgress.
     * @param {JobProgressUpdateArgs} args - Arguments to update one JobProgress.
     * @example
     * // Update one JobProgress
     * const jobProgress = await prisma.jobProgress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobProgressUpdateArgs>(args: SelectSubset<T, JobProgressUpdateArgs<ExtArgs>>): Prisma__JobProgressClient<$Result.GetResult<Prisma.$JobProgressPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more JobProgresses.
     * @param {JobProgressDeleteManyArgs} args - Arguments to filter JobProgresses to delete.
     * @example
     * // Delete a few JobProgresses
     * const { count } = await prisma.jobProgress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobProgressDeleteManyArgs>(args?: SelectSubset<T, JobProgressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobProgresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobProgressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JobProgresses
     * const jobProgress = await prisma.jobProgress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobProgressUpdateManyArgs>(args: SelectSubset<T, JobProgressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobProgresses and returns the data updated in the database.
     * @param {JobProgressUpdateManyAndReturnArgs} args - Arguments to update many JobProgresses.
     * @example
     * // Update many JobProgresses
     * const jobProgress = await prisma.jobProgress.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more JobProgresses and only return the `id`
     * const jobProgressWithIdOnly = await prisma.jobProgress.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JobProgressUpdateManyAndReturnArgs>(args: SelectSubset<T, JobProgressUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobProgressPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one JobProgress.
     * @param {JobProgressUpsertArgs} args - Arguments to update or create a JobProgress.
     * @example
     * // Update or create a JobProgress
     * const jobProgress = await prisma.jobProgress.upsert({
     *   create: {
     *     // ... data to create a JobProgress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JobProgress we want to update
     *   }
     * })
     */
    upsert<T extends JobProgressUpsertArgs>(args: SelectSubset<T, JobProgressUpsertArgs<ExtArgs>>): Prisma__JobProgressClient<$Result.GetResult<Prisma.$JobProgressPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of JobProgresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobProgressCountArgs} args - Arguments to filter JobProgresses to count.
     * @example
     * // Count the number of JobProgresses
     * const count = await prisma.jobProgress.count({
     *   where: {
     *     // ... the filter for the JobProgresses we want to count
     *   }
     * })
    **/
    count<T extends JobProgressCountArgs>(
      args?: Subset<T, JobProgressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobProgressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JobProgress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobProgressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobProgressAggregateArgs>(args: Subset<T, JobProgressAggregateArgs>): Prisma.PrismaPromise<GetJobProgressAggregateType<T>>

    /**
     * Group by JobProgress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobProgressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobProgressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobProgressGroupByArgs['orderBy'] }
        : { orderBy?: JobProgressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobProgressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobProgressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JobProgress model
   */
  readonly fields: JobProgressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JobProgress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobProgressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    kittingJob<T extends KittingJobDefaultArgs<ExtArgs> = {}>(args?: Subset<T, KittingJobDefaultArgs<ExtArgs>>): Prisma__KittingJobClient<$Result.GetResult<Prisma.$KittingJobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    workCenter<T extends JobProgress$workCenterArgs<ExtArgs> = {}>(args?: Subset<T, JobProgress$workCenterArgs<ExtArgs>>): Prisma__WorkCenterClient<$Result.GetResult<Prisma.$WorkCenterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    kitExecutions<T extends JobProgress$kitExecutionsArgs<ExtArgs> = {}>(args?: Subset<T, JobProgress$kitExecutionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KitExecutionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JobProgress model
   */
  interface JobProgressFieldRefs {
    readonly id: FieldRef<"JobProgress", 'String'>
    readonly jobId: FieldRef<"JobProgress", 'String'>
    readonly startTime: FieldRef<"JobProgress", 'DateTime'>
    readonly endTime: FieldRef<"JobProgress", 'DateTime'>
    readonly actualJobDuration: FieldRef<"JobProgress", 'Int'>
    readonly completedKits: FieldRef<"JobProgress", 'Int'>
    readonly remainingKits: FieldRef<"JobProgress", 'Int'>
    readonly currentKitNumber: FieldRef<"JobProgress", 'Int'>
    readonly isActive: FieldRef<"JobProgress", 'Boolean'>
    readonly pausedTime: FieldRef<"JobProgress", 'Int'>
    readonly workCenterId: FieldRef<"JobProgress", 'String'>
    readonly assignedWorker: FieldRef<"JobProgress", 'String'>
    readonly createdAt: FieldRef<"JobProgress", 'DateTime'>
    readonly updatedAt: FieldRef<"JobProgress", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * JobProgress findUnique
   */
  export type JobProgressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobProgress
     */
    select?: JobProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobProgress
     */
    omit?: JobProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobProgressInclude<ExtArgs> | null
    /**
     * Filter, which JobProgress to fetch.
     */
    where: JobProgressWhereUniqueInput
  }

  /**
   * JobProgress findUniqueOrThrow
   */
  export type JobProgressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobProgress
     */
    select?: JobProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobProgress
     */
    omit?: JobProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobProgressInclude<ExtArgs> | null
    /**
     * Filter, which JobProgress to fetch.
     */
    where: JobProgressWhereUniqueInput
  }

  /**
   * JobProgress findFirst
   */
  export type JobProgressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobProgress
     */
    select?: JobProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobProgress
     */
    omit?: JobProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobProgressInclude<ExtArgs> | null
    /**
     * Filter, which JobProgress to fetch.
     */
    where?: JobProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobProgresses to fetch.
     */
    orderBy?: JobProgressOrderByWithRelationInput | JobProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobProgresses.
     */
    cursor?: JobProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobProgresses.
     */
    distinct?: JobProgressScalarFieldEnum | JobProgressScalarFieldEnum[]
  }

  /**
   * JobProgress findFirstOrThrow
   */
  export type JobProgressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobProgress
     */
    select?: JobProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobProgress
     */
    omit?: JobProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobProgressInclude<ExtArgs> | null
    /**
     * Filter, which JobProgress to fetch.
     */
    where?: JobProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobProgresses to fetch.
     */
    orderBy?: JobProgressOrderByWithRelationInput | JobProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobProgresses.
     */
    cursor?: JobProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobProgresses.
     */
    distinct?: JobProgressScalarFieldEnum | JobProgressScalarFieldEnum[]
  }

  /**
   * JobProgress findMany
   */
  export type JobProgressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobProgress
     */
    select?: JobProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobProgress
     */
    omit?: JobProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobProgressInclude<ExtArgs> | null
    /**
     * Filter, which JobProgresses to fetch.
     */
    where?: JobProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobProgresses to fetch.
     */
    orderBy?: JobProgressOrderByWithRelationInput | JobProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JobProgresses.
     */
    cursor?: JobProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobProgresses.
     */
    skip?: number
    distinct?: JobProgressScalarFieldEnum | JobProgressScalarFieldEnum[]
  }

  /**
   * JobProgress create
   */
  export type JobProgressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobProgress
     */
    select?: JobProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobProgress
     */
    omit?: JobProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobProgressInclude<ExtArgs> | null
    /**
     * The data needed to create a JobProgress.
     */
    data: XOR<JobProgressCreateInput, JobProgressUncheckedCreateInput>
  }

  /**
   * JobProgress createMany
   */
  export type JobProgressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JobProgresses.
     */
    data: JobProgressCreateManyInput | JobProgressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JobProgress createManyAndReturn
   */
  export type JobProgressCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobProgress
     */
    select?: JobProgressSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JobProgress
     */
    omit?: JobProgressOmit<ExtArgs> | null
    /**
     * The data used to create many JobProgresses.
     */
    data: JobProgressCreateManyInput | JobProgressCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobProgressIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobProgress update
   */
  export type JobProgressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobProgress
     */
    select?: JobProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobProgress
     */
    omit?: JobProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobProgressInclude<ExtArgs> | null
    /**
     * The data needed to update a JobProgress.
     */
    data: XOR<JobProgressUpdateInput, JobProgressUncheckedUpdateInput>
    /**
     * Choose, which JobProgress to update.
     */
    where: JobProgressWhereUniqueInput
  }

  /**
   * JobProgress updateMany
   */
  export type JobProgressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JobProgresses.
     */
    data: XOR<JobProgressUpdateManyMutationInput, JobProgressUncheckedUpdateManyInput>
    /**
     * Filter which JobProgresses to update
     */
    where?: JobProgressWhereInput
    /**
     * Limit how many JobProgresses to update.
     */
    limit?: number
  }

  /**
   * JobProgress updateManyAndReturn
   */
  export type JobProgressUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobProgress
     */
    select?: JobProgressSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JobProgress
     */
    omit?: JobProgressOmit<ExtArgs> | null
    /**
     * The data used to update JobProgresses.
     */
    data: XOR<JobProgressUpdateManyMutationInput, JobProgressUncheckedUpdateManyInput>
    /**
     * Filter which JobProgresses to update
     */
    where?: JobProgressWhereInput
    /**
     * Limit how many JobProgresses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobProgressIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobProgress upsert
   */
  export type JobProgressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobProgress
     */
    select?: JobProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobProgress
     */
    omit?: JobProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobProgressInclude<ExtArgs> | null
    /**
     * The filter to search for the JobProgress to update in case it exists.
     */
    where: JobProgressWhereUniqueInput
    /**
     * In case the JobProgress found by the `where` argument doesn't exist, create a new JobProgress with this data.
     */
    create: XOR<JobProgressCreateInput, JobProgressUncheckedCreateInput>
    /**
     * In case the JobProgress was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobProgressUpdateInput, JobProgressUncheckedUpdateInput>
  }

  /**
   * JobProgress delete
   */
  export type JobProgressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobProgress
     */
    select?: JobProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobProgress
     */
    omit?: JobProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobProgressInclude<ExtArgs> | null
    /**
     * Filter which JobProgress to delete.
     */
    where: JobProgressWhereUniqueInput
  }

  /**
   * JobProgress deleteMany
   */
  export type JobProgressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobProgresses to delete
     */
    where?: JobProgressWhereInput
    /**
     * Limit how many JobProgresses to delete.
     */
    limit?: number
  }

  /**
   * JobProgress.workCenter
   */
  export type JobProgress$workCenterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkCenter
     */
    select?: WorkCenterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkCenter
     */
    omit?: WorkCenterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkCenterInclude<ExtArgs> | null
    where?: WorkCenterWhereInput
  }

  /**
   * JobProgress.kitExecutions
   */
  export type JobProgress$kitExecutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KitExecution
     */
    select?: KitExecutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KitExecution
     */
    omit?: KitExecutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KitExecutionInclude<ExtArgs> | null
    where?: KitExecutionWhereInput
    orderBy?: KitExecutionOrderByWithRelationInput | KitExecutionOrderByWithRelationInput[]
    cursor?: KitExecutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KitExecutionScalarFieldEnum | KitExecutionScalarFieldEnum[]
  }

  /**
   * JobProgress without action
   */
  export type JobProgressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobProgress
     */
    select?: JobProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobProgress
     */
    omit?: JobProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobProgressInclude<ExtArgs> | null
  }


  /**
   * Model KitExecution
   */

  export type AggregateKitExecution = {
    _count: KitExecutionCountAggregateOutputType | null
    _avg: KitExecutionAvgAggregateOutputType | null
    _sum: KitExecutionSumAggregateOutputType | null
    _min: KitExecutionMinAggregateOutputType | null
    _max: KitExecutionMaxAggregateOutputType | null
  }

  export type KitExecutionAvgAggregateOutputType = {
    kitNumber: number | null
    actualDuration: number | null
  }

  export type KitExecutionSumAggregateOutputType = {
    kitNumber: number | null
    actualDuration: number | null
  }

  export type KitExecutionMinAggregateOutputType = {
    id: string | null
    jobProgressId: string | null
    kitNumber: number | null
    startTime: Date | null
    endTime: Date | null
    actualDuration: number | null
    completed: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KitExecutionMaxAggregateOutputType = {
    id: string | null
    jobProgressId: string | null
    kitNumber: number | null
    startTime: Date | null
    endTime: Date | null
    actualDuration: number | null
    completed: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KitExecutionCountAggregateOutputType = {
    id: number
    jobProgressId: number
    kitNumber: number
    startTime: number
    endTime: number
    actualDuration: number
    completed: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type KitExecutionAvgAggregateInputType = {
    kitNumber?: true
    actualDuration?: true
  }

  export type KitExecutionSumAggregateInputType = {
    kitNumber?: true
    actualDuration?: true
  }

  export type KitExecutionMinAggregateInputType = {
    id?: true
    jobProgressId?: true
    kitNumber?: true
    startTime?: true
    endTime?: true
    actualDuration?: true
    completed?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KitExecutionMaxAggregateInputType = {
    id?: true
    jobProgressId?: true
    kitNumber?: true
    startTime?: true
    endTime?: true
    actualDuration?: true
    completed?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KitExecutionCountAggregateInputType = {
    id?: true
    jobProgressId?: true
    kitNumber?: true
    startTime?: true
    endTime?: true
    actualDuration?: true
    completed?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type KitExecutionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KitExecution to aggregate.
     */
    where?: KitExecutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KitExecutions to fetch.
     */
    orderBy?: KitExecutionOrderByWithRelationInput | KitExecutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KitExecutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KitExecutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KitExecutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KitExecutions
    **/
    _count?: true | KitExecutionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KitExecutionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KitExecutionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KitExecutionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KitExecutionMaxAggregateInputType
  }

  export type GetKitExecutionAggregateType<T extends KitExecutionAggregateArgs> = {
        [P in keyof T & keyof AggregateKitExecution]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKitExecution[P]>
      : GetScalarType<T[P], AggregateKitExecution[P]>
  }




  export type KitExecutionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KitExecutionWhereInput
    orderBy?: KitExecutionOrderByWithAggregationInput | KitExecutionOrderByWithAggregationInput[]
    by: KitExecutionScalarFieldEnum[] | KitExecutionScalarFieldEnum
    having?: KitExecutionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KitExecutionCountAggregateInputType | true
    _avg?: KitExecutionAvgAggregateInputType
    _sum?: KitExecutionSumAggregateInputType
    _min?: KitExecutionMinAggregateInputType
    _max?: KitExecutionMaxAggregateInputType
  }

  export type KitExecutionGroupByOutputType = {
    id: string
    jobProgressId: string
    kitNumber: number
    startTime: Date
    endTime: Date | null
    actualDuration: number | null
    completed: boolean
    createdAt: Date
    updatedAt: Date
    _count: KitExecutionCountAggregateOutputType | null
    _avg: KitExecutionAvgAggregateOutputType | null
    _sum: KitExecutionSumAggregateOutputType | null
    _min: KitExecutionMinAggregateOutputType | null
    _max: KitExecutionMaxAggregateOutputType | null
  }

  type GetKitExecutionGroupByPayload<T extends KitExecutionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KitExecutionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KitExecutionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KitExecutionGroupByOutputType[P]>
            : GetScalarType<T[P], KitExecutionGroupByOutputType[P]>
        }
      >
    >


  export type KitExecutionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobProgressId?: boolean
    kitNumber?: boolean
    startTime?: boolean
    endTime?: boolean
    actualDuration?: boolean
    completed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    jobProgress?: boolean | JobProgressDefaultArgs<ExtArgs>
    stepExecutions?: boolean | KitExecution$stepExecutionsArgs<ExtArgs>
    _count?: boolean | KitExecutionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kitExecution"]>

  export type KitExecutionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobProgressId?: boolean
    kitNumber?: boolean
    startTime?: boolean
    endTime?: boolean
    actualDuration?: boolean
    completed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    jobProgress?: boolean | JobProgressDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kitExecution"]>

  export type KitExecutionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobProgressId?: boolean
    kitNumber?: boolean
    startTime?: boolean
    endTime?: boolean
    actualDuration?: boolean
    completed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    jobProgress?: boolean | JobProgressDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kitExecution"]>

  export type KitExecutionSelectScalar = {
    id?: boolean
    jobProgressId?: boolean
    kitNumber?: boolean
    startTime?: boolean
    endTime?: boolean
    actualDuration?: boolean
    completed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type KitExecutionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "jobProgressId" | "kitNumber" | "startTime" | "endTime" | "actualDuration" | "completed" | "createdAt" | "updatedAt", ExtArgs["result"]["kitExecution"]>
  export type KitExecutionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobProgress?: boolean | JobProgressDefaultArgs<ExtArgs>
    stepExecutions?: boolean | KitExecution$stepExecutionsArgs<ExtArgs>
    _count?: boolean | KitExecutionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type KitExecutionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobProgress?: boolean | JobProgressDefaultArgs<ExtArgs>
  }
  export type KitExecutionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobProgress?: boolean | JobProgressDefaultArgs<ExtArgs>
  }

  export type $KitExecutionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "KitExecution"
    objects: {
      jobProgress: Prisma.$JobProgressPayload<ExtArgs>
      stepExecutions: Prisma.$StepExecutionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      jobProgressId: string
      kitNumber: number
      startTime: Date
      endTime: Date | null
      actualDuration: number | null
      completed: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["kitExecution"]>
    composites: {}
  }

  type KitExecutionGetPayload<S extends boolean | null | undefined | KitExecutionDefaultArgs> = $Result.GetResult<Prisma.$KitExecutionPayload, S>

  type KitExecutionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<KitExecutionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: KitExecutionCountAggregateInputType | true
    }

  export interface KitExecutionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KitExecution'], meta: { name: 'KitExecution' } }
    /**
     * Find zero or one KitExecution that matches the filter.
     * @param {KitExecutionFindUniqueArgs} args - Arguments to find a KitExecution
     * @example
     * // Get one KitExecution
     * const kitExecution = await prisma.kitExecution.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KitExecutionFindUniqueArgs>(args: SelectSubset<T, KitExecutionFindUniqueArgs<ExtArgs>>): Prisma__KitExecutionClient<$Result.GetResult<Prisma.$KitExecutionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one KitExecution that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {KitExecutionFindUniqueOrThrowArgs} args - Arguments to find a KitExecution
     * @example
     * // Get one KitExecution
     * const kitExecution = await prisma.kitExecution.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KitExecutionFindUniqueOrThrowArgs>(args: SelectSubset<T, KitExecutionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KitExecutionClient<$Result.GetResult<Prisma.$KitExecutionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KitExecution that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KitExecutionFindFirstArgs} args - Arguments to find a KitExecution
     * @example
     * // Get one KitExecution
     * const kitExecution = await prisma.kitExecution.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KitExecutionFindFirstArgs>(args?: SelectSubset<T, KitExecutionFindFirstArgs<ExtArgs>>): Prisma__KitExecutionClient<$Result.GetResult<Prisma.$KitExecutionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KitExecution that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KitExecutionFindFirstOrThrowArgs} args - Arguments to find a KitExecution
     * @example
     * // Get one KitExecution
     * const kitExecution = await prisma.kitExecution.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KitExecutionFindFirstOrThrowArgs>(args?: SelectSubset<T, KitExecutionFindFirstOrThrowArgs<ExtArgs>>): Prisma__KitExecutionClient<$Result.GetResult<Prisma.$KitExecutionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more KitExecutions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KitExecutionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KitExecutions
     * const kitExecutions = await prisma.kitExecution.findMany()
     * 
     * // Get first 10 KitExecutions
     * const kitExecutions = await prisma.kitExecution.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kitExecutionWithIdOnly = await prisma.kitExecution.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends KitExecutionFindManyArgs>(args?: SelectSubset<T, KitExecutionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KitExecutionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a KitExecution.
     * @param {KitExecutionCreateArgs} args - Arguments to create a KitExecution.
     * @example
     * // Create one KitExecution
     * const KitExecution = await prisma.kitExecution.create({
     *   data: {
     *     // ... data to create a KitExecution
     *   }
     * })
     * 
     */
    create<T extends KitExecutionCreateArgs>(args: SelectSubset<T, KitExecutionCreateArgs<ExtArgs>>): Prisma__KitExecutionClient<$Result.GetResult<Prisma.$KitExecutionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many KitExecutions.
     * @param {KitExecutionCreateManyArgs} args - Arguments to create many KitExecutions.
     * @example
     * // Create many KitExecutions
     * const kitExecution = await prisma.kitExecution.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KitExecutionCreateManyArgs>(args?: SelectSubset<T, KitExecutionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many KitExecutions and returns the data saved in the database.
     * @param {KitExecutionCreateManyAndReturnArgs} args - Arguments to create many KitExecutions.
     * @example
     * // Create many KitExecutions
     * const kitExecution = await prisma.kitExecution.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many KitExecutions and only return the `id`
     * const kitExecutionWithIdOnly = await prisma.kitExecution.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends KitExecutionCreateManyAndReturnArgs>(args?: SelectSubset<T, KitExecutionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KitExecutionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a KitExecution.
     * @param {KitExecutionDeleteArgs} args - Arguments to delete one KitExecution.
     * @example
     * // Delete one KitExecution
     * const KitExecution = await prisma.kitExecution.delete({
     *   where: {
     *     // ... filter to delete one KitExecution
     *   }
     * })
     * 
     */
    delete<T extends KitExecutionDeleteArgs>(args: SelectSubset<T, KitExecutionDeleteArgs<ExtArgs>>): Prisma__KitExecutionClient<$Result.GetResult<Prisma.$KitExecutionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one KitExecution.
     * @param {KitExecutionUpdateArgs} args - Arguments to update one KitExecution.
     * @example
     * // Update one KitExecution
     * const kitExecution = await prisma.kitExecution.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KitExecutionUpdateArgs>(args: SelectSubset<T, KitExecutionUpdateArgs<ExtArgs>>): Prisma__KitExecutionClient<$Result.GetResult<Prisma.$KitExecutionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more KitExecutions.
     * @param {KitExecutionDeleteManyArgs} args - Arguments to filter KitExecutions to delete.
     * @example
     * // Delete a few KitExecutions
     * const { count } = await prisma.kitExecution.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KitExecutionDeleteManyArgs>(args?: SelectSubset<T, KitExecutionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KitExecutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KitExecutionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KitExecutions
     * const kitExecution = await prisma.kitExecution.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KitExecutionUpdateManyArgs>(args: SelectSubset<T, KitExecutionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KitExecutions and returns the data updated in the database.
     * @param {KitExecutionUpdateManyAndReturnArgs} args - Arguments to update many KitExecutions.
     * @example
     * // Update many KitExecutions
     * const kitExecution = await prisma.kitExecution.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more KitExecutions and only return the `id`
     * const kitExecutionWithIdOnly = await prisma.kitExecution.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends KitExecutionUpdateManyAndReturnArgs>(args: SelectSubset<T, KitExecutionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KitExecutionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one KitExecution.
     * @param {KitExecutionUpsertArgs} args - Arguments to update or create a KitExecution.
     * @example
     * // Update or create a KitExecution
     * const kitExecution = await prisma.kitExecution.upsert({
     *   create: {
     *     // ... data to create a KitExecution
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KitExecution we want to update
     *   }
     * })
     */
    upsert<T extends KitExecutionUpsertArgs>(args: SelectSubset<T, KitExecutionUpsertArgs<ExtArgs>>): Prisma__KitExecutionClient<$Result.GetResult<Prisma.$KitExecutionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of KitExecutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KitExecutionCountArgs} args - Arguments to filter KitExecutions to count.
     * @example
     * // Count the number of KitExecutions
     * const count = await prisma.kitExecution.count({
     *   where: {
     *     // ... the filter for the KitExecutions we want to count
     *   }
     * })
    **/
    count<T extends KitExecutionCountArgs>(
      args?: Subset<T, KitExecutionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KitExecutionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KitExecution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KitExecutionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KitExecutionAggregateArgs>(args: Subset<T, KitExecutionAggregateArgs>): Prisma.PrismaPromise<GetKitExecutionAggregateType<T>>

    /**
     * Group by KitExecution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KitExecutionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KitExecutionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KitExecutionGroupByArgs['orderBy'] }
        : { orderBy?: KitExecutionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KitExecutionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKitExecutionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the KitExecution model
   */
  readonly fields: KitExecutionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for KitExecution.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KitExecutionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    jobProgress<T extends JobProgressDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobProgressDefaultArgs<ExtArgs>>): Prisma__JobProgressClient<$Result.GetResult<Prisma.$JobProgressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    stepExecutions<T extends KitExecution$stepExecutionsArgs<ExtArgs> = {}>(args?: Subset<T, KitExecution$stepExecutionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StepExecutionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the KitExecution model
   */
  interface KitExecutionFieldRefs {
    readonly id: FieldRef<"KitExecution", 'String'>
    readonly jobProgressId: FieldRef<"KitExecution", 'String'>
    readonly kitNumber: FieldRef<"KitExecution", 'Int'>
    readonly startTime: FieldRef<"KitExecution", 'DateTime'>
    readonly endTime: FieldRef<"KitExecution", 'DateTime'>
    readonly actualDuration: FieldRef<"KitExecution", 'Int'>
    readonly completed: FieldRef<"KitExecution", 'Boolean'>
    readonly createdAt: FieldRef<"KitExecution", 'DateTime'>
    readonly updatedAt: FieldRef<"KitExecution", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * KitExecution findUnique
   */
  export type KitExecutionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KitExecution
     */
    select?: KitExecutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KitExecution
     */
    omit?: KitExecutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KitExecutionInclude<ExtArgs> | null
    /**
     * Filter, which KitExecution to fetch.
     */
    where: KitExecutionWhereUniqueInput
  }

  /**
   * KitExecution findUniqueOrThrow
   */
  export type KitExecutionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KitExecution
     */
    select?: KitExecutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KitExecution
     */
    omit?: KitExecutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KitExecutionInclude<ExtArgs> | null
    /**
     * Filter, which KitExecution to fetch.
     */
    where: KitExecutionWhereUniqueInput
  }

  /**
   * KitExecution findFirst
   */
  export type KitExecutionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KitExecution
     */
    select?: KitExecutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KitExecution
     */
    omit?: KitExecutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KitExecutionInclude<ExtArgs> | null
    /**
     * Filter, which KitExecution to fetch.
     */
    where?: KitExecutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KitExecutions to fetch.
     */
    orderBy?: KitExecutionOrderByWithRelationInput | KitExecutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KitExecutions.
     */
    cursor?: KitExecutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KitExecutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KitExecutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KitExecutions.
     */
    distinct?: KitExecutionScalarFieldEnum | KitExecutionScalarFieldEnum[]
  }

  /**
   * KitExecution findFirstOrThrow
   */
  export type KitExecutionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KitExecution
     */
    select?: KitExecutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KitExecution
     */
    omit?: KitExecutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KitExecutionInclude<ExtArgs> | null
    /**
     * Filter, which KitExecution to fetch.
     */
    where?: KitExecutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KitExecutions to fetch.
     */
    orderBy?: KitExecutionOrderByWithRelationInput | KitExecutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KitExecutions.
     */
    cursor?: KitExecutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KitExecutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KitExecutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KitExecutions.
     */
    distinct?: KitExecutionScalarFieldEnum | KitExecutionScalarFieldEnum[]
  }

  /**
   * KitExecution findMany
   */
  export type KitExecutionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KitExecution
     */
    select?: KitExecutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KitExecution
     */
    omit?: KitExecutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KitExecutionInclude<ExtArgs> | null
    /**
     * Filter, which KitExecutions to fetch.
     */
    where?: KitExecutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KitExecutions to fetch.
     */
    orderBy?: KitExecutionOrderByWithRelationInput | KitExecutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KitExecutions.
     */
    cursor?: KitExecutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KitExecutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KitExecutions.
     */
    skip?: number
    distinct?: KitExecutionScalarFieldEnum | KitExecutionScalarFieldEnum[]
  }

  /**
   * KitExecution create
   */
  export type KitExecutionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KitExecution
     */
    select?: KitExecutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KitExecution
     */
    omit?: KitExecutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KitExecutionInclude<ExtArgs> | null
    /**
     * The data needed to create a KitExecution.
     */
    data: XOR<KitExecutionCreateInput, KitExecutionUncheckedCreateInput>
  }

  /**
   * KitExecution createMany
   */
  export type KitExecutionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many KitExecutions.
     */
    data: KitExecutionCreateManyInput | KitExecutionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KitExecution createManyAndReturn
   */
  export type KitExecutionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KitExecution
     */
    select?: KitExecutionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the KitExecution
     */
    omit?: KitExecutionOmit<ExtArgs> | null
    /**
     * The data used to create many KitExecutions.
     */
    data: KitExecutionCreateManyInput | KitExecutionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KitExecutionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * KitExecution update
   */
  export type KitExecutionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KitExecution
     */
    select?: KitExecutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KitExecution
     */
    omit?: KitExecutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KitExecutionInclude<ExtArgs> | null
    /**
     * The data needed to update a KitExecution.
     */
    data: XOR<KitExecutionUpdateInput, KitExecutionUncheckedUpdateInput>
    /**
     * Choose, which KitExecution to update.
     */
    where: KitExecutionWhereUniqueInput
  }

  /**
   * KitExecution updateMany
   */
  export type KitExecutionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update KitExecutions.
     */
    data: XOR<KitExecutionUpdateManyMutationInput, KitExecutionUncheckedUpdateManyInput>
    /**
     * Filter which KitExecutions to update
     */
    where?: KitExecutionWhereInput
    /**
     * Limit how many KitExecutions to update.
     */
    limit?: number
  }

  /**
   * KitExecution updateManyAndReturn
   */
  export type KitExecutionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KitExecution
     */
    select?: KitExecutionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the KitExecution
     */
    omit?: KitExecutionOmit<ExtArgs> | null
    /**
     * The data used to update KitExecutions.
     */
    data: XOR<KitExecutionUpdateManyMutationInput, KitExecutionUncheckedUpdateManyInput>
    /**
     * Filter which KitExecutions to update
     */
    where?: KitExecutionWhereInput
    /**
     * Limit how many KitExecutions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KitExecutionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * KitExecution upsert
   */
  export type KitExecutionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KitExecution
     */
    select?: KitExecutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KitExecution
     */
    omit?: KitExecutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KitExecutionInclude<ExtArgs> | null
    /**
     * The filter to search for the KitExecution to update in case it exists.
     */
    where: KitExecutionWhereUniqueInput
    /**
     * In case the KitExecution found by the `where` argument doesn't exist, create a new KitExecution with this data.
     */
    create: XOR<KitExecutionCreateInput, KitExecutionUncheckedCreateInput>
    /**
     * In case the KitExecution was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KitExecutionUpdateInput, KitExecutionUncheckedUpdateInput>
  }

  /**
   * KitExecution delete
   */
  export type KitExecutionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KitExecution
     */
    select?: KitExecutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KitExecution
     */
    omit?: KitExecutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KitExecutionInclude<ExtArgs> | null
    /**
     * Filter which KitExecution to delete.
     */
    where: KitExecutionWhereUniqueInput
  }

  /**
   * KitExecution deleteMany
   */
  export type KitExecutionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KitExecutions to delete
     */
    where?: KitExecutionWhereInput
    /**
     * Limit how many KitExecutions to delete.
     */
    limit?: number
  }

  /**
   * KitExecution.stepExecutions
   */
  export type KitExecution$stepExecutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepExecution
     */
    select?: StepExecutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StepExecution
     */
    omit?: StepExecutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepExecutionInclude<ExtArgs> | null
    where?: StepExecutionWhereInput
    orderBy?: StepExecutionOrderByWithRelationInput | StepExecutionOrderByWithRelationInput[]
    cursor?: StepExecutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StepExecutionScalarFieldEnum | StepExecutionScalarFieldEnum[]
  }

  /**
   * KitExecution without action
   */
  export type KitExecutionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KitExecution
     */
    select?: KitExecutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KitExecution
     */
    omit?: KitExecutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KitExecutionInclude<ExtArgs> | null
  }


  /**
   * Model StepExecution
   */

  export type AggregateStepExecution = {
    _count: StepExecutionCountAggregateOutputType | null
    _avg: StepExecutionAvgAggregateOutputType | null
    _sum: StepExecutionSumAggregateOutputType | null
    _min: StepExecutionMinAggregateOutputType | null
    _max: StepExecutionMaxAggregateOutputType | null
  }

  export type StepExecutionAvgAggregateOutputType = {
    actualDuration: number | null
  }

  export type StepExecutionSumAggregateOutputType = {
    actualDuration: number | null
  }

  export type StepExecutionMinAggregateOutputType = {
    id: string | null
    kitExecutionId: string | null
    routeStepId: string | null
    startTime: Date | null
    endTime: Date | null
    actualDuration: number | null
    completed: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StepExecutionMaxAggregateOutputType = {
    id: string | null
    kitExecutionId: string | null
    routeStepId: string | null
    startTime: Date | null
    endTime: Date | null
    actualDuration: number | null
    completed: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StepExecutionCountAggregateOutputType = {
    id: number
    kitExecutionId: number
    routeStepId: number
    startTime: number
    endTime: number
    actualDuration: number
    completed: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StepExecutionAvgAggregateInputType = {
    actualDuration?: true
  }

  export type StepExecutionSumAggregateInputType = {
    actualDuration?: true
  }

  export type StepExecutionMinAggregateInputType = {
    id?: true
    kitExecutionId?: true
    routeStepId?: true
    startTime?: true
    endTime?: true
    actualDuration?: true
    completed?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StepExecutionMaxAggregateInputType = {
    id?: true
    kitExecutionId?: true
    routeStepId?: true
    startTime?: true
    endTime?: true
    actualDuration?: true
    completed?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StepExecutionCountAggregateInputType = {
    id?: true
    kitExecutionId?: true
    routeStepId?: true
    startTime?: true
    endTime?: true
    actualDuration?: true
    completed?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StepExecutionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StepExecution to aggregate.
     */
    where?: StepExecutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StepExecutions to fetch.
     */
    orderBy?: StepExecutionOrderByWithRelationInput | StepExecutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StepExecutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StepExecutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StepExecutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StepExecutions
    **/
    _count?: true | StepExecutionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StepExecutionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StepExecutionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StepExecutionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StepExecutionMaxAggregateInputType
  }

  export type GetStepExecutionAggregateType<T extends StepExecutionAggregateArgs> = {
        [P in keyof T & keyof AggregateStepExecution]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStepExecution[P]>
      : GetScalarType<T[P], AggregateStepExecution[P]>
  }




  export type StepExecutionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StepExecutionWhereInput
    orderBy?: StepExecutionOrderByWithAggregationInput | StepExecutionOrderByWithAggregationInput[]
    by: StepExecutionScalarFieldEnum[] | StepExecutionScalarFieldEnum
    having?: StepExecutionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StepExecutionCountAggregateInputType | true
    _avg?: StepExecutionAvgAggregateInputType
    _sum?: StepExecutionSumAggregateInputType
    _min?: StepExecutionMinAggregateInputType
    _max?: StepExecutionMaxAggregateInputType
  }

  export type StepExecutionGroupByOutputType = {
    id: string
    kitExecutionId: string
    routeStepId: string
    startTime: Date
    endTime: Date | null
    actualDuration: number | null
    completed: boolean
    createdAt: Date
    updatedAt: Date
    _count: StepExecutionCountAggregateOutputType | null
    _avg: StepExecutionAvgAggregateOutputType | null
    _sum: StepExecutionSumAggregateOutputType | null
    _min: StepExecutionMinAggregateOutputType | null
    _max: StepExecutionMaxAggregateOutputType | null
  }

  type GetStepExecutionGroupByPayload<T extends StepExecutionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StepExecutionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StepExecutionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StepExecutionGroupByOutputType[P]>
            : GetScalarType<T[P], StepExecutionGroupByOutputType[P]>
        }
      >
    >


  export type StepExecutionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    kitExecutionId?: boolean
    routeStepId?: boolean
    startTime?: boolean
    endTime?: boolean
    actualDuration?: boolean
    completed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    kitExecution?: boolean | KitExecutionDefaultArgs<ExtArgs>
    routeStep?: boolean | RouteStepDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stepExecution"]>

  export type StepExecutionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    kitExecutionId?: boolean
    routeStepId?: boolean
    startTime?: boolean
    endTime?: boolean
    actualDuration?: boolean
    completed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    kitExecution?: boolean | KitExecutionDefaultArgs<ExtArgs>
    routeStep?: boolean | RouteStepDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stepExecution"]>

  export type StepExecutionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    kitExecutionId?: boolean
    routeStepId?: boolean
    startTime?: boolean
    endTime?: boolean
    actualDuration?: boolean
    completed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    kitExecution?: boolean | KitExecutionDefaultArgs<ExtArgs>
    routeStep?: boolean | RouteStepDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stepExecution"]>

  export type StepExecutionSelectScalar = {
    id?: boolean
    kitExecutionId?: boolean
    routeStepId?: boolean
    startTime?: boolean
    endTime?: boolean
    actualDuration?: boolean
    completed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StepExecutionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "kitExecutionId" | "routeStepId" | "startTime" | "endTime" | "actualDuration" | "completed" | "createdAt" | "updatedAt", ExtArgs["result"]["stepExecution"]>
  export type StepExecutionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kitExecution?: boolean | KitExecutionDefaultArgs<ExtArgs>
    routeStep?: boolean | RouteStepDefaultArgs<ExtArgs>
  }
  export type StepExecutionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kitExecution?: boolean | KitExecutionDefaultArgs<ExtArgs>
    routeStep?: boolean | RouteStepDefaultArgs<ExtArgs>
  }
  export type StepExecutionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kitExecution?: boolean | KitExecutionDefaultArgs<ExtArgs>
    routeStep?: boolean | RouteStepDefaultArgs<ExtArgs>
  }

  export type $StepExecutionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StepExecution"
    objects: {
      kitExecution: Prisma.$KitExecutionPayload<ExtArgs>
      routeStep: Prisma.$RouteStepPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      kitExecutionId: string
      routeStepId: string
      startTime: Date
      endTime: Date | null
      actualDuration: number | null
      completed: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["stepExecution"]>
    composites: {}
  }

  type StepExecutionGetPayload<S extends boolean | null | undefined | StepExecutionDefaultArgs> = $Result.GetResult<Prisma.$StepExecutionPayload, S>

  type StepExecutionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StepExecutionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StepExecutionCountAggregateInputType | true
    }

  export interface StepExecutionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StepExecution'], meta: { name: 'StepExecution' } }
    /**
     * Find zero or one StepExecution that matches the filter.
     * @param {StepExecutionFindUniqueArgs} args - Arguments to find a StepExecution
     * @example
     * // Get one StepExecution
     * const stepExecution = await prisma.stepExecution.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StepExecutionFindUniqueArgs>(args: SelectSubset<T, StepExecutionFindUniqueArgs<ExtArgs>>): Prisma__StepExecutionClient<$Result.GetResult<Prisma.$StepExecutionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StepExecution that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StepExecutionFindUniqueOrThrowArgs} args - Arguments to find a StepExecution
     * @example
     * // Get one StepExecution
     * const stepExecution = await prisma.stepExecution.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StepExecutionFindUniqueOrThrowArgs>(args: SelectSubset<T, StepExecutionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StepExecutionClient<$Result.GetResult<Prisma.$StepExecutionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StepExecution that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StepExecutionFindFirstArgs} args - Arguments to find a StepExecution
     * @example
     * // Get one StepExecution
     * const stepExecution = await prisma.stepExecution.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StepExecutionFindFirstArgs>(args?: SelectSubset<T, StepExecutionFindFirstArgs<ExtArgs>>): Prisma__StepExecutionClient<$Result.GetResult<Prisma.$StepExecutionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StepExecution that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StepExecutionFindFirstOrThrowArgs} args - Arguments to find a StepExecution
     * @example
     * // Get one StepExecution
     * const stepExecution = await prisma.stepExecution.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StepExecutionFindFirstOrThrowArgs>(args?: SelectSubset<T, StepExecutionFindFirstOrThrowArgs<ExtArgs>>): Prisma__StepExecutionClient<$Result.GetResult<Prisma.$StepExecutionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StepExecutions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StepExecutionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StepExecutions
     * const stepExecutions = await prisma.stepExecution.findMany()
     * 
     * // Get first 10 StepExecutions
     * const stepExecutions = await prisma.stepExecution.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stepExecutionWithIdOnly = await prisma.stepExecution.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StepExecutionFindManyArgs>(args?: SelectSubset<T, StepExecutionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StepExecutionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StepExecution.
     * @param {StepExecutionCreateArgs} args - Arguments to create a StepExecution.
     * @example
     * // Create one StepExecution
     * const StepExecution = await prisma.stepExecution.create({
     *   data: {
     *     // ... data to create a StepExecution
     *   }
     * })
     * 
     */
    create<T extends StepExecutionCreateArgs>(args: SelectSubset<T, StepExecutionCreateArgs<ExtArgs>>): Prisma__StepExecutionClient<$Result.GetResult<Prisma.$StepExecutionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StepExecutions.
     * @param {StepExecutionCreateManyArgs} args - Arguments to create many StepExecutions.
     * @example
     * // Create many StepExecutions
     * const stepExecution = await prisma.stepExecution.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StepExecutionCreateManyArgs>(args?: SelectSubset<T, StepExecutionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StepExecutions and returns the data saved in the database.
     * @param {StepExecutionCreateManyAndReturnArgs} args - Arguments to create many StepExecutions.
     * @example
     * // Create many StepExecutions
     * const stepExecution = await prisma.stepExecution.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StepExecutions and only return the `id`
     * const stepExecutionWithIdOnly = await prisma.stepExecution.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StepExecutionCreateManyAndReturnArgs>(args?: SelectSubset<T, StepExecutionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StepExecutionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StepExecution.
     * @param {StepExecutionDeleteArgs} args - Arguments to delete one StepExecution.
     * @example
     * // Delete one StepExecution
     * const StepExecution = await prisma.stepExecution.delete({
     *   where: {
     *     // ... filter to delete one StepExecution
     *   }
     * })
     * 
     */
    delete<T extends StepExecutionDeleteArgs>(args: SelectSubset<T, StepExecutionDeleteArgs<ExtArgs>>): Prisma__StepExecutionClient<$Result.GetResult<Prisma.$StepExecutionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StepExecution.
     * @param {StepExecutionUpdateArgs} args - Arguments to update one StepExecution.
     * @example
     * // Update one StepExecution
     * const stepExecution = await prisma.stepExecution.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StepExecutionUpdateArgs>(args: SelectSubset<T, StepExecutionUpdateArgs<ExtArgs>>): Prisma__StepExecutionClient<$Result.GetResult<Prisma.$StepExecutionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StepExecutions.
     * @param {StepExecutionDeleteManyArgs} args - Arguments to filter StepExecutions to delete.
     * @example
     * // Delete a few StepExecutions
     * const { count } = await prisma.stepExecution.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StepExecutionDeleteManyArgs>(args?: SelectSubset<T, StepExecutionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StepExecutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StepExecutionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StepExecutions
     * const stepExecution = await prisma.stepExecution.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StepExecutionUpdateManyArgs>(args: SelectSubset<T, StepExecutionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StepExecutions and returns the data updated in the database.
     * @param {StepExecutionUpdateManyAndReturnArgs} args - Arguments to update many StepExecutions.
     * @example
     * // Update many StepExecutions
     * const stepExecution = await prisma.stepExecution.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StepExecutions and only return the `id`
     * const stepExecutionWithIdOnly = await prisma.stepExecution.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StepExecutionUpdateManyAndReturnArgs>(args: SelectSubset<T, StepExecutionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StepExecutionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StepExecution.
     * @param {StepExecutionUpsertArgs} args - Arguments to update or create a StepExecution.
     * @example
     * // Update or create a StepExecution
     * const stepExecution = await prisma.stepExecution.upsert({
     *   create: {
     *     // ... data to create a StepExecution
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StepExecution we want to update
     *   }
     * })
     */
    upsert<T extends StepExecutionUpsertArgs>(args: SelectSubset<T, StepExecutionUpsertArgs<ExtArgs>>): Prisma__StepExecutionClient<$Result.GetResult<Prisma.$StepExecutionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StepExecutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StepExecutionCountArgs} args - Arguments to filter StepExecutions to count.
     * @example
     * // Count the number of StepExecutions
     * const count = await prisma.stepExecution.count({
     *   where: {
     *     // ... the filter for the StepExecutions we want to count
     *   }
     * })
    **/
    count<T extends StepExecutionCountArgs>(
      args?: Subset<T, StepExecutionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StepExecutionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StepExecution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StepExecutionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StepExecutionAggregateArgs>(args: Subset<T, StepExecutionAggregateArgs>): Prisma.PrismaPromise<GetStepExecutionAggregateType<T>>

    /**
     * Group by StepExecution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StepExecutionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StepExecutionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StepExecutionGroupByArgs['orderBy'] }
        : { orderBy?: StepExecutionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StepExecutionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStepExecutionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StepExecution model
   */
  readonly fields: StepExecutionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StepExecution.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StepExecutionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    kitExecution<T extends KitExecutionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, KitExecutionDefaultArgs<ExtArgs>>): Prisma__KitExecutionClient<$Result.GetResult<Prisma.$KitExecutionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    routeStep<T extends RouteStepDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RouteStepDefaultArgs<ExtArgs>>): Prisma__RouteStepClient<$Result.GetResult<Prisma.$RouteStepPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StepExecution model
   */
  interface StepExecutionFieldRefs {
    readonly id: FieldRef<"StepExecution", 'String'>
    readonly kitExecutionId: FieldRef<"StepExecution", 'String'>
    readonly routeStepId: FieldRef<"StepExecution", 'String'>
    readonly startTime: FieldRef<"StepExecution", 'DateTime'>
    readonly endTime: FieldRef<"StepExecution", 'DateTime'>
    readonly actualDuration: FieldRef<"StepExecution", 'Int'>
    readonly completed: FieldRef<"StepExecution", 'Boolean'>
    readonly createdAt: FieldRef<"StepExecution", 'DateTime'>
    readonly updatedAt: FieldRef<"StepExecution", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StepExecution findUnique
   */
  export type StepExecutionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepExecution
     */
    select?: StepExecutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StepExecution
     */
    omit?: StepExecutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepExecutionInclude<ExtArgs> | null
    /**
     * Filter, which StepExecution to fetch.
     */
    where: StepExecutionWhereUniqueInput
  }

  /**
   * StepExecution findUniqueOrThrow
   */
  export type StepExecutionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepExecution
     */
    select?: StepExecutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StepExecution
     */
    omit?: StepExecutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepExecutionInclude<ExtArgs> | null
    /**
     * Filter, which StepExecution to fetch.
     */
    where: StepExecutionWhereUniqueInput
  }

  /**
   * StepExecution findFirst
   */
  export type StepExecutionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepExecution
     */
    select?: StepExecutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StepExecution
     */
    omit?: StepExecutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepExecutionInclude<ExtArgs> | null
    /**
     * Filter, which StepExecution to fetch.
     */
    where?: StepExecutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StepExecutions to fetch.
     */
    orderBy?: StepExecutionOrderByWithRelationInput | StepExecutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StepExecutions.
     */
    cursor?: StepExecutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StepExecutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StepExecutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StepExecutions.
     */
    distinct?: StepExecutionScalarFieldEnum | StepExecutionScalarFieldEnum[]
  }

  /**
   * StepExecution findFirstOrThrow
   */
  export type StepExecutionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepExecution
     */
    select?: StepExecutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StepExecution
     */
    omit?: StepExecutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepExecutionInclude<ExtArgs> | null
    /**
     * Filter, which StepExecution to fetch.
     */
    where?: StepExecutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StepExecutions to fetch.
     */
    orderBy?: StepExecutionOrderByWithRelationInput | StepExecutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StepExecutions.
     */
    cursor?: StepExecutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StepExecutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StepExecutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StepExecutions.
     */
    distinct?: StepExecutionScalarFieldEnum | StepExecutionScalarFieldEnum[]
  }

  /**
   * StepExecution findMany
   */
  export type StepExecutionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepExecution
     */
    select?: StepExecutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StepExecution
     */
    omit?: StepExecutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepExecutionInclude<ExtArgs> | null
    /**
     * Filter, which StepExecutions to fetch.
     */
    where?: StepExecutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StepExecutions to fetch.
     */
    orderBy?: StepExecutionOrderByWithRelationInput | StepExecutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StepExecutions.
     */
    cursor?: StepExecutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StepExecutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StepExecutions.
     */
    skip?: number
    distinct?: StepExecutionScalarFieldEnum | StepExecutionScalarFieldEnum[]
  }

  /**
   * StepExecution create
   */
  export type StepExecutionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepExecution
     */
    select?: StepExecutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StepExecution
     */
    omit?: StepExecutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepExecutionInclude<ExtArgs> | null
    /**
     * The data needed to create a StepExecution.
     */
    data: XOR<StepExecutionCreateInput, StepExecutionUncheckedCreateInput>
  }

  /**
   * StepExecution createMany
   */
  export type StepExecutionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StepExecutions.
     */
    data: StepExecutionCreateManyInput | StepExecutionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StepExecution createManyAndReturn
   */
  export type StepExecutionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepExecution
     */
    select?: StepExecutionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StepExecution
     */
    omit?: StepExecutionOmit<ExtArgs> | null
    /**
     * The data used to create many StepExecutions.
     */
    data: StepExecutionCreateManyInput | StepExecutionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepExecutionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StepExecution update
   */
  export type StepExecutionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepExecution
     */
    select?: StepExecutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StepExecution
     */
    omit?: StepExecutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepExecutionInclude<ExtArgs> | null
    /**
     * The data needed to update a StepExecution.
     */
    data: XOR<StepExecutionUpdateInput, StepExecutionUncheckedUpdateInput>
    /**
     * Choose, which StepExecution to update.
     */
    where: StepExecutionWhereUniqueInput
  }

  /**
   * StepExecution updateMany
   */
  export type StepExecutionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StepExecutions.
     */
    data: XOR<StepExecutionUpdateManyMutationInput, StepExecutionUncheckedUpdateManyInput>
    /**
     * Filter which StepExecutions to update
     */
    where?: StepExecutionWhereInput
    /**
     * Limit how many StepExecutions to update.
     */
    limit?: number
  }

  /**
   * StepExecution updateManyAndReturn
   */
  export type StepExecutionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepExecution
     */
    select?: StepExecutionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StepExecution
     */
    omit?: StepExecutionOmit<ExtArgs> | null
    /**
     * The data used to update StepExecutions.
     */
    data: XOR<StepExecutionUpdateManyMutationInput, StepExecutionUncheckedUpdateManyInput>
    /**
     * Filter which StepExecutions to update
     */
    where?: StepExecutionWhereInput
    /**
     * Limit how many StepExecutions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepExecutionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StepExecution upsert
   */
  export type StepExecutionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepExecution
     */
    select?: StepExecutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StepExecution
     */
    omit?: StepExecutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepExecutionInclude<ExtArgs> | null
    /**
     * The filter to search for the StepExecution to update in case it exists.
     */
    where: StepExecutionWhereUniqueInput
    /**
     * In case the StepExecution found by the `where` argument doesn't exist, create a new StepExecution with this data.
     */
    create: XOR<StepExecutionCreateInput, StepExecutionUncheckedCreateInput>
    /**
     * In case the StepExecution was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StepExecutionUpdateInput, StepExecutionUncheckedUpdateInput>
  }

  /**
   * StepExecution delete
   */
  export type StepExecutionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepExecution
     */
    select?: StepExecutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StepExecution
     */
    omit?: StepExecutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepExecutionInclude<ExtArgs> | null
    /**
     * Filter which StepExecution to delete.
     */
    where: StepExecutionWhereUniqueInput
  }

  /**
   * StepExecution deleteMany
   */
  export type StepExecutionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StepExecutions to delete
     */
    where?: StepExecutionWhereInput
    /**
     * Limit how many StepExecutions to delete.
     */
    limit?: number
  }

  /**
   * StepExecution without action
   */
  export type StepExecutionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepExecution
     */
    select?: StepExecutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StepExecution
     */
    omit?: StepExecutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepExecutionInclude<ExtArgs> | null
  }


  /**
   * Model JobAnalytics
   */

  export type AggregateJobAnalytics = {
    _count: JobAnalyticsCountAggregateOutputType | null
    _avg: JobAnalyticsAvgAggregateOutputType | null
    _sum: JobAnalyticsSumAggregateOutputType | null
    _min: JobAnalyticsMinAggregateOutputType | null
    _max: JobAnalyticsMaxAggregateOutputType | null
  }

  export type JobAnalyticsAvgAggregateOutputType = {
    totalExpectedTime: number | null
    totalActualTime: number | null
    efficiencyPercent: number | null
    avgKitTime: number | null
    fastestKitTime: number | null
    slowestKitTime: number | null
    timeVariance: number | null
    consistencyScore: number | null
    qualityIssues: number | null
  }

  export type JobAnalyticsSumAggregateOutputType = {
    totalExpectedTime: number | null
    totalActualTime: number | null
    efficiencyPercent: number | null
    avgKitTime: number | null
    fastestKitTime: number | null
    slowestKitTime: number | null
    timeVariance: number | null
    consistencyScore: number | null
    qualityIssues: number | null
  }

  export type JobAnalyticsMinAggregateOutputType = {
    id: string | null
    jobId: string | null
    totalExpectedTime: number | null
    totalActualTime: number | null
    efficiencyPercent: number | null
    avgKitTime: number | null
    fastestKitTime: number | null
    slowestKitTime: number | null
    timeVariance: number | null
    consistencyScore: number | null
    onTimeCompletion: boolean | null
    qualityIssues: number | null
    lastCalculated: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JobAnalyticsMaxAggregateOutputType = {
    id: string | null
    jobId: string | null
    totalExpectedTime: number | null
    totalActualTime: number | null
    efficiencyPercent: number | null
    avgKitTime: number | null
    fastestKitTime: number | null
    slowestKitTime: number | null
    timeVariance: number | null
    consistencyScore: number | null
    onTimeCompletion: boolean | null
    qualityIssues: number | null
    lastCalculated: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JobAnalyticsCountAggregateOutputType = {
    id: number
    jobId: number
    totalExpectedTime: number
    totalActualTime: number
    efficiencyPercent: number
    avgKitTime: number
    fastestKitTime: number
    slowestKitTime: number
    stepAnalytics: number
    timeVariance: number
    consistencyScore: number
    onTimeCompletion: number
    qualityIssues: number
    lastCalculated: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type JobAnalyticsAvgAggregateInputType = {
    totalExpectedTime?: true
    totalActualTime?: true
    efficiencyPercent?: true
    avgKitTime?: true
    fastestKitTime?: true
    slowestKitTime?: true
    timeVariance?: true
    consistencyScore?: true
    qualityIssues?: true
  }

  export type JobAnalyticsSumAggregateInputType = {
    totalExpectedTime?: true
    totalActualTime?: true
    efficiencyPercent?: true
    avgKitTime?: true
    fastestKitTime?: true
    slowestKitTime?: true
    timeVariance?: true
    consistencyScore?: true
    qualityIssues?: true
  }

  export type JobAnalyticsMinAggregateInputType = {
    id?: true
    jobId?: true
    totalExpectedTime?: true
    totalActualTime?: true
    efficiencyPercent?: true
    avgKitTime?: true
    fastestKitTime?: true
    slowestKitTime?: true
    timeVariance?: true
    consistencyScore?: true
    onTimeCompletion?: true
    qualityIssues?: true
    lastCalculated?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JobAnalyticsMaxAggregateInputType = {
    id?: true
    jobId?: true
    totalExpectedTime?: true
    totalActualTime?: true
    efficiencyPercent?: true
    avgKitTime?: true
    fastestKitTime?: true
    slowestKitTime?: true
    timeVariance?: true
    consistencyScore?: true
    onTimeCompletion?: true
    qualityIssues?: true
    lastCalculated?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JobAnalyticsCountAggregateInputType = {
    id?: true
    jobId?: true
    totalExpectedTime?: true
    totalActualTime?: true
    efficiencyPercent?: true
    avgKitTime?: true
    fastestKitTime?: true
    slowestKitTime?: true
    stepAnalytics?: true
    timeVariance?: true
    consistencyScore?: true
    onTimeCompletion?: true
    qualityIssues?: true
    lastCalculated?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type JobAnalyticsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobAnalytics to aggregate.
     */
    where?: JobAnalyticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobAnalytics to fetch.
     */
    orderBy?: JobAnalyticsOrderByWithRelationInput | JobAnalyticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobAnalyticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobAnalytics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobAnalytics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JobAnalytics
    **/
    _count?: true | JobAnalyticsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobAnalyticsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobAnalyticsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobAnalyticsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobAnalyticsMaxAggregateInputType
  }

  export type GetJobAnalyticsAggregateType<T extends JobAnalyticsAggregateArgs> = {
        [P in keyof T & keyof AggregateJobAnalytics]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobAnalytics[P]>
      : GetScalarType<T[P], AggregateJobAnalytics[P]>
  }




  export type JobAnalyticsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobAnalyticsWhereInput
    orderBy?: JobAnalyticsOrderByWithAggregationInput | JobAnalyticsOrderByWithAggregationInput[]
    by: JobAnalyticsScalarFieldEnum[] | JobAnalyticsScalarFieldEnum
    having?: JobAnalyticsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobAnalyticsCountAggregateInputType | true
    _avg?: JobAnalyticsAvgAggregateInputType
    _sum?: JobAnalyticsSumAggregateInputType
    _min?: JobAnalyticsMinAggregateInputType
    _max?: JobAnalyticsMaxAggregateInputType
  }

  export type JobAnalyticsGroupByOutputType = {
    id: string
    jobId: string
    totalExpectedTime: number
    totalActualTime: number | null
    efficiencyPercent: number | null
    avgKitTime: number | null
    fastestKitTime: number | null
    slowestKitTime: number | null
    stepAnalytics: JsonValue | null
    timeVariance: number | null
    consistencyScore: number | null
    onTimeCompletion: boolean | null
    qualityIssues: number
    lastCalculated: Date
    createdAt: Date
    updatedAt: Date
    _count: JobAnalyticsCountAggregateOutputType | null
    _avg: JobAnalyticsAvgAggregateOutputType | null
    _sum: JobAnalyticsSumAggregateOutputType | null
    _min: JobAnalyticsMinAggregateOutputType | null
    _max: JobAnalyticsMaxAggregateOutputType | null
  }

  type GetJobAnalyticsGroupByPayload<T extends JobAnalyticsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobAnalyticsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobAnalyticsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobAnalyticsGroupByOutputType[P]>
            : GetScalarType<T[P], JobAnalyticsGroupByOutputType[P]>
        }
      >
    >


  export type JobAnalyticsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    totalExpectedTime?: boolean
    totalActualTime?: boolean
    efficiencyPercent?: boolean
    avgKitTime?: boolean
    fastestKitTime?: boolean
    slowestKitTime?: boolean
    stepAnalytics?: boolean
    timeVariance?: boolean
    consistencyScore?: boolean
    onTimeCompletion?: boolean
    qualityIssues?: boolean
    lastCalculated?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    kittingJob?: boolean | KittingJobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobAnalytics"]>

  export type JobAnalyticsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    totalExpectedTime?: boolean
    totalActualTime?: boolean
    efficiencyPercent?: boolean
    avgKitTime?: boolean
    fastestKitTime?: boolean
    slowestKitTime?: boolean
    stepAnalytics?: boolean
    timeVariance?: boolean
    consistencyScore?: boolean
    onTimeCompletion?: boolean
    qualityIssues?: boolean
    lastCalculated?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    kittingJob?: boolean | KittingJobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobAnalytics"]>

  export type JobAnalyticsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    totalExpectedTime?: boolean
    totalActualTime?: boolean
    efficiencyPercent?: boolean
    avgKitTime?: boolean
    fastestKitTime?: boolean
    slowestKitTime?: boolean
    stepAnalytics?: boolean
    timeVariance?: boolean
    consistencyScore?: boolean
    onTimeCompletion?: boolean
    qualityIssues?: boolean
    lastCalculated?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    kittingJob?: boolean | KittingJobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobAnalytics"]>

  export type JobAnalyticsSelectScalar = {
    id?: boolean
    jobId?: boolean
    totalExpectedTime?: boolean
    totalActualTime?: boolean
    efficiencyPercent?: boolean
    avgKitTime?: boolean
    fastestKitTime?: boolean
    slowestKitTime?: boolean
    stepAnalytics?: boolean
    timeVariance?: boolean
    consistencyScore?: boolean
    onTimeCompletion?: boolean
    qualityIssues?: boolean
    lastCalculated?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type JobAnalyticsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "jobId" | "totalExpectedTime" | "totalActualTime" | "efficiencyPercent" | "avgKitTime" | "fastestKitTime" | "slowestKitTime" | "stepAnalytics" | "timeVariance" | "consistencyScore" | "onTimeCompletion" | "qualityIssues" | "lastCalculated" | "createdAt" | "updatedAt", ExtArgs["result"]["jobAnalytics"]>
  export type JobAnalyticsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kittingJob?: boolean | KittingJobDefaultArgs<ExtArgs>
  }
  export type JobAnalyticsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kittingJob?: boolean | KittingJobDefaultArgs<ExtArgs>
  }
  export type JobAnalyticsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kittingJob?: boolean | KittingJobDefaultArgs<ExtArgs>
  }

  export type $JobAnalyticsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JobAnalytics"
    objects: {
      kittingJob: Prisma.$KittingJobPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      jobId: string
      totalExpectedTime: number
      totalActualTime: number | null
      efficiencyPercent: number | null
      avgKitTime: number | null
      fastestKitTime: number | null
      slowestKitTime: number | null
      stepAnalytics: Prisma.JsonValue | null
      timeVariance: number | null
      consistencyScore: number | null
      onTimeCompletion: boolean | null
      qualityIssues: number
      lastCalculated: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["jobAnalytics"]>
    composites: {}
  }

  type JobAnalyticsGetPayload<S extends boolean | null | undefined | JobAnalyticsDefaultArgs> = $Result.GetResult<Prisma.$JobAnalyticsPayload, S>

  type JobAnalyticsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JobAnalyticsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JobAnalyticsCountAggregateInputType | true
    }

  export interface JobAnalyticsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JobAnalytics'], meta: { name: 'JobAnalytics' } }
    /**
     * Find zero or one JobAnalytics that matches the filter.
     * @param {JobAnalyticsFindUniqueArgs} args - Arguments to find a JobAnalytics
     * @example
     * // Get one JobAnalytics
     * const jobAnalytics = await prisma.jobAnalytics.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobAnalyticsFindUniqueArgs>(args: SelectSubset<T, JobAnalyticsFindUniqueArgs<ExtArgs>>): Prisma__JobAnalyticsClient<$Result.GetResult<Prisma.$JobAnalyticsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one JobAnalytics that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JobAnalyticsFindUniqueOrThrowArgs} args - Arguments to find a JobAnalytics
     * @example
     * // Get one JobAnalytics
     * const jobAnalytics = await prisma.jobAnalytics.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobAnalyticsFindUniqueOrThrowArgs>(args: SelectSubset<T, JobAnalyticsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobAnalyticsClient<$Result.GetResult<Prisma.$JobAnalyticsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobAnalytics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobAnalyticsFindFirstArgs} args - Arguments to find a JobAnalytics
     * @example
     * // Get one JobAnalytics
     * const jobAnalytics = await prisma.jobAnalytics.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobAnalyticsFindFirstArgs>(args?: SelectSubset<T, JobAnalyticsFindFirstArgs<ExtArgs>>): Prisma__JobAnalyticsClient<$Result.GetResult<Prisma.$JobAnalyticsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobAnalytics that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobAnalyticsFindFirstOrThrowArgs} args - Arguments to find a JobAnalytics
     * @example
     * // Get one JobAnalytics
     * const jobAnalytics = await prisma.jobAnalytics.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobAnalyticsFindFirstOrThrowArgs>(args?: SelectSubset<T, JobAnalyticsFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobAnalyticsClient<$Result.GetResult<Prisma.$JobAnalyticsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more JobAnalytics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobAnalyticsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JobAnalytics
     * const jobAnalytics = await prisma.jobAnalytics.findMany()
     * 
     * // Get first 10 JobAnalytics
     * const jobAnalytics = await prisma.jobAnalytics.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobAnalyticsWithIdOnly = await prisma.jobAnalytics.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobAnalyticsFindManyArgs>(args?: SelectSubset<T, JobAnalyticsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobAnalyticsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a JobAnalytics.
     * @param {JobAnalyticsCreateArgs} args - Arguments to create a JobAnalytics.
     * @example
     * // Create one JobAnalytics
     * const JobAnalytics = await prisma.jobAnalytics.create({
     *   data: {
     *     // ... data to create a JobAnalytics
     *   }
     * })
     * 
     */
    create<T extends JobAnalyticsCreateArgs>(args: SelectSubset<T, JobAnalyticsCreateArgs<ExtArgs>>): Prisma__JobAnalyticsClient<$Result.GetResult<Prisma.$JobAnalyticsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many JobAnalytics.
     * @param {JobAnalyticsCreateManyArgs} args - Arguments to create many JobAnalytics.
     * @example
     * // Create many JobAnalytics
     * const jobAnalytics = await prisma.jobAnalytics.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobAnalyticsCreateManyArgs>(args?: SelectSubset<T, JobAnalyticsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JobAnalytics and returns the data saved in the database.
     * @param {JobAnalyticsCreateManyAndReturnArgs} args - Arguments to create many JobAnalytics.
     * @example
     * // Create many JobAnalytics
     * const jobAnalytics = await prisma.jobAnalytics.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JobAnalytics and only return the `id`
     * const jobAnalyticsWithIdOnly = await prisma.jobAnalytics.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JobAnalyticsCreateManyAndReturnArgs>(args?: SelectSubset<T, JobAnalyticsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobAnalyticsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a JobAnalytics.
     * @param {JobAnalyticsDeleteArgs} args - Arguments to delete one JobAnalytics.
     * @example
     * // Delete one JobAnalytics
     * const JobAnalytics = await prisma.jobAnalytics.delete({
     *   where: {
     *     // ... filter to delete one JobAnalytics
     *   }
     * })
     * 
     */
    delete<T extends JobAnalyticsDeleteArgs>(args: SelectSubset<T, JobAnalyticsDeleteArgs<ExtArgs>>): Prisma__JobAnalyticsClient<$Result.GetResult<Prisma.$JobAnalyticsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one JobAnalytics.
     * @param {JobAnalyticsUpdateArgs} args - Arguments to update one JobAnalytics.
     * @example
     * // Update one JobAnalytics
     * const jobAnalytics = await prisma.jobAnalytics.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobAnalyticsUpdateArgs>(args: SelectSubset<T, JobAnalyticsUpdateArgs<ExtArgs>>): Prisma__JobAnalyticsClient<$Result.GetResult<Prisma.$JobAnalyticsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more JobAnalytics.
     * @param {JobAnalyticsDeleteManyArgs} args - Arguments to filter JobAnalytics to delete.
     * @example
     * // Delete a few JobAnalytics
     * const { count } = await prisma.jobAnalytics.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobAnalyticsDeleteManyArgs>(args?: SelectSubset<T, JobAnalyticsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobAnalytics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobAnalyticsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JobAnalytics
     * const jobAnalytics = await prisma.jobAnalytics.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobAnalyticsUpdateManyArgs>(args: SelectSubset<T, JobAnalyticsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobAnalytics and returns the data updated in the database.
     * @param {JobAnalyticsUpdateManyAndReturnArgs} args - Arguments to update many JobAnalytics.
     * @example
     * // Update many JobAnalytics
     * const jobAnalytics = await prisma.jobAnalytics.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more JobAnalytics and only return the `id`
     * const jobAnalyticsWithIdOnly = await prisma.jobAnalytics.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JobAnalyticsUpdateManyAndReturnArgs>(args: SelectSubset<T, JobAnalyticsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobAnalyticsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one JobAnalytics.
     * @param {JobAnalyticsUpsertArgs} args - Arguments to update or create a JobAnalytics.
     * @example
     * // Update or create a JobAnalytics
     * const jobAnalytics = await prisma.jobAnalytics.upsert({
     *   create: {
     *     // ... data to create a JobAnalytics
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JobAnalytics we want to update
     *   }
     * })
     */
    upsert<T extends JobAnalyticsUpsertArgs>(args: SelectSubset<T, JobAnalyticsUpsertArgs<ExtArgs>>): Prisma__JobAnalyticsClient<$Result.GetResult<Prisma.$JobAnalyticsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of JobAnalytics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobAnalyticsCountArgs} args - Arguments to filter JobAnalytics to count.
     * @example
     * // Count the number of JobAnalytics
     * const count = await prisma.jobAnalytics.count({
     *   where: {
     *     // ... the filter for the JobAnalytics we want to count
     *   }
     * })
    **/
    count<T extends JobAnalyticsCountArgs>(
      args?: Subset<T, JobAnalyticsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobAnalyticsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JobAnalytics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobAnalyticsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobAnalyticsAggregateArgs>(args: Subset<T, JobAnalyticsAggregateArgs>): Prisma.PrismaPromise<GetJobAnalyticsAggregateType<T>>

    /**
     * Group by JobAnalytics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobAnalyticsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobAnalyticsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobAnalyticsGroupByArgs['orderBy'] }
        : { orderBy?: JobAnalyticsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobAnalyticsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobAnalyticsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JobAnalytics model
   */
  readonly fields: JobAnalyticsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JobAnalytics.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobAnalyticsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    kittingJob<T extends KittingJobDefaultArgs<ExtArgs> = {}>(args?: Subset<T, KittingJobDefaultArgs<ExtArgs>>): Prisma__KittingJobClient<$Result.GetResult<Prisma.$KittingJobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JobAnalytics model
   */
  interface JobAnalyticsFieldRefs {
    readonly id: FieldRef<"JobAnalytics", 'String'>
    readonly jobId: FieldRef<"JobAnalytics", 'String'>
    readonly totalExpectedTime: FieldRef<"JobAnalytics", 'Int'>
    readonly totalActualTime: FieldRef<"JobAnalytics", 'Int'>
    readonly efficiencyPercent: FieldRef<"JobAnalytics", 'Float'>
    readonly avgKitTime: FieldRef<"JobAnalytics", 'Float'>
    readonly fastestKitTime: FieldRef<"JobAnalytics", 'Int'>
    readonly slowestKitTime: FieldRef<"JobAnalytics", 'Int'>
    readonly stepAnalytics: FieldRef<"JobAnalytics", 'Json'>
    readonly timeVariance: FieldRef<"JobAnalytics", 'Float'>
    readonly consistencyScore: FieldRef<"JobAnalytics", 'Float'>
    readonly onTimeCompletion: FieldRef<"JobAnalytics", 'Boolean'>
    readonly qualityIssues: FieldRef<"JobAnalytics", 'Int'>
    readonly lastCalculated: FieldRef<"JobAnalytics", 'DateTime'>
    readonly createdAt: FieldRef<"JobAnalytics", 'DateTime'>
    readonly updatedAt: FieldRef<"JobAnalytics", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * JobAnalytics findUnique
   */
  export type JobAnalyticsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobAnalytics
     */
    select?: JobAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobAnalytics
     */
    omit?: JobAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobAnalyticsInclude<ExtArgs> | null
    /**
     * Filter, which JobAnalytics to fetch.
     */
    where: JobAnalyticsWhereUniqueInput
  }

  /**
   * JobAnalytics findUniqueOrThrow
   */
  export type JobAnalyticsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobAnalytics
     */
    select?: JobAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobAnalytics
     */
    omit?: JobAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobAnalyticsInclude<ExtArgs> | null
    /**
     * Filter, which JobAnalytics to fetch.
     */
    where: JobAnalyticsWhereUniqueInput
  }

  /**
   * JobAnalytics findFirst
   */
  export type JobAnalyticsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobAnalytics
     */
    select?: JobAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobAnalytics
     */
    omit?: JobAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobAnalyticsInclude<ExtArgs> | null
    /**
     * Filter, which JobAnalytics to fetch.
     */
    where?: JobAnalyticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobAnalytics to fetch.
     */
    orderBy?: JobAnalyticsOrderByWithRelationInput | JobAnalyticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobAnalytics.
     */
    cursor?: JobAnalyticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobAnalytics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobAnalytics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobAnalytics.
     */
    distinct?: JobAnalyticsScalarFieldEnum | JobAnalyticsScalarFieldEnum[]
  }

  /**
   * JobAnalytics findFirstOrThrow
   */
  export type JobAnalyticsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobAnalytics
     */
    select?: JobAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobAnalytics
     */
    omit?: JobAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobAnalyticsInclude<ExtArgs> | null
    /**
     * Filter, which JobAnalytics to fetch.
     */
    where?: JobAnalyticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobAnalytics to fetch.
     */
    orderBy?: JobAnalyticsOrderByWithRelationInput | JobAnalyticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobAnalytics.
     */
    cursor?: JobAnalyticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobAnalytics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobAnalytics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobAnalytics.
     */
    distinct?: JobAnalyticsScalarFieldEnum | JobAnalyticsScalarFieldEnum[]
  }

  /**
   * JobAnalytics findMany
   */
  export type JobAnalyticsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobAnalytics
     */
    select?: JobAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobAnalytics
     */
    omit?: JobAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobAnalyticsInclude<ExtArgs> | null
    /**
     * Filter, which JobAnalytics to fetch.
     */
    where?: JobAnalyticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobAnalytics to fetch.
     */
    orderBy?: JobAnalyticsOrderByWithRelationInput | JobAnalyticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JobAnalytics.
     */
    cursor?: JobAnalyticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobAnalytics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobAnalytics.
     */
    skip?: number
    distinct?: JobAnalyticsScalarFieldEnum | JobAnalyticsScalarFieldEnum[]
  }

  /**
   * JobAnalytics create
   */
  export type JobAnalyticsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobAnalytics
     */
    select?: JobAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobAnalytics
     */
    omit?: JobAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobAnalyticsInclude<ExtArgs> | null
    /**
     * The data needed to create a JobAnalytics.
     */
    data: XOR<JobAnalyticsCreateInput, JobAnalyticsUncheckedCreateInput>
  }

  /**
   * JobAnalytics createMany
   */
  export type JobAnalyticsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JobAnalytics.
     */
    data: JobAnalyticsCreateManyInput | JobAnalyticsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JobAnalytics createManyAndReturn
   */
  export type JobAnalyticsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobAnalytics
     */
    select?: JobAnalyticsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JobAnalytics
     */
    omit?: JobAnalyticsOmit<ExtArgs> | null
    /**
     * The data used to create many JobAnalytics.
     */
    data: JobAnalyticsCreateManyInput | JobAnalyticsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobAnalyticsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobAnalytics update
   */
  export type JobAnalyticsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobAnalytics
     */
    select?: JobAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobAnalytics
     */
    omit?: JobAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobAnalyticsInclude<ExtArgs> | null
    /**
     * The data needed to update a JobAnalytics.
     */
    data: XOR<JobAnalyticsUpdateInput, JobAnalyticsUncheckedUpdateInput>
    /**
     * Choose, which JobAnalytics to update.
     */
    where: JobAnalyticsWhereUniqueInput
  }

  /**
   * JobAnalytics updateMany
   */
  export type JobAnalyticsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JobAnalytics.
     */
    data: XOR<JobAnalyticsUpdateManyMutationInput, JobAnalyticsUncheckedUpdateManyInput>
    /**
     * Filter which JobAnalytics to update
     */
    where?: JobAnalyticsWhereInput
    /**
     * Limit how many JobAnalytics to update.
     */
    limit?: number
  }

  /**
   * JobAnalytics updateManyAndReturn
   */
  export type JobAnalyticsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobAnalytics
     */
    select?: JobAnalyticsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JobAnalytics
     */
    omit?: JobAnalyticsOmit<ExtArgs> | null
    /**
     * The data used to update JobAnalytics.
     */
    data: XOR<JobAnalyticsUpdateManyMutationInput, JobAnalyticsUncheckedUpdateManyInput>
    /**
     * Filter which JobAnalytics to update
     */
    where?: JobAnalyticsWhereInput
    /**
     * Limit how many JobAnalytics to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobAnalyticsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobAnalytics upsert
   */
  export type JobAnalyticsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobAnalytics
     */
    select?: JobAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobAnalytics
     */
    omit?: JobAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobAnalyticsInclude<ExtArgs> | null
    /**
     * The filter to search for the JobAnalytics to update in case it exists.
     */
    where: JobAnalyticsWhereUniqueInput
    /**
     * In case the JobAnalytics found by the `where` argument doesn't exist, create a new JobAnalytics with this data.
     */
    create: XOR<JobAnalyticsCreateInput, JobAnalyticsUncheckedCreateInput>
    /**
     * In case the JobAnalytics was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobAnalyticsUpdateInput, JobAnalyticsUncheckedUpdateInput>
  }

  /**
   * JobAnalytics delete
   */
  export type JobAnalyticsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobAnalytics
     */
    select?: JobAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobAnalytics
     */
    omit?: JobAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobAnalyticsInclude<ExtArgs> | null
    /**
     * Filter which JobAnalytics to delete.
     */
    where: JobAnalyticsWhereUniqueInput
  }

  /**
   * JobAnalytics deleteMany
   */
  export type JobAnalyticsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobAnalytics to delete
     */
    where?: JobAnalyticsWhereInput
    /**
     * Limit how many JobAnalytics to delete.
     */
    limit?: number
  }

  /**
   * JobAnalytics without action
   */
  export type JobAnalyticsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobAnalytics
     */
    select?: JobAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobAnalytics
     */
    omit?: JobAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobAnalyticsInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    role: $Enums.UserRole | null
    workCenterId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    role: $Enums.UserRole | null
    workCenterId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    role: number
    workCenterId: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    role?: true
    workCenterId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    role?: true
    workCenterId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    role?: true
    workCenterId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    role: $Enums.UserRole
    workCenterId: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    role?: boolean
    workCenterId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workCenter?: boolean | User$workCenterArgs<ExtArgs>
    assignedJobs?: boolean | User$assignedJobsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    role?: boolean
    workCenterId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workCenter?: boolean | User$workCenterArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    role?: boolean
    workCenterId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workCenter?: boolean | User$workCenterArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    role?: boolean
    workCenterId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "role" | "workCenterId" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workCenter?: boolean | User$workCenterArgs<ExtArgs>
    assignedJobs?: boolean | User$assignedJobsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workCenter?: boolean | User$workCenterArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workCenter?: boolean | User$workCenterArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      workCenter: Prisma.$WorkCenterPayload<ExtArgs> | null
      assignedJobs: Prisma.$JobAssignmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      role: $Enums.UserRole
      workCenterId: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workCenter<T extends User$workCenterArgs<ExtArgs> = {}>(args?: Subset<T, User$workCenterArgs<ExtArgs>>): Prisma__WorkCenterClient<$Result.GetResult<Prisma.$WorkCenterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    assignedJobs<T extends User$assignedJobsArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedJobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly workCenterId: FieldRef<"User", 'String'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.workCenter
   */
  export type User$workCenterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkCenter
     */
    select?: WorkCenterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkCenter
     */
    omit?: WorkCenterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkCenterInclude<ExtArgs> | null
    where?: WorkCenterWhereInput
  }

  /**
   * User.assignedJobs
   */
  export type User$assignedJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobAssignment
     */
    select?: JobAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobAssignment
     */
    omit?: JobAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobAssignmentInclude<ExtArgs> | null
    where?: JobAssignmentWhereInput
    orderBy?: JobAssignmentOrderByWithRelationInput | JobAssignmentOrderByWithRelationInput[]
    cursor?: JobAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobAssignmentScalarFieldEnum | JobAssignmentScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model WorkCenter
   */

  export type AggregateWorkCenter = {
    _count: WorkCenterCountAggregateOutputType | null
    _min: WorkCenterMinAggregateOutputType | null
    _max: WorkCenterMaxAggregateOutputType | null
  }

  export type WorkCenterMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkCenterMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkCenterCountAggregateOutputType = {
    id: number
    name: number
    description: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WorkCenterMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkCenterMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkCenterCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WorkCenterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkCenter to aggregate.
     */
    where?: WorkCenterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkCenters to fetch.
     */
    orderBy?: WorkCenterOrderByWithRelationInput | WorkCenterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkCenterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkCenters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkCenters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkCenters
    **/
    _count?: true | WorkCenterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkCenterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkCenterMaxAggregateInputType
  }

  export type GetWorkCenterAggregateType<T extends WorkCenterAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkCenter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkCenter[P]>
      : GetScalarType<T[P], AggregateWorkCenter[P]>
  }




  export type WorkCenterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkCenterWhereInput
    orderBy?: WorkCenterOrderByWithAggregationInput | WorkCenterOrderByWithAggregationInput[]
    by: WorkCenterScalarFieldEnum[] | WorkCenterScalarFieldEnum
    having?: WorkCenterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkCenterCountAggregateInputType | true
    _min?: WorkCenterMinAggregateInputType
    _max?: WorkCenterMaxAggregateInputType
  }

  export type WorkCenterGroupByOutputType = {
    id: string
    name: string
    description: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: WorkCenterCountAggregateOutputType | null
    _min: WorkCenterMinAggregateOutputType | null
    _max: WorkCenterMaxAggregateOutputType | null
  }

  type GetWorkCenterGroupByPayload<T extends WorkCenterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkCenterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkCenterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkCenterGroupByOutputType[P]>
            : GetScalarType<T[P], WorkCenterGroupByOutputType[P]>
        }
      >
    >


  export type WorkCenterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    users?: boolean | WorkCenter$usersArgs<ExtArgs>
    jobProgress?: boolean | WorkCenter$jobProgressArgs<ExtArgs>
    _count?: boolean | WorkCenterCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workCenter"]>

  export type WorkCenterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["workCenter"]>

  export type WorkCenterSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["workCenter"]>

  export type WorkCenterSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WorkCenterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["workCenter"]>
  export type WorkCenterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | WorkCenter$usersArgs<ExtArgs>
    jobProgress?: boolean | WorkCenter$jobProgressArgs<ExtArgs>
    _count?: boolean | WorkCenterCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WorkCenterIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type WorkCenterIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $WorkCenterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkCenter"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
      jobProgress: Prisma.$JobProgressPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["workCenter"]>
    composites: {}
  }

  type WorkCenterGetPayload<S extends boolean | null | undefined | WorkCenterDefaultArgs> = $Result.GetResult<Prisma.$WorkCenterPayload, S>

  type WorkCenterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkCenterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkCenterCountAggregateInputType | true
    }

  export interface WorkCenterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkCenter'], meta: { name: 'WorkCenter' } }
    /**
     * Find zero or one WorkCenter that matches the filter.
     * @param {WorkCenterFindUniqueArgs} args - Arguments to find a WorkCenter
     * @example
     * // Get one WorkCenter
     * const workCenter = await prisma.workCenter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkCenterFindUniqueArgs>(args: SelectSubset<T, WorkCenterFindUniqueArgs<ExtArgs>>): Prisma__WorkCenterClient<$Result.GetResult<Prisma.$WorkCenterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WorkCenter that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkCenterFindUniqueOrThrowArgs} args - Arguments to find a WorkCenter
     * @example
     * // Get one WorkCenter
     * const workCenter = await prisma.workCenter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkCenterFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkCenterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkCenterClient<$Result.GetResult<Prisma.$WorkCenterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkCenter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkCenterFindFirstArgs} args - Arguments to find a WorkCenter
     * @example
     * // Get one WorkCenter
     * const workCenter = await prisma.workCenter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkCenterFindFirstArgs>(args?: SelectSubset<T, WorkCenterFindFirstArgs<ExtArgs>>): Prisma__WorkCenterClient<$Result.GetResult<Prisma.$WorkCenterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkCenter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkCenterFindFirstOrThrowArgs} args - Arguments to find a WorkCenter
     * @example
     * // Get one WorkCenter
     * const workCenter = await prisma.workCenter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkCenterFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkCenterFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkCenterClient<$Result.GetResult<Prisma.$WorkCenterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WorkCenters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkCenterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkCenters
     * const workCenters = await prisma.workCenter.findMany()
     * 
     * // Get first 10 WorkCenters
     * const workCenters = await prisma.workCenter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workCenterWithIdOnly = await prisma.workCenter.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkCenterFindManyArgs>(args?: SelectSubset<T, WorkCenterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkCenterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WorkCenter.
     * @param {WorkCenterCreateArgs} args - Arguments to create a WorkCenter.
     * @example
     * // Create one WorkCenter
     * const WorkCenter = await prisma.workCenter.create({
     *   data: {
     *     // ... data to create a WorkCenter
     *   }
     * })
     * 
     */
    create<T extends WorkCenterCreateArgs>(args: SelectSubset<T, WorkCenterCreateArgs<ExtArgs>>): Prisma__WorkCenterClient<$Result.GetResult<Prisma.$WorkCenterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WorkCenters.
     * @param {WorkCenterCreateManyArgs} args - Arguments to create many WorkCenters.
     * @example
     * // Create many WorkCenters
     * const workCenter = await prisma.workCenter.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkCenterCreateManyArgs>(args?: SelectSubset<T, WorkCenterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkCenters and returns the data saved in the database.
     * @param {WorkCenterCreateManyAndReturnArgs} args - Arguments to create many WorkCenters.
     * @example
     * // Create many WorkCenters
     * const workCenter = await prisma.workCenter.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkCenters and only return the `id`
     * const workCenterWithIdOnly = await prisma.workCenter.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkCenterCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkCenterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkCenterPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WorkCenter.
     * @param {WorkCenterDeleteArgs} args - Arguments to delete one WorkCenter.
     * @example
     * // Delete one WorkCenter
     * const WorkCenter = await prisma.workCenter.delete({
     *   where: {
     *     // ... filter to delete one WorkCenter
     *   }
     * })
     * 
     */
    delete<T extends WorkCenterDeleteArgs>(args: SelectSubset<T, WorkCenterDeleteArgs<ExtArgs>>): Prisma__WorkCenterClient<$Result.GetResult<Prisma.$WorkCenterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WorkCenter.
     * @param {WorkCenterUpdateArgs} args - Arguments to update one WorkCenter.
     * @example
     * // Update one WorkCenter
     * const workCenter = await prisma.workCenter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkCenterUpdateArgs>(args: SelectSubset<T, WorkCenterUpdateArgs<ExtArgs>>): Prisma__WorkCenterClient<$Result.GetResult<Prisma.$WorkCenterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WorkCenters.
     * @param {WorkCenterDeleteManyArgs} args - Arguments to filter WorkCenters to delete.
     * @example
     * // Delete a few WorkCenters
     * const { count } = await prisma.workCenter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkCenterDeleteManyArgs>(args?: SelectSubset<T, WorkCenterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkCenters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkCenterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkCenters
     * const workCenter = await prisma.workCenter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkCenterUpdateManyArgs>(args: SelectSubset<T, WorkCenterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkCenters and returns the data updated in the database.
     * @param {WorkCenterUpdateManyAndReturnArgs} args - Arguments to update many WorkCenters.
     * @example
     * // Update many WorkCenters
     * const workCenter = await prisma.workCenter.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkCenters and only return the `id`
     * const workCenterWithIdOnly = await prisma.workCenter.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkCenterUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkCenterUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkCenterPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WorkCenter.
     * @param {WorkCenterUpsertArgs} args - Arguments to update or create a WorkCenter.
     * @example
     * // Update or create a WorkCenter
     * const workCenter = await prisma.workCenter.upsert({
     *   create: {
     *     // ... data to create a WorkCenter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkCenter we want to update
     *   }
     * })
     */
    upsert<T extends WorkCenterUpsertArgs>(args: SelectSubset<T, WorkCenterUpsertArgs<ExtArgs>>): Prisma__WorkCenterClient<$Result.GetResult<Prisma.$WorkCenterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WorkCenters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkCenterCountArgs} args - Arguments to filter WorkCenters to count.
     * @example
     * // Count the number of WorkCenters
     * const count = await prisma.workCenter.count({
     *   where: {
     *     // ... the filter for the WorkCenters we want to count
     *   }
     * })
    **/
    count<T extends WorkCenterCountArgs>(
      args?: Subset<T, WorkCenterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkCenterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkCenter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkCenterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkCenterAggregateArgs>(args: Subset<T, WorkCenterAggregateArgs>): Prisma.PrismaPromise<GetWorkCenterAggregateType<T>>

    /**
     * Group by WorkCenter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkCenterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkCenterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkCenterGroupByArgs['orderBy'] }
        : { orderBy?: WorkCenterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkCenterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkCenterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkCenter model
   */
  readonly fields: WorkCenterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkCenter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkCenterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends WorkCenter$usersArgs<ExtArgs> = {}>(args?: Subset<T, WorkCenter$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    jobProgress<T extends WorkCenter$jobProgressArgs<ExtArgs> = {}>(args?: Subset<T, WorkCenter$jobProgressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobProgressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkCenter model
   */
  interface WorkCenterFieldRefs {
    readonly id: FieldRef<"WorkCenter", 'String'>
    readonly name: FieldRef<"WorkCenter", 'String'>
    readonly description: FieldRef<"WorkCenter", 'String'>
    readonly isActive: FieldRef<"WorkCenter", 'Boolean'>
    readonly createdAt: FieldRef<"WorkCenter", 'DateTime'>
    readonly updatedAt: FieldRef<"WorkCenter", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkCenter findUnique
   */
  export type WorkCenterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkCenter
     */
    select?: WorkCenterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkCenter
     */
    omit?: WorkCenterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkCenterInclude<ExtArgs> | null
    /**
     * Filter, which WorkCenter to fetch.
     */
    where: WorkCenterWhereUniqueInput
  }

  /**
   * WorkCenter findUniqueOrThrow
   */
  export type WorkCenterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkCenter
     */
    select?: WorkCenterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkCenter
     */
    omit?: WorkCenterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkCenterInclude<ExtArgs> | null
    /**
     * Filter, which WorkCenter to fetch.
     */
    where: WorkCenterWhereUniqueInput
  }

  /**
   * WorkCenter findFirst
   */
  export type WorkCenterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkCenter
     */
    select?: WorkCenterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkCenter
     */
    omit?: WorkCenterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkCenterInclude<ExtArgs> | null
    /**
     * Filter, which WorkCenter to fetch.
     */
    where?: WorkCenterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkCenters to fetch.
     */
    orderBy?: WorkCenterOrderByWithRelationInput | WorkCenterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkCenters.
     */
    cursor?: WorkCenterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkCenters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkCenters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkCenters.
     */
    distinct?: WorkCenterScalarFieldEnum | WorkCenterScalarFieldEnum[]
  }

  /**
   * WorkCenter findFirstOrThrow
   */
  export type WorkCenterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkCenter
     */
    select?: WorkCenterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkCenter
     */
    omit?: WorkCenterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkCenterInclude<ExtArgs> | null
    /**
     * Filter, which WorkCenter to fetch.
     */
    where?: WorkCenterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkCenters to fetch.
     */
    orderBy?: WorkCenterOrderByWithRelationInput | WorkCenterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkCenters.
     */
    cursor?: WorkCenterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkCenters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkCenters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkCenters.
     */
    distinct?: WorkCenterScalarFieldEnum | WorkCenterScalarFieldEnum[]
  }

  /**
   * WorkCenter findMany
   */
  export type WorkCenterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkCenter
     */
    select?: WorkCenterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkCenter
     */
    omit?: WorkCenterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkCenterInclude<ExtArgs> | null
    /**
     * Filter, which WorkCenters to fetch.
     */
    where?: WorkCenterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkCenters to fetch.
     */
    orderBy?: WorkCenterOrderByWithRelationInput | WorkCenterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkCenters.
     */
    cursor?: WorkCenterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkCenters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkCenters.
     */
    skip?: number
    distinct?: WorkCenterScalarFieldEnum | WorkCenterScalarFieldEnum[]
  }

  /**
   * WorkCenter create
   */
  export type WorkCenterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkCenter
     */
    select?: WorkCenterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkCenter
     */
    omit?: WorkCenterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkCenterInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkCenter.
     */
    data: XOR<WorkCenterCreateInput, WorkCenterUncheckedCreateInput>
  }

  /**
   * WorkCenter createMany
   */
  export type WorkCenterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkCenters.
     */
    data: WorkCenterCreateManyInput | WorkCenterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkCenter createManyAndReturn
   */
  export type WorkCenterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkCenter
     */
    select?: WorkCenterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkCenter
     */
    omit?: WorkCenterOmit<ExtArgs> | null
    /**
     * The data used to create many WorkCenters.
     */
    data: WorkCenterCreateManyInput | WorkCenterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkCenter update
   */
  export type WorkCenterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkCenter
     */
    select?: WorkCenterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkCenter
     */
    omit?: WorkCenterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkCenterInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkCenter.
     */
    data: XOR<WorkCenterUpdateInput, WorkCenterUncheckedUpdateInput>
    /**
     * Choose, which WorkCenter to update.
     */
    where: WorkCenterWhereUniqueInput
  }

  /**
   * WorkCenter updateMany
   */
  export type WorkCenterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkCenters.
     */
    data: XOR<WorkCenterUpdateManyMutationInput, WorkCenterUncheckedUpdateManyInput>
    /**
     * Filter which WorkCenters to update
     */
    where?: WorkCenterWhereInput
    /**
     * Limit how many WorkCenters to update.
     */
    limit?: number
  }

  /**
   * WorkCenter updateManyAndReturn
   */
  export type WorkCenterUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkCenter
     */
    select?: WorkCenterSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkCenter
     */
    omit?: WorkCenterOmit<ExtArgs> | null
    /**
     * The data used to update WorkCenters.
     */
    data: XOR<WorkCenterUpdateManyMutationInput, WorkCenterUncheckedUpdateManyInput>
    /**
     * Filter which WorkCenters to update
     */
    where?: WorkCenterWhereInput
    /**
     * Limit how many WorkCenters to update.
     */
    limit?: number
  }

  /**
   * WorkCenter upsert
   */
  export type WorkCenterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkCenter
     */
    select?: WorkCenterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkCenter
     */
    omit?: WorkCenterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkCenterInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkCenter to update in case it exists.
     */
    where: WorkCenterWhereUniqueInput
    /**
     * In case the WorkCenter found by the `where` argument doesn't exist, create a new WorkCenter with this data.
     */
    create: XOR<WorkCenterCreateInput, WorkCenterUncheckedCreateInput>
    /**
     * In case the WorkCenter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkCenterUpdateInput, WorkCenterUncheckedUpdateInput>
  }

  /**
   * WorkCenter delete
   */
  export type WorkCenterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkCenter
     */
    select?: WorkCenterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkCenter
     */
    omit?: WorkCenterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkCenterInclude<ExtArgs> | null
    /**
     * Filter which WorkCenter to delete.
     */
    where: WorkCenterWhereUniqueInput
  }

  /**
   * WorkCenter deleteMany
   */
  export type WorkCenterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkCenters to delete
     */
    where?: WorkCenterWhereInput
    /**
     * Limit how many WorkCenters to delete.
     */
    limit?: number
  }

  /**
   * WorkCenter.users
   */
  export type WorkCenter$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * WorkCenter.jobProgress
   */
  export type WorkCenter$jobProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobProgress
     */
    select?: JobProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobProgress
     */
    omit?: JobProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobProgressInclude<ExtArgs> | null
    where?: JobProgressWhereInput
    orderBy?: JobProgressOrderByWithRelationInput | JobProgressOrderByWithRelationInput[]
    cursor?: JobProgressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobProgressScalarFieldEnum | JobProgressScalarFieldEnum[]
  }

  /**
   * WorkCenter without action
   */
  export type WorkCenterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkCenter
     */
    select?: WorkCenterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkCenter
     */
    omit?: WorkCenterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkCenterInclude<ExtArgs> | null
  }


  /**
   * Model JobAssignment
   */

  export type AggregateJobAssignment = {
    _count: JobAssignmentCountAggregateOutputType | null
    _min: JobAssignmentMinAggregateOutputType | null
    _max: JobAssignmentMaxAggregateOutputType | null
  }

  export type JobAssignmentMinAggregateOutputType = {
    id: string | null
    jobId: string | null
    userId: string | null
    assignedAt: Date | null
    assignedBy: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JobAssignmentMaxAggregateOutputType = {
    id: string | null
    jobId: string | null
    userId: string | null
    assignedAt: Date | null
    assignedBy: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JobAssignmentCountAggregateOutputType = {
    id: number
    jobId: number
    userId: number
    assignedAt: number
    assignedBy: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type JobAssignmentMinAggregateInputType = {
    id?: true
    jobId?: true
    userId?: true
    assignedAt?: true
    assignedBy?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JobAssignmentMaxAggregateInputType = {
    id?: true
    jobId?: true
    userId?: true
    assignedAt?: true
    assignedBy?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JobAssignmentCountAggregateInputType = {
    id?: true
    jobId?: true
    userId?: true
    assignedAt?: true
    assignedBy?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type JobAssignmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobAssignment to aggregate.
     */
    where?: JobAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobAssignments to fetch.
     */
    orderBy?: JobAssignmentOrderByWithRelationInput | JobAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JobAssignments
    **/
    _count?: true | JobAssignmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobAssignmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobAssignmentMaxAggregateInputType
  }

  export type GetJobAssignmentAggregateType<T extends JobAssignmentAggregateArgs> = {
        [P in keyof T & keyof AggregateJobAssignment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobAssignment[P]>
      : GetScalarType<T[P], AggregateJobAssignment[P]>
  }




  export type JobAssignmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobAssignmentWhereInput
    orderBy?: JobAssignmentOrderByWithAggregationInput | JobAssignmentOrderByWithAggregationInput[]
    by: JobAssignmentScalarFieldEnum[] | JobAssignmentScalarFieldEnum
    having?: JobAssignmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobAssignmentCountAggregateInputType | true
    _min?: JobAssignmentMinAggregateInputType
    _max?: JobAssignmentMaxAggregateInputType
  }

  export type JobAssignmentGroupByOutputType = {
    id: string
    jobId: string
    userId: string
    assignedAt: Date
    assignedBy: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: JobAssignmentCountAggregateOutputType | null
    _min: JobAssignmentMinAggregateOutputType | null
    _max: JobAssignmentMaxAggregateOutputType | null
  }

  type GetJobAssignmentGroupByPayload<T extends JobAssignmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobAssignmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobAssignmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobAssignmentGroupByOutputType[P]>
            : GetScalarType<T[P], JobAssignmentGroupByOutputType[P]>
        }
      >
    >


  export type JobAssignmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    userId?: boolean
    assignedAt?: boolean
    assignedBy?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    job?: boolean | KittingJobDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobAssignment"]>

  export type JobAssignmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    userId?: boolean
    assignedAt?: boolean
    assignedBy?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    job?: boolean | KittingJobDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobAssignment"]>

  export type JobAssignmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    userId?: boolean
    assignedAt?: boolean
    assignedBy?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    job?: boolean | KittingJobDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobAssignment"]>

  export type JobAssignmentSelectScalar = {
    id?: boolean
    jobId?: boolean
    userId?: boolean
    assignedAt?: boolean
    assignedBy?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type JobAssignmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "jobId" | "userId" | "assignedAt" | "assignedBy" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["jobAssignment"]>
  export type JobAssignmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | KittingJobDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type JobAssignmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | KittingJobDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type JobAssignmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | KittingJobDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $JobAssignmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JobAssignment"
    objects: {
      job: Prisma.$KittingJobPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      jobId: string
      userId: string
      assignedAt: Date
      assignedBy: string
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["jobAssignment"]>
    composites: {}
  }

  type JobAssignmentGetPayload<S extends boolean | null | undefined | JobAssignmentDefaultArgs> = $Result.GetResult<Prisma.$JobAssignmentPayload, S>

  type JobAssignmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JobAssignmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JobAssignmentCountAggregateInputType | true
    }

  export interface JobAssignmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JobAssignment'], meta: { name: 'JobAssignment' } }
    /**
     * Find zero or one JobAssignment that matches the filter.
     * @param {JobAssignmentFindUniqueArgs} args - Arguments to find a JobAssignment
     * @example
     * // Get one JobAssignment
     * const jobAssignment = await prisma.jobAssignment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobAssignmentFindUniqueArgs>(args: SelectSubset<T, JobAssignmentFindUniqueArgs<ExtArgs>>): Prisma__JobAssignmentClient<$Result.GetResult<Prisma.$JobAssignmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one JobAssignment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JobAssignmentFindUniqueOrThrowArgs} args - Arguments to find a JobAssignment
     * @example
     * // Get one JobAssignment
     * const jobAssignment = await prisma.jobAssignment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobAssignmentFindUniqueOrThrowArgs>(args: SelectSubset<T, JobAssignmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobAssignmentClient<$Result.GetResult<Prisma.$JobAssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobAssignment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobAssignmentFindFirstArgs} args - Arguments to find a JobAssignment
     * @example
     * // Get one JobAssignment
     * const jobAssignment = await prisma.jobAssignment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobAssignmentFindFirstArgs>(args?: SelectSubset<T, JobAssignmentFindFirstArgs<ExtArgs>>): Prisma__JobAssignmentClient<$Result.GetResult<Prisma.$JobAssignmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobAssignment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobAssignmentFindFirstOrThrowArgs} args - Arguments to find a JobAssignment
     * @example
     * // Get one JobAssignment
     * const jobAssignment = await prisma.jobAssignment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobAssignmentFindFirstOrThrowArgs>(args?: SelectSubset<T, JobAssignmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobAssignmentClient<$Result.GetResult<Prisma.$JobAssignmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more JobAssignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobAssignmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JobAssignments
     * const jobAssignments = await prisma.jobAssignment.findMany()
     * 
     * // Get first 10 JobAssignments
     * const jobAssignments = await prisma.jobAssignment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobAssignmentWithIdOnly = await prisma.jobAssignment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobAssignmentFindManyArgs>(args?: SelectSubset<T, JobAssignmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a JobAssignment.
     * @param {JobAssignmentCreateArgs} args - Arguments to create a JobAssignment.
     * @example
     * // Create one JobAssignment
     * const JobAssignment = await prisma.jobAssignment.create({
     *   data: {
     *     // ... data to create a JobAssignment
     *   }
     * })
     * 
     */
    create<T extends JobAssignmentCreateArgs>(args: SelectSubset<T, JobAssignmentCreateArgs<ExtArgs>>): Prisma__JobAssignmentClient<$Result.GetResult<Prisma.$JobAssignmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many JobAssignments.
     * @param {JobAssignmentCreateManyArgs} args - Arguments to create many JobAssignments.
     * @example
     * // Create many JobAssignments
     * const jobAssignment = await prisma.jobAssignment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobAssignmentCreateManyArgs>(args?: SelectSubset<T, JobAssignmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JobAssignments and returns the data saved in the database.
     * @param {JobAssignmentCreateManyAndReturnArgs} args - Arguments to create many JobAssignments.
     * @example
     * // Create many JobAssignments
     * const jobAssignment = await prisma.jobAssignment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JobAssignments and only return the `id`
     * const jobAssignmentWithIdOnly = await prisma.jobAssignment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JobAssignmentCreateManyAndReturnArgs>(args?: SelectSubset<T, JobAssignmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobAssignmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a JobAssignment.
     * @param {JobAssignmentDeleteArgs} args - Arguments to delete one JobAssignment.
     * @example
     * // Delete one JobAssignment
     * const JobAssignment = await prisma.jobAssignment.delete({
     *   where: {
     *     // ... filter to delete one JobAssignment
     *   }
     * })
     * 
     */
    delete<T extends JobAssignmentDeleteArgs>(args: SelectSubset<T, JobAssignmentDeleteArgs<ExtArgs>>): Prisma__JobAssignmentClient<$Result.GetResult<Prisma.$JobAssignmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one JobAssignment.
     * @param {JobAssignmentUpdateArgs} args - Arguments to update one JobAssignment.
     * @example
     * // Update one JobAssignment
     * const jobAssignment = await prisma.jobAssignment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobAssignmentUpdateArgs>(args: SelectSubset<T, JobAssignmentUpdateArgs<ExtArgs>>): Prisma__JobAssignmentClient<$Result.GetResult<Prisma.$JobAssignmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more JobAssignments.
     * @param {JobAssignmentDeleteManyArgs} args - Arguments to filter JobAssignments to delete.
     * @example
     * // Delete a few JobAssignments
     * const { count } = await prisma.jobAssignment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobAssignmentDeleteManyArgs>(args?: SelectSubset<T, JobAssignmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobAssignmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JobAssignments
     * const jobAssignment = await prisma.jobAssignment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobAssignmentUpdateManyArgs>(args: SelectSubset<T, JobAssignmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobAssignments and returns the data updated in the database.
     * @param {JobAssignmentUpdateManyAndReturnArgs} args - Arguments to update many JobAssignments.
     * @example
     * // Update many JobAssignments
     * const jobAssignment = await prisma.jobAssignment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more JobAssignments and only return the `id`
     * const jobAssignmentWithIdOnly = await prisma.jobAssignment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JobAssignmentUpdateManyAndReturnArgs>(args: SelectSubset<T, JobAssignmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobAssignmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one JobAssignment.
     * @param {JobAssignmentUpsertArgs} args - Arguments to update or create a JobAssignment.
     * @example
     * // Update or create a JobAssignment
     * const jobAssignment = await prisma.jobAssignment.upsert({
     *   create: {
     *     // ... data to create a JobAssignment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JobAssignment we want to update
     *   }
     * })
     */
    upsert<T extends JobAssignmentUpsertArgs>(args: SelectSubset<T, JobAssignmentUpsertArgs<ExtArgs>>): Prisma__JobAssignmentClient<$Result.GetResult<Prisma.$JobAssignmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of JobAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobAssignmentCountArgs} args - Arguments to filter JobAssignments to count.
     * @example
     * // Count the number of JobAssignments
     * const count = await prisma.jobAssignment.count({
     *   where: {
     *     // ... the filter for the JobAssignments we want to count
     *   }
     * })
    **/
    count<T extends JobAssignmentCountArgs>(
      args?: Subset<T, JobAssignmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobAssignmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JobAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobAssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobAssignmentAggregateArgs>(args: Subset<T, JobAssignmentAggregateArgs>): Prisma.PrismaPromise<GetJobAssignmentAggregateType<T>>

    /**
     * Group by JobAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobAssignmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobAssignmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobAssignmentGroupByArgs['orderBy'] }
        : { orderBy?: JobAssignmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobAssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JobAssignment model
   */
  readonly fields: JobAssignmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JobAssignment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobAssignmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    job<T extends KittingJobDefaultArgs<ExtArgs> = {}>(args?: Subset<T, KittingJobDefaultArgs<ExtArgs>>): Prisma__KittingJobClient<$Result.GetResult<Prisma.$KittingJobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JobAssignment model
   */
  interface JobAssignmentFieldRefs {
    readonly id: FieldRef<"JobAssignment", 'String'>
    readonly jobId: FieldRef<"JobAssignment", 'String'>
    readonly userId: FieldRef<"JobAssignment", 'String'>
    readonly assignedAt: FieldRef<"JobAssignment", 'DateTime'>
    readonly assignedBy: FieldRef<"JobAssignment", 'String'>
    readonly isActive: FieldRef<"JobAssignment", 'Boolean'>
    readonly createdAt: FieldRef<"JobAssignment", 'DateTime'>
    readonly updatedAt: FieldRef<"JobAssignment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * JobAssignment findUnique
   */
  export type JobAssignmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobAssignment
     */
    select?: JobAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobAssignment
     */
    omit?: JobAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which JobAssignment to fetch.
     */
    where: JobAssignmentWhereUniqueInput
  }

  /**
   * JobAssignment findUniqueOrThrow
   */
  export type JobAssignmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobAssignment
     */
    select?: JobAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobAssignment
     */
    omit?: JobAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which JobAssignment to fetch.
     */
    where: JobAssignmentWhereUniqueInput
  }

  /**
   * JobAssignment findFirst
   */
  export type JobAssignmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobAssignment
     */
    select?: JobAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobAssignment
     */
    omit?: JobAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which JobAssignment to fetch.
     */
    where?: JobAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobAssignments to fetch.
     */
    orderBy?: JobAssignmentOrderByWithRelationInput | JobAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobAssignments.
     */
    cursor?: JobAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobAssignments.
     */
    distinct?: JobAssignmentScalarFieldEnum | JobAssignmentScalarFieldEnum[]
  }

  /**
   * JobAssignment findFirstOrThrow
   */
  export type JobAssignmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobAssignment
     */
    select?: JobAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobAssignment
     */
    omit?: JobAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which JobAssignment to fetch.
     */
    where?: JobAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobAssignments to fetch.
     */
    orderBy?: JobAssignmentOrderByWithRelationInput | JobAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobAssignments.
     */
    cursor?: JobAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobAssignments.
     */
    distinct?: JobAssignmentScalarFieldEnum | JobAssignmentScalarFieldEnum[]
  }

  /**
   * JobAssignment findMany
   */
  export type JobAssignmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobAssignment
     */
    select?: JobAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobAssignment
     */
    omit?: JobAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which JobAssignments to fetch.
     */
    where?: JobAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobAssignments to fetch.
     */
    orderBy?: JobAssignmentOrderByWithRelationInput | JobAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JobAssignments.
     */
    cursor?: JobAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobAssignments.
     */
    skip?: number
    distinct?: JobAssignmentScalarFieldEnum | JobAssignmentScalarFieldEnum[]
  }

  /**
   * JobAssignment create
   */
  export type JobAssignmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobAssignment
     */
    select?: JobAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobAssignment
     */
    omit?: JobAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to create a JobAssignment.
     */
    data: XOR<JobAssignmentCreateInput, JobAssignmentUncheckedCreateInput>
  }

  /**
   * JobAssignment createMany
   */
  export type JobAssignmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JobAssignments.
     */
    data: JobAssignmentCreateManyInput | JobAssignmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JobAssignment createManyAndReturn
   */
  export type JobAssignmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobAssignment
     */
    select?: JobAssignmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JobAssignment
     */
    omit?: JobAssignmentOmit<ExtArgs> | null
    /**
     * The data used to create many JobAssignments.
     */
    data: JobAssignmentCreateManyInput | JobAssignmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobAssignmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobAssignment update
   */
  export type JobAssignmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobAssignment
     */
    select?: JobAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobAssignment
     */
    omit?: JobAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to update a JobAssignment.
     */
    data: XOR<JobAssignmentUpdateInput, JobAssignmentUncheckedUpdateInput>
    /**
     * Choose, which JobAssignment to update.
     */
    where: JobAssignmentWhereUniqueInput
  }

  /**
   * JobAssignment updateMany
   */
  export type JobAssignmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JobAssignments.
     */
    data: XOR<JobAssignmentUpdateManyMutationInput, JobAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which JobAssignments to update
     */
    where?: JobAssignmentWhereInput
    /**
     * Limit how many JobAssignments to update.
     */
    limit?: number
  }

  /**
   * JobAssignment updateManyAndReturn
   */
  export type JobAssignmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobAssignment
     */
    select?: JobAssignmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JobAssignment
     */
    omit?: JobAssignmentOmit<ExtArgs> | null
    /**
     * The data used to update JobAssignments.
     */
    data: XOR<JobAssignmentUpdateManyMutationInput, JobAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which JobAssignments to update
     */
    where?: JobAssignmentWhereInput
    /**
     * Limit how many JobAssignments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobAssignmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobAssignment upsert
   */
  export type JobAssignmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobAssignment
     */
    select?: JobAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobAssignment
     */
    omit?: JobAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobAssignmentInclude<ExtArgs> | null
    /**
     * The filter to search for the JobAssignment to update in case it exists.
     */
    where: JobAssignmentWhereUniqueInput
    /**
     * In case the JobAssignment found by the `where` argument doesn't exist, create a new JobAssignment with this data.
     */
    create: XOR<JobAssignmentCreateInput, JobAssignmentUncheckedCreateInput>
    /**
     * In case the JobAssignment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobAssignmentUpdateInput, JobAssignmentUncheckedUpdateInput>
  }

  /**
   * JobAssignment delete
   */
  export type JobAssignmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobAssignment
     */
    select?: JobAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobAssignment
     */
    omit?: JobAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobAssignmentInclude<ExtArgs> | null
    /**
     * Filter which JobAssignment to delete.
     */
    where: JobAssignmentWhereUniqueInput
  }

  /**
   * JobAssignment deleteMany
   */
  export type JobAssignmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobAssignments to delete
     */
    where?: JobAssignmentWhereInput
    /**
     * Limit how many JobAssignments to delete.
     */
    limit?: number
  }

  /**
   * JobAssignment without action
   */
  export type JobAssignmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobAssignment
     */
    select?: JobAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobAssignment
     */
    omit?: JobAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobAssignmentInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const KittingJobScalarFieldEnum: {
    id: 'id',
    customerName: 'customerName',
    jobNumber: 'jobNumber',
    dueDate: 'dueDate',
    orderedQuantity: 'orderedQuantity',
    runLength: 'runLength',
    customerSpec: 'customerSpec',
    description: 'description',
    setup: 'setup',
    makeReady: 'makeReady',
    takeDown: 'takeDown',
    expectedKitDuration: 'expectedKitDuration',
    expectedJobDuration: 'expectedJobDuration',
    scheduledDate: 'scheduledDate',
    scheduledStartTime: 'scheduledStartTime',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type KittingJobScalarFieldEnum = (typeof KittingJobScalarFieldEnum)[keyof typeof KittingJobScalarFieldEnum]


  export const RouteStepScalarFieldEnum: {
    id: 'id',
    name: 'name',
    expectedSeconds: 'expectedSeconds',
    order: 'order',
    instructionType: 'instructionType',
    instructionUrl: 'instructionUrl',
    instructionText: 'instructionText',
    autoLoop: 'autoLoop',
    kittingJobId: 'kittingJobId'
  };

  export type RouteStepScalarFieldEnum = (typeof RouteStepScalarFieldEnum)[keyof typeof RouteStepScalarFieldEnum]


  export const JobProgressScalarFieldEnum: {
    id: 'id',
    jobId: 'jobId',
    startTime: 'startTime',
    endTime: 'endTime',
    actualJobDuration: 'actualJobDuration',
    completedKits: 'completedKits',
    remainingKits: 'remainingKits',
    currentKitNumber: 'currentKitNumber',
    isActive: 'isActive',
    pausedTime: 'pausedTime',
    workCenterId: 'workCenterId',
    assignedWorker: 'assignedWorker',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type JobProgressScalarFieldEnum = (typeof JobProgressScalarFieldEnum)[keyof typeof JobProgressScalarFieldEnum]


  export const KitExecutionScalarFieldEnum: {
    id: 'id',
    jobProgressId: 'jobProgressId',
    kitNumber: 'kitNumber',
    startTime: 'startTime',
    endTime: 'endTime',
    actualDuration: 'actualDuration',
    completed: 'completed',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type KitExecutionScalarFieldEnum = (typeof KitExecutionScalarFieldEnum)[keyof typeof KitExecutionScalarFieldEnum]


  export const StepExecutionScalarFieldEnum: {
    id: 'id',
    kitExecutionId: 'kitExecutionId',
    routeStepId: 'routeStepId',
    startTime: 'startTime',
    endTime: 'endTime',
    actualDuration: 'actualDuration',
    completed: 'completed',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StepExecutionScalarFieldEnum = (typeof StepExecutionScalarFieldEnum)[keyof typeof StepExecutionScalarFieldEnum]


  export const JobAnalyticsScalarFieldEnum: {
    id: 'id',
    jobId: 'jobId',
    totalExpectedTime: 'totalExpectedTime',
    totalActualTime: 'totalActualTime',
    efficiencyPercent: 'efficiencyPercent',
    avgKitTime: 'avgKitTime',
    fastestKitTime: 'fastestKitTime',
    slowestKitTime: 'slowestKitTime',
    stepAnalytics: 'stepAnalytics',
    timeVariance: 'timeVariance',
    consistencyScore: 'consistencyScore',
    onTimeCompletion: 'onTimeCompletion',
    qualityIssues: 'qualityIssues',
    lastCalculated: 'lastCalculated',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type JobAnalyticsScalarFieldEnum = (typeof JobAnalyticsScalarFieldEnum)[keyof typeof JobAnalyticsScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    role: 'role',
    workCenterId: 'workCenterId',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const WorkCenterScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WorkCenterScalarFieldEnum = (typeof WorkCenterScalarFieldEnum)[keyof typeof WorkCenterScalarFieldEnum]


  export const JobAssignmentScalarFieldEnum: {
    id: 'id',
    jobId: 'jobId',
    userId: 'userId',
    assignedAt: 'assignedAt',
    assignedBy: 'assignedBy',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type JobAssignmentScalarFieldEnum = (typeof JobAssignmentScalarFieldEnum)[keyof typeof JobAssignmentScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'JobStatus'
   */
  export type EnumJobStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobStatus'>
    


  /**
   * Reference to a field of type 'JobStatus[]'
   */
  export type ListEnumJobStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobStatus[]'>
    


  /**
   * Reference to a field of type 'InstructionType'
   */
  export type EnumInstructionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InstructionType'>
    


  /**
   * Reference to a field of type 'InstructionType[]'
   */
  export type ListEnumInstructionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InstructionType[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    
  /**
   * Deep Input Types
   */


  export type KittingJobWhereInput = {
    AND?: KittingJobWhereInput | KittingJobWhereInput[]
    OR?: KittingJobWhereInput[]
    NOT?: KittingJobWhereInput | KittingJobWhereInput[]
    id?: StringFilter<"KittingJob"> | string
    customerName?: StringFilter<"KittingJob"> | string
    jobNumber?: StringFilter<"KittingJob"> | string
    dueDate?: DateTimeFilter<"KittingJob"> | Date | string
    orderedQuantity?: IntFilter<"KittingJob"> | number
    runLength?: IntFilter<"KittingJob"> | number
    customerSpec?: StringNullableFilter<"KittingJob"> | string | null
    description?: StringFilter<"KittingJob"> | string
    setup?: IntFilter<"KittingJob"> | number
    makeReady?: IntFilter<"KittingJob"> | number
    takeDown?: IntFilter<"KittingJob"> | number
    expectedKitDuration?: IntFilter<"KittingJob"> | number
    expectedJobDuration?: IntFilter<"KittingJob"> | number
    scheduledDate?: DateTimeNullableFilter<"KittingJob"> | Date | string | null
    scheduledStartTime?: StringNullableFilter<"KittingJob"> | string | null
    status?: EnumJobStatusFilter<"KittingJob"> | $Enums.JobStatus
    createdAt?: DateTimeFilter<"KittingJob"> | Date | string
    updatedAt?: DateTimeFilter<"KittingJob"> | Date | string
    routeSteps?: RouteStepListRelationFilter
    jobProgress?: XOR<JobProgressNullableScalarRelationFilter, JobProgressWhereInput> | null
    analytics?: XOR<JobAnalyticsNullableScalarRelationFilter, JobAnalyticsWhereInput> | null
    assignments?: JobAssignmentListRelationFilter
  }

  export type KittingJobOrderByWithRelationInput = {
    id?: SortOrder
    customerName?: SortOrder
    jobNumber?: SortOrder
    dueDate?: SortOrder
    orderedQuantity?: SortOrder
    runLength?: SortOrder
    customerSpec?: SortOrderInput | SortOrder
    description?: SortOrder
    setup?: SortOrder
    makeReady?: SortOrder
    takeDown?: SortOrder
    expectedKitDuration?: SortOrder
    expectedJobDuration?: SortOrder
    scheduledDate?: SortOrderInput | SortOrder
    scheduledStartTime?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    routeSteps?: RouteStepOrderByRelationAggregateInput
    jobProgress?: JobProgressOrderByWithRelationInput
    analytics?: JobAnalyticsOrderByWithRelationInput
    assignments?: JobAssignmentOrderByRelationAggregateInput
  }

  export type KittingJobWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    jobNumber?: string
    AND?: KittingJobWhereInput | KittingJobWhereInput[]
    OR?: KittingJobWhereInput[]
    NOT?: KittingJobWhereInput | KittingJobWhereInput[]
    customerName?: StringFilter<"KittingJob"> | string
    dueDate?: DateTimeFilter<"KittingJob"> | Date | string
    orderedQuantity?: IntFilter<"KittingJob"> | number
    runLength?: IntFilter<"KittingJob"> | number
    customerSpec?: StringNullableFilter<"KittingJob"> | string | null
    description?: StringFilter<"KittingJob"> | string
    setup?: IntFilter<"KittingJob"> | number
    makeReady?: IntFilter<"KittingJob"> | number
    takeDown?: IntFilter<"KittingJob"> | number
    expectedKitDuration?: IntFilter<"KittingJob"> | number
    expectedJobDuration?: IntFilter<"KittingJob"> | number
    scheduledDate?: DateTimeNullableFilter<"KittingJob"> | Date | string | null
    scheduledStartTime?: StringNullableFilter<"KittingJob"> | string | null
    status?: EnumJobStatusFilter<"KittingJob"> | $Enums.JobStatus
    createdAt?: DateTimeFilter<"KittingJob"> | Date | string
    updatedAt?: DateTimeFilter<"KittingJob"> | Date | string
    routeSteps?: RouteStepListRelationFilter
    jobProgress?: XOR<JobProgressNullableScalarRelationFilter, JobProgressWhereInput> | null
    analytics?: XOR<JobAnalyticsNullableScalarRelationFilter, JobAnalyticsWhereInput> | null
    assignments?: JobAssignmentListRelationFilter
  }, "id" | "jobNumber">

  export type KittingJobOrderByWithAggregationInput = {
    id?: SortOrder
    customerName?: SortOrder
    jobNumber?: SortOrder
    dueDate?: SortOrder
    orderedQuantity?: SortOrder
    runLength?: SortOrder
    customerSpec?: SortOrderInput | SortOrder
    description?: SortOrder
    setup?: SortOrder
    makeReady?: SortOrder
    takeDown?: SortOrder
    expectedKitDuration?: SortOrder
    expectedJobDuration?: SortOrder
    scheduledDate?: SortOrderInput | SortOrder
    scheduledStartTime?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: KittingJobCountOrderByAggregateInput
    _avg?: KittingJobAvgOrderByAggregateInput
    _max?: KittingJobMaxOrderByAggregateInput
    _min?: KittingJobMinOrderByAggregateInput
    _sum?: KittingJobSumOrderByAggregateInput
  }

  export type KittingJobScalarWhereWithAggregatesInput = {
    AND?: KittingJobScalarWhereWithAggregatesInput | KittingJobScalarWhereWithAggregatesInput[]
    OR?: KittingJobScalarWhereWithAggregatesInput[]
    NOT?: KittingJobScalarWhereWithAggregatesInput | KittingJobScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"KittingJob"> | string
    customerName?: StringWithAggregatesFilter<"KittingJob"> | string
    jobNumber?: StringWithAggregatesFilter<"KittingJob"> | string
    dueDate?: DateTimeWithAggregatesFilter<"KittingJob"> | Date | string
    orderedQuantity?: IntWithAggregatesFilter<"KittingJob"> | number
    runLength?: IntWithAggregatesFilter<"KittingJob"> | number
    customerSpec?: StringNullableWithAggregatesFilter<"KittingJob"> | string | null
    description?: StringWithAggregatesFilter<"KittingJob"> | string
    setup?: IntWithAggregatesFilter<"KittingJob"> | number
    makeReady?: IntWithAggregatesFilter<"KittingJob"> | number
    takeDown?: IntWithAggregatesFilter<"KittingJob"> | number
    expectedKitDuration?: IntWithAggregatesFilter<"KittingJob"> | number
    expectedJobDuration?: IntWithAggregatesFilter<"KittingJob"> | number
    scheduledDate?: DateTimeNullableWithAggregatesFilter<"KittingJob"> | Date | string | null
    scheduledStartTime?: StringNullableWithAggregatesFilter<"KittingJob"> | string | null
    status?: EnumJobStatusWithAggregatesFilter<"KittingJob"> | $Enums.JobStatus
    createdAt?: DateTimeWithAggregatesFilter<"KittingJob"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"KittingJob"> | Date | string
  }

  export type RouteStepWhereInput = {
    AND?: RouteStepWhereInput | RouteStepWhereInput[]
    OR?: RouteStepWhereInput[]
    NOT?: RouteStepWhereInput | RouteStepWhereInput[]
    id?: StringFilter<"RouteStep"> | string
    name?: StringFilter<"RouteStep"> | string
    expectedSeconds?: IntFilter<"RouteStep"> | number
    order?: IntFilter<"RouteStep"> | number
    instructionType?: EnumInstructionTypeFilter<"RouteStep"> | $Enums.InstructionType
    instructionUrl?: StringNullableFilter<"RouteStep"> | string | null
    instructionText?: StringNullableFilter<"RouteStep"> | string | null
    autoLoop?: BoolFilter<"RouteStep"> | boolean
    kittingJobId?: StringFilter<"RouteStep"> | string
    kittingJob?: XOR<KittingJobScalarRelationFilter, KittingJobWhereInput>
    stepExecutions?: StepExecutionListRelationFilter
  }

  export type RouteStepOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    expectedSeconds?: SortOrder
    order?: SortOrder
    instructionType?: SortOrder
    instructionUrl?: SortOrderInput | SortOrder
    instructionText?: SortOrderInput | SortOrder
    autoLoop?: SortOrder
    kittingJobId?: SortOrder
    kittingJob?: KittingJobOrderByWithRelationInput
    stepExecutions?: StepExecutionOrderByRelationAggregateInput
  }

  export type RouteStepWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RouteStepWhereInput | RouteStepWhereInput[]
    OR?: RouteStepWhereInput[]
    NOT?: RouteStepWhereInput | RouteStepWhereInput[]
    name?: StringFilter<"RouteStep"> | string
    expectedSeconds?: IntFilter<"RouteStep"> | number
    order?: IntFilter<"RouteStep"> | number
    instructionType?: EnumInstructionTypeFilter<"RouteStep"> | $Enums.InstructionType
    instructionUrl?: StringNullableFilter<"RouteStep"> | string | null
    instructionText?: StringNullableFilter<"RouteStep"> | string | null
    autoLoop?: BoolFilter<"RouteStep"> | boolean
    kittingJobId?: StringFilter<"RouteStep"> | string
    kittingJob?: XOR<KittingJobScalarRelationFilter, KittingJobWhereInput>
    stepExecutions?: StepExecutionListRelationFilter
  }, "id">

  export type RouteStepOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    expectedSeconds?: SortOrder
    order?: SortOrder
    instructionType?: SortOrder
    instructionUrl?: SortOrderInput | SortOrder
    instructionText?: SortOrderInput | SortOrder
    autoLoop?: SortOrder
    kittingJobId?: SortOrder
    _count?: RouteStepCountOrderByAggregateInput
    _avg?: RouteStepAvgOrderByAggregateInput
    _max?: RouteStepMaxOrderByAggregateInput
    _min?: RouteStepMinOrderByAggregateInput
    _sum?: RouteStepSumOrderByAggregateInput
  }

  export type RouteStepScalarWhereWithAggregatesInput = {
    AND?: RouteStepScalarWhereWithAggregatesInput | RouteStepScalarWhereWithAggregatesInput[]
    OR?: RouteStepScalarWhereWithAggregatesInput[]
    NOT?: RouteStepScalarWhereWithAggregatesInput | RouteStepScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RouteStep"> | string
    name?: StringWithAggregatesFilter<"RouteStep"> | string
    expectedSeconds?: IntWithAggregatesFilter<"RouteStep"> | number
    order?: IntWithAggregatesFilter<"RouteStep"> | number
    instructionType?: EnumInstructionTypeWithAggregatesFilter<"RouteStep"> | $Enums.InstructionType
    instructionUrl?: StringNullableWithAggregatesFilter<"RouteStep"> | string | null
    instructionText?: StringNullableWithAggregatesFilter<"RouteStep"> | string | null
    autoLoop?: BoolWithAggregatesFilter<"RouteStep"> | boolean
    kittingJobId?: StringWithAggregatesFilter<"RouteStep"> | string
  }

  export type JobProgressWhereInput = {
    AND?: JobProgressWhereInput | JobProgressWhereInput[]
    OR?: JobProgressWhereInput[]
    NOT?: JobProgressWhereInput | JobProgressWhereInput[]
    id?: StringFilter<"JobProgress"> | string
    jobId?: StringFilter<"JobProgress"> | string
    startTime?: DateTimeNullableFilter<"JobProgress"> | Date | string | null
    endTime?: DateTimeNullableFilter<"JobProgress"> | Date | string | null
    actualJobDuration?: IntNullableFilter<"JobProgress"> | number | null
    completedKits?: IntFilter<"JobProgress"> | number
    remainingKits?: IntFilter<"JobProgress"> | number
    currentKitNumber?: IntNullableFilter<"JobProgress"> | number | null
    isActive?: BoolFilter<"JobProgress"> | boolean
    pausedTime?: IntFilter<"JobProgress"> | number
    workCenterId?: StringNullableFilter<"JobProgress"> | string | null
    assignedWorker?: StringNullableFilter<"JobProgress"> | string | null
    createdAt?: DateTimeFilter<"JobProgress"> | Date | string
    updatedAt?: DateTimeFilter<"JobProgress"> | Date | string
    kittingJob?: XOR<KittingJobScalarRelationFilter, KittingJobWhereInput>
    workCenter?: XOR<WorkCenterNullableScalarRelationFilter, WorkCenterWhereInput> | null
    kitExecutions?: KitExecutionListRelationFilter
  }

  export type JobProgressOrderByWithRelationInput = {
    id?: SortOrder
    jobId?: SortOrder
    startTime?: SortOrderInput | SortOrder
    endTime?: SortOrderInput | SortOrder
    actualJobDuration?: SortOrderInput | SortOrder
    completedKits?: SortOrder
    remainingKits?: SortOrder
    currentKitNumber?: SortOrderInput | SortOrder
    isActive?: SortOrder
    pausedTime?: SortOrder
    workCenterId?: SortOrderInput | SortOrder
    assignedWorker?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    kittingJob?: KittingJobOrderByWithRelationInput
    workCenter?: WorkCenterOrderByWithRelationInput
    kitExecutions?: KitExecutionOrderByRelationAggregateInput
  }

  export type JobProgressWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    jobId?: string
    AND?: JobProgressWhereInput | JobProgressWhereInput[]
    OR?: JobProgressWhereInput[]
    NOT?: JobProgressWhereInput | JobProgressWhereInput[]
    startTime?: DateTimeNullableFilter<"JobProgress"> | Date | string | null
    endTime?: DateTimeNullableFilter<"JobProgress"> | Date | string | null
    actualJobDuration?: IntNullableFilter<"JobProgress"> | number | null
    completedKits?: IntFilter<"JobProgress"> | number
    remainingKits?: IntFilter<"JobProgress"> | number
    currentKitNumber?: IntNullableFilter<"JobProgress"> | number | null
    isActive?: BoolFilter<"JobProgress"> | boolean
    pausedTime?: IntFilter<"JobProgress"> | number
    workCenterId?: StringNullableFilter<"JobProgress"> | string | null
    assignedWorker?: StringNullableFilter<"JobProgress"> | string | null
    createdAt?: DateTimeFilter<"JobProgress"> | Date | string
    updatedAt?: DateTimeFilter<"JobProgress"> | Date | string
    kittingJob?: XOR<KittingJobScalarRelationFilter, KittingJobWhereInput>
    workCenter?: XOR<WorkCenterNullableScalarRelationFilter, WorkCenterWhereInput> | null
    kitExecutions?: KitExecutionListRelationFilter
  }, "id" | "jobId">

  export type JobProgressOrderByWithAggregationInput = {
    id?: SortOrder
    jobId?: SortOrder
    startTime?: SortOrderInput | SortOrder
    endTime?: SortOrderInput | SortOrder
    actualJobDuration?: SortOrderInput | SortOrder
    completedKits?: SortOrder
    remainingKits?: SortOrder
    currentKitNumber?: SortOrderInput | SortOrder
    isActive?: SortOrder
    pausedTime?: SortOrder
    workCenterId?: SortOrderInput | SortOrder
    assignedWorker?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: JobProgressCountOrderByAggregateInput
    _avg?: JobProgressAvgOrderByAggregateInput
    _max?: JobProgressMaxOrderByAggregateInput
    _min?: JobProgressMinOrderByAggregateInput
    _sum?: JobProgressSumOrderByAggregateInput
  }

  export type JobProgressScalarWhereWithAggregatesInput = {
    AND?: JobProgressScalarWhereWithAggregatesInput | JobProgressScalarWhereWithAggregatesInput[]
    OR?: JobProgressScalarWhereWithAggregatesInput[]
    NOT?: JobProgressScalarWhereWithAggregatesInput | JobProgressScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"JobProgress"> | string
    jobId?: StringWithAggregatesFilter<"JobProgress"> | string
    startTime?: DateTimeNullableWithAggregatesFilter<"JobProgress"> | Date | string | null
    endTime?: DateTimeNullableWithAggregatesFilter<"JobProgress"> | Date | string | null
    actualJobDuration?: IntNullableWithAggregatesFilter<"JobProgress"> | number | null
    completedKits?: IntWithAggregatesFilter<"JobProgress"> | number
    remainingKits?: IntWithAggregatesFilter<"JobProgress"> | number
    currentKitNumber?: IntNullableWithAggregatesFilter<"JobProgress"> | number | null
    isActive?: BoolWithAggregatesFilter<"JobProgress"> | boolean
    pausedTime?: IntWithAggregatesFilter<"JobProgress"> | number
    workCenterId?: StringNullableWithAggregatesFilter<"JobProgress"> | string | null
    assignedWorker?: StringNullableWithAggregatesFilter<"JobProgress"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"JobProgress"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"JobProgress"> | Date | string
  }

  export type KitExecutionWhereInput = {
    AND?: KitExecutionWhereInput | KitExecutionWhereInput[]
    OR?: KitExecutionWhereInput[]
    NOT?: KitExecutionWhereInput | KitExecutionWhereInput[]
    id?: StringFilter<"KitExecution"> | string
    jobProgressId?: StringFilter<"KitExecution"> | string
    kitNumber?: IntFilter<"KitExecution"> | number
    startTime?: DateTimeFilter<"KitExecution"> | Date | string
    endTime?: DateTimeNullableFilter<"KitExecution"> | Date | string | null
    actualDuration?: IntNullableFilter<"KitExecution"> | number | null
    completed?: BoolFilter<"KitExecution"> | boolean
    createdAt?: DateTimeFilter<"KitExecution"> | Date | string
    updatedAt?: DateTimeFilter<"KitExecution"> | Date | string
    jobProgress?: XOR<JobProgressScalarRelationFilter, JobProgressWhereInput>
    stepExecutions?: StepExecutionListRelationFilter
  }

  export type KitExecutionOrderByWithRelationInput = {
    id?: SortOrder
    jobProgressId?: SortOrder
    kitNumber?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    actualDuration?: SortOrderInput | SortOrder
    completed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    jobProgress?: JobProgressOrderByWithRelationInput
    stepExecutions?: StepExecutionOrderByRelationAggregateInput
  }

  export type KitExecutionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: KitExecutionWhereInput | KitExecutionWhereInput[]
    OR?: KitExecutionWhereInput[]
    NOT?: KitExecutionWhereInput | KitExecutionWhereInput[]
    jobProgressId?: StringFilter<"KitExecution"> | string
    kitNumber?: IntFilter<"KitExecution"> | number
    startTime?: DateTimeFilter<"KitExecution"> | Date | string
    endTime?: DateTimeNullableFilter<"KitExecution"> | Date | string | null
    actualDuration?: IntNullableFilter<"KitExecution"> | number | null
    completed?: BoolFilter<"KitExecution"> | boolean
    createdAt?: DateTimeFilter<"KitExecution"> | Date | string
    updatedAt?: DateTimeFilter<"KitExecution"> | Date | string
    jobProgress?: XOR<JobProgressScalarRelationFilter, JobProgressWhereInput>
    stepExecutions?: StepExecutionListRelationFilter
  }, "id">

  export type KitExecutionOrderByWithAggregationInput = {
    id?: SortOrder
    jobProgressId?: SortOrder
    kitNumber?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    actualDuration?: SortOrderInput | SortOrder
    completed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: KitExecutionCountOrderByAggregateInput
    _avg?: KitExecutionAvgOrderByAggregateInput
    _max?: KitExecutionMaxOrderByAggregateInput
    _min?: KitExecutionMinOrderByAggregateInput
    _sum?: KitExecutionSumOrderByAggregateInput
  }

  export type KitExecutionScalarWhereWithAggregatesInput = {
    AND?: KitExecutionScalarWhereWithAggregatesInput | KitExecutionScalarWhereWithAggregatesInput[]
    OR?: KitExecutionScalarWhereWithAggregatesInput[]
    NOT?: KitExecutionScalarWhereWithAggregatesInput | KitExecutionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"KitExecution"> | string
    jobProgressId?: StringWithAggregatesFilter<"KitExecution"> | string
    kitNumber?: IntWithAggregatesFilter<"KitExecution"> | number
    startTime?: DateTimeWithAggregatesFilter<"KitExecution"> | Date | string
    endTime?: DateTimeNullableWithAggregatesFilter<"KitExecution"> | Date | string | null
    actualDuration?: IntNullableWithAggregatesFilter<"KitExecution"> | number | null
    completed?: BoolWithAggregatesFilter<"KitExecution"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"KitExecution"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"KitExecution"> | Date | string
  }

  export type StepExecutionWhereInput = {
    AND?: StepExecutionWhereInput | StepExecutionWhereInput[]
    OR?: StepExecutionWhereInput[]
    NOT?: StepExecutionWhereInput | StepExecutionWhereInput[]
    id?: StringFilter<"StepExecution"> | string
    kitExecutionId?: StringFilter<"StepExecution"> | string
    routeStepId?: StringFilter<"StepExecution"> | string
    startTime?: DateTimeFilter<"StepExecution"> | Date | string
    endTime?: DateTimeNullableFilter<"StepExecution"> | Date | string | null
    actualDuration?: IntNullableFilter<"StepExecution"> | number | null
    completed?: BoolFilter<"StepExecution"> | boolean
    createdAt?: DateTimeFilter<"StepExecution"> | Date | string
    updatedAt?: DateTimeFilter<"StepExecution"> | Date | string
    kitExecution?: XOR<KitExecutionScalarRelationFilter, KitExecutionWhereInput>
    routeStep?: XOR<RouteStepScalarRelationFilter, RouteStepWhereInput>
  }

  export type StepExecutionOrderByWithRelationInput = {
    id?: SortOrder
    kitExecutionId?: SortOrder
    routeStepId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    actualDuration?: SortOrderInput | SortOrder
    completed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    kitExecution?: KitExecutionOrderByWithRelationInput
    routeStep?: RouteStepOrderByWithRelationInput
  }

  export type StepExecutionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StepExecutionWhereInput | StepExecutionWhereInput[]
    OR?: StepExecutionWhereInput[]
    NOT?: StepExecutionWhereInput | StepExecutionWhereInput[]
    kitExecutionId?: StringFilter<"StepExecution"> | string
    routeStepId?: StringFilter<"StepExecution"> | string
    startTime?: DateTimeFilter<"StepExecution"> | Date | string
    endTime?: DateTimeNullableFilter<"StepExecution"> | Date | string | null
    actualDuration?: IntNullableFilter<"StepExecution"> | number | null
    completed?: BoolFilter<"StepExecution"> | boolean
    createdAt?: DateTimeFilter<"StepExecution"> | Date | string
    updatedAt?: DateTimeFilter<"StepExecution"> | Date | string
    kitExecution?: XOR<KitExecutionScalarRelationFilter, KitExecutionWhereInput>
    routeStep?: XOR<RouteStepScalarRelationFilter, RouteStepWhereInput>
  }, "id">

  export type StepExecutionOrderByWithAggregationInput = {
    id?: SortOrder
    kitExecutionId?: SortOrder
    routeStepId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    actualDuration?: SortOrderInput | SortOrder
    completed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StepExecutionCountOrderByAggregateInput
    _avg?: StepExecutionAvgOrderByAggregateInput
    _max?: StepExecutionMaxOrderByAggregateInput
    _min?: StepExecutionMinOrderByAggregateInput
    _sum?: StepExecutionSumOrderByAggregateInput
  }

  export type StepExecutionScalarWhereWithAggregatesInput = {
    AND?: StepExecutionScalarWhereWithAggregatesInput | StepExecutionScalarWhereWithAggregatesInput[]
    OR?: StepExecutionScalarWhereWithAggregatesInput[]
    NOT?: StepExecutionScalarWhereWithAggregatesInput | StepExecutionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StepExecution"> | string
    kitExecutionId?: StringWithAggregatesFilter<"StepExecution"> | string
    routeStepId?: StringWithAggregatesFilter<"StepExecution"> | string
    startTime?: DateTimeWithAggregatesFilter<"StepExecution"> | Date | string
    endTime?: DateTimeNullableWithAggregatesFilter<"StepExecution"> | Date | string | null
    actualDuration?: IntNullableWithAggregatesFilter<"StepExecution"> | number | null
    completed?: BoolWithAggregatesFilter<"StepExecution"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"StepExecution"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"StepExecution"> | Date | string
  }

  export type JobAnalyticsWhereInput = {
    AND?: JobAnalyticsWhereInput | JobAnalyticsWhereInput[]
    OR?: JobAnalyticsWhereInput[]
    NOT?: JobAnalyticsWhereInput | JobAnalyticsWhereInput[]
    id?: StringFilter<"JobAnalytics"> | string
    jobId?: StringFilter<"JobAnalytics"> | string
    totalExpectedTime?: IntFilter<"JobAnalytics"> | number
    totalActualTime?: IntNullableFilter<"JobAnalytics"> | number | null
    efficiencyPercent?: FloatNullableFilter<"JobAnalytics"> | number | null
    avgKitTime?: FloatNullableFilter<"JobAnalytics"> | number | null
    fastestKitTime?: IntNullableFilter<"JobAnalytics"> | number | null
    slowestKitTime?: IntNullableFilter<"JobAnalytics"> | number | null
    stepAnalytics?: JsonNullableFilter<"JobAnalytics">
    timeVariance?: FloatNullableFilter<"JobAnalytics"> | number | null
    consistencyScore?: FloatNullableFilter<"JobAnalytics"> | number | null
    onTimeCompletion?: BoolNullableFilter<"JobAnalytics"> | boolean | null
    qualityIssues?: IntFilter<"JobAnalytics"> | number
    lastCalculated?: DateTimeFilter<"JobAnalytics"> | Date | string
    createdAt?: DateTimeFilter<"JobAnalytics"> | Date | string
    updatedAt?: DateTimeFilter<"JobAnalytics"> | Date | string
    kittingJob?: XOR<KittingJobScalarRelationFilter, KittingJobWhereInput>
  }

  export type JobAnalyticsOrderByWithRelationInput = {
    id?: SortOrder
    jobId?: SortOrder
    totalExpectedTime?: SortOrder
    totalActualTime?: SortOrderInput | SortOrder
    efficiencyPercent?: SortOrderInput | SortOrder
    avgKitTime?: SortOrderInput | SortOrder
    fastestKitTime?: SortOrderInput | SortOrder
    slowestKitTime?: SortOrderInput | SortOrder
    stepAnalytics?: SortOrderInput | SortOrder
    timeVariance?: SortOrderInput | SortOrder
    consistencyScore?: SortOrderInput | SortOrder
    onTimeCompletion?: SortOrderInput | SortOrder
    qualityIssues?: SortOrder
    lastCalculated?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    kittingJob?: KittingJobOrderByWithRelationInput
  }

  export type JobAnalyticsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    jobId?: string
    AND?: JobAnalyticsWhereInput | JobAnalyticsWhereInput[]
    OR?: JobAnalyticsWhereInput[]
    NOT?: JobAnalyticsWhereInput | JobAnalyticsWhereInput[]
    totalExpectedTime?: IntFilter<"JobAnalytics"> | number
    totalActualTime?: IntNullableFilter<"JobAnalytics"> | number | null
    efficiencyPercent?: FloatNullableFilter<"JobAnalytics"> | number | null
    avgKitTime?: FloatNullableFilter<"JobAnalytics"> | number | null
    fastestKitTime?: IntNullableFilter<"JobAnalytics"> | number | null
    slowestKitTime?: IntNullableFilter<"JobAnalytics"> | number | null
    stepAnalytics?: JsonNullableFilter<"JobAnalytics">
    timeVariance?: FloatNullableFilter<"JobAnalytics"> | number | null
    consistencyScore?: FloatNullableFilter<"JobAnalytics"> | number | null
    onTimeCompletion?: BoolNullableFilter<"JobAnalytics"> | boolean | null
    qualityIssues?: IntFilter<"JobAnalytics"> | number
    lastCalculated?: DateTimeFilter<"JobAnalytics"> | Date | string
    createdAt?: DateTimeFilter<"JobAnalytics"> | Date | string
    updatedAt?: DateTimeFilter<"JobAnalytics"> | Date | string
    kittingJob?: XOR<KittingJobScalarRelationFilter, KittingJobWhereInput>
  }, "id" | "jobId">

  export type JobAnalyticsOrderByWithAggregationInput = {
    id?: SortOrder
    jobId?: SortOrder
    totalExpectedTime?: SortOrder
    totalActualTime?: SortOrderInput | SortOrder
    efficiencyPercent?: SortOrderInput | SortOrder
    avgKitTime?: SortOrderInput | SortOrder
    fastestKitTime?: SortOrderInput | SortOrder
    slowestKitTime?: SortOrderInput | SortOrder
    stepAnalytics?: SortOrderInput | SortOrder
    timeVariance?: SortOrderInput | SortOrder
    consistencyScore?: SortOrderInput | SortOrder
    onTimeCompletion?: SortOrderInput | SortOrder
    qualityIssues?: SortOrder
    lastCalculated?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: JobAnalyticsCountOrderByAggregateInput
    _avg?: JobAnalyticsAvgOrderByAggregateInput
    _max?: JobAnalyticsMaxOrderByAggregateInput
    _min?: JobAnalyticsMinOrderByAggregateInput
    _sum?: JobAnalyticsSumOrderByAggregateInput
  }

  export type JobAnalyticsScalarWhereWithAggregatesInput = {
    AND?: JobAnalyticsScalarWhereWithAggregatesInput | JobAnalyticsScalarWhereWithAggregatesInput[]
    OR?: JobAnalyticsScalarWhereWithAggregatesInput[]
    NOT?: JobAnalyticsScalarWhereWithAggregatesInput | JobAnalyticsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"JobAnalytics"> | string
    jobId?: StringWithAggregatesFilter<"JobAnalytics"> | string
    totalExpectedTime?: IntWithAggregatesFilter<"JobAnalytics"> | number
    totalActualTime?: IntNullableWithAggregatesFilter<"JobAnalytics"> | number | null
    efficiencyPercent?: FloatNullableWithAggregatesFilter<"JobAnalytics"> | number | null
    avgKitTime?: FloatNullableWithAggregatesFilter<"JobAnalytics"> | number | null
    fastestKitTime?: IntNullableWithAggregatesFilter<"JobAnalytics"> | number | null
    slowestKitTime?: IntNullableWithAggregatesFilter<"JobAnalytics"> | number | null
    stepAnalytics?: JsonNullableWithAggregatesFilter<"JobAnalytics">
    timeVariance?: FloatNullableWithAggregatesFilter<"JobAnalytics"> | number | null
    consistencyScore?: FloatNullableWithAggregatesFilter<"JobAnalytics"> | number | null
    onTimeCompletion?: BoolNullableWithAggregatesFilter<"JobAnalytics"> | boolean | null
    qualityIssues?: IntWithAggregatesFilter<"JobAnalytics"> | number
    lastCalculated?: DateTimeWithAggregatesFilter<"JobAnalytics"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"JobAnalytics"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"JobAnalytics"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    workCenterId?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    workCenter?: XOR<WorkCenterNullableScalarRelationFilter, WorkCenterWhereInput> | null
    assignedJobs?: JobAssignmentListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    role?: SortOrder
    workCenterId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workCenter?: WorkCenterOrderByWithRelationInput
    assignedJobs?: JobAssignmentOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    workCenterId?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    workCenter?: XOR<WorkCenterNullableScalarRelationFilter, WorkCenterWhereInput> | null
    assignedJobs?: JobAssignmentListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    role?: SortOrder
    workCenterId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    workCenterId?: StringNullableWithAggregatesFilter<"User"> | string | null
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type WorkCenterWhereInput = {
    AND?: WorkCenterWhereInput | WorkCenterWhereInput[]
    OR?: WorkCenterWhereInput[]
    NOT?: WorkCenterWhereInput | WorkCenterWhereInput[]
    id?: StringFilter<"WorkCenter"> | string
    name?: StringFilter<"WorkCenter"> | string
    description?: StringNullableFilter<"WorkCenter"> | string | null
    isActive?: BoolFilter<"WorkCenter"> | boolean
    createdAt?: DateTimeFilter<"WorkCenter"> | Date | string
    updatedAt?: DateTimeFilter<"WorkCenter"> | Date | string
    users?: UserListRelationFilter
    jobProgress?: JobProgressListRelationFilter
  }

  export type WorkCenterOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    users?: UserOrderByRelationAggregateInput
    jobProgress?: JobProgressOrderByRelationAggregateInput
  }

  export type WorkCenterWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkCenterWhereInput | WorkCenterWhereInput[]
    OR?: WorkCenterWhereInput[]
    NOT?: WorkCenterWhereInput | WorkCenterWhereInput[]
    name?: StringFilter<"WorkCenter"> | string
    description?: StringNullableFilter<"WorkCenter"> | string | null
    isActive?: BoolFilter<"WorkCenter"> | boolean
    createdAt?: DateTimeFilter<"WorkCenter"> | Date | string
    updatedAt?: DateTimeFilter<"WorkCenter"> | Date | string
    users?: UserListRelationFilter
    jobProgress?: JobProgressListRelationFilter
  }, "id">

  export type WorkCenterOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WorkCenterCountOrderByAggregateInput
    _max?: WorkCenterMaxOrderByAggregateInput
    _min?: WorkCenterMinOrderByAggregateInput
  }

  export type WorkCenterScalarWhereWithAggregatesInput = {
    AND?: WorkCenterScalarWhereWithAggregatesInput | WorkCenterScalarWhereWithAggregatesInput[]
    OR?: WorkCenterScalarWhereWithAggregatesInput[]
    NOT?: WorkCenterScalarWhereWithAggregatesInput | WorkCenterScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkCenter"> | string
    name?: StringWithAggregatesFilter<"WorkCenter"> | string
    description?: StringNullableWithAggregatesFilter<"WorkCenter"> | string | null
    isActive?: BoolWithAggregatesFilter<"WorkCenter"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"WorkCenter"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WorkCenter"> | Date | string
  }

  export type JobAssignmentWhereInput = {
    AND?: JobAssignmentWhereInput | JobAssignmentWhereInput[]
    OR?: JobAssignmentWhereInput[]
    NOT?: JobAssignmentWhereInput | JobAssignmentWhereInput[]
    id?: StringFilter<"JobAssignment"> | string
    jobId?: StringFilter<"JobAssignment"> | string
    userId?: StringFilter<"JobAssignment"> | string
    assignedAt?: DateTimeFilter<"JobAssignment"> | Date | string
    assignedBy?: StringFilter<"JobAssignment"> | string
    isActive?: BoolFilter<"JobAssignment"> | boolean
    createdAt?: DateTimeFilter<"JobAssignment"> | Date | string
    updatedAt?: DateTimeFilter<"JobAssignment"> | Date | string
    job?: XOR<KittingJobScalarRelationFilter, KittingJobWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type JobAssignmentOrderByWithRelationInput = {
    id?: SortOrder
    jobId?: SortOrder
    userId?: SortOrder
    assignedAt?: SortOrder
    assignedBy?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    job?: KittingJobOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type JobAssignmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    jobId_userId?: JobAssignmentJobIdUserIdCompoundUniqueInput
    AND?: JobAssignmentWhereInput | JobAssignmentWhereInput[]
    OR?: JobAssignmentWhereInput[]
    NOT?: JobAssignmentWhereInput | JobAssignmentWhereInput[]
    jobId?: StringFilter<"JobAssignment"> | string
    userId?: StringFilter<"JobAssignment"> | string
    assignedAt?: DateTimeFilter<"JobAssignment"> | Date | string
    assignedBy?: StringFilter<"JobAssignment"> | string
    isActive?: BoolFilter<"JobAssignment"> | boolean
    createdAt?: DateTimeFilter<"JobAssignment"> | Date | string
    updatedAt?: DateTimeFilter<"JobAssignment"> | Date | string
    job?: XOR<KittingJobScalarRelationFilter, KittingJobWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "jobId_userId">

  export type JobAssignmentOrderByWithAggregationInput = {
    id?: SortOrder
    jobId?: SortOrder
    userId?: SortOrder
    assignedAt?: SortOrder
    assignedBy?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: JobAssignmentCountOrderByAggregateInput
    _max?: JobAssignmentMaxOrderByAggregateInput
    _min?: JobAssignmentMinOrderByAggregateInput
  }

  export type JobAssignmentScalarWhereWithAggregatesInput = {
    AND?: JobAssignmentScalarWhereWithAggregatesInput | JobAssignmentScalarWhereWithAggregatesInput[]
    OR?: JobAssignmentScalarWhereWithAggregatesInput[]
    NOT?: JobAssignmentScalarWhereWithAggregatesInput | JobAssignmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"JobAssignment"> | string
    jobId?: StringWithAggregatesFilter<"JobAssignment"> | string
    userId?: StringWithAggregatesFilter<"JobAssignment"> | string
    assignedAt?: DateTimeWithAggregatesFilter<"JobAssignment"> | Date | string
    assignedBy?: StringWithAggregatesFilter<"JobAssignment"> | string
    isActive?: BoolWithAggregatesFilter<"JobAssignment"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"JobAssignment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"JobAssignment"> | Date | string
  }

  export type KittingJobCreateInput = {
    id?: string
    customerName: string
    jobNumber: string
    dueDate: Date | string
    orderedQuantity: number
    runLength: number
    customerSpec?: string | null
    description: string
    setup: number
    makeReady: number
    takeDown: number
    expectedKitDuration: number
    expectedJobDuration: number
    scheduledDate?: Date | string | null
    scheduledStartTime?: string | null
    status?: $Enums.JobStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    routeSteps?: RouteStepCreateNestedManyWithoutKittingJobInput
    jobProgress?: JobProgressCreateNestedOneWithoutKittingJobInput
    analytics?: JobAnalyticsCreateNestedOneWithoutKittingJobInput
    assignments?: JobAssignmentCreateNestedManyWithoutJobInput
  }

  export type KittingJobUncheckedCreateInput = {
    id?: string
    customerName: string
    jobNumber: string
    dueDate: Date | string
    orderedQuantity: number
    runLength: number
    customerSpec?: string | null
    description: string
    setup: number
    makeReady: number
    takeDown: number
    expectedKitDuration: number
    expectedJobDuration: number
    scheduledDate?: Date | string | null
    scheduledStartTime?: string | null
    status?: $Enums.JobStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    routeSteps?: RouteStepUncheckedCreateNestedManyWithoutKittingJobInput
    jobProgress?: JobProgressUncheckedCreateNestedOneWithoutKittingJobInput
    analytics?: JobAnalyticsUncheckedCreateNestedOneWithoutKittingJobInput
    assignments?: JobAssignmentUncheckedCreateNestedManyWithoutJobInput
  }

  export type KittingJobUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerName?: StringFieldUpdateOperationsInput | string
    jobNumber?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    orderedQuantity?: IntFieldUpdateOperationsInput | number
    runLength?: IntFieldUpdateOperationsInput | number
    customerSpec?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    setup?: IntFieldUpdateOperationsInput | number
    makeReady?: IntFieldUpdateOperationsInput | number
    takeDown?: IntFieldUpdateOperationsInput | number
    expectedKitDuration?: IntFieldUpdateOperationsInput | number
    expectedJobDuration?: IntFieldUpdateOperationsInput | number
    scheduledDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledStartTime?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    routeSteps?: RouteStepUpdateManyWithoutKittingJobNestedInput
    jobProgress?: JobProgressUpdateOneWithoutKittingJobNestedInput
    analytics?: JobAnalyticsUpdateOneWithoutKittingJobNestedInput
    assignments?: JobAssignmentUpdateManyWithoutJobNestedInput
  }

  export type KittingJobUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerName?: StringFieldUpdateOperationsInput | string
    jobNumber?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    orderedQuantity?: IntFieldUpdateOperationsInput | number
    runLength?: IntFieldUpdateOperationsInput | number
    customerSpec?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    setup?: IntFieldUpdateOperationsInput | number
    makeReady?: IntFieldUpdateOperationsInput | number
    takeDown?: IntFieldUpdateOperationsInput | number
    expectedKitDuration?: IntFieldUpdateOperationsInput | number
    expectedJobDuration?: IntFieldUpdateOperationsInput | number
    scheduledDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledStartTime?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    routeSteps?: RouteStepUncheckedUpdateManyWithoutKittingJobNestedInput
    jobProgress?: JobProgressUncheckedUpdateOneWithoutKittingJobNestedInput
    analytics?: JobAnalyticsUncheckedUpdateOneWithoutKittingJobNestedInput
    assignments?: JobAssignmentUncheckedUpdateManyWithoutJobNestedInput
  }

  export type KittingJobCreateManyInput = {
    id?: string
    customerName: string
    jobNumber: string
    dueDate: Date | string
    orderedQuantity: number
    runLength: number
    customerSpec?: string | null
    description: string
    setup: number
    makeReady: number
    takeDown: number
    expectedKitDuration: number
    expectedJobDuration: number
    scheduledDate?: Date | string | null
    scheduledStartTime?: string | null
    status?: $Enums.JobStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KittingJobUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerName?: StringFieldUpdateOperationsInput | string
    jobNumber?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    orderedQuantity?: IntFieldUpdateOperationsInput | number
    runLength?: IntFieldUpdateOperationsInput | number
    customerSpec?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    setup?: IntFieldUpdateOperationsInput | number
    makeReady?: IntFieldUpdateOperationsInput | number
    takeDown?: IntFieldUpdateOperationsInput | number
    expectedKitDuration?: IntFieldUpdateOperationsInput | number
    expectedJobDuration?: IntFieldUpdateOperationsInput | number
    scheduledDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledStartTime?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KittingJobUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerName?: StringFieldUpdateOperationsInput | string
    jobNumber?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    orderedQuantity?: IntFieldUpdateOperationsInput | number
    runLength?: IntFieldUpdateOperationsInput | number
    customerSpec?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    setup?: IntFieldUpdateOperationsInput | number
    makeReady?: IntFieldUpdateOperationsInput | number
    takeDown?: IntFieldUpdateOperationsInput | number
    expectedKitDuration?: IntFieldUpdateOperationsInput | number
    expectedJobDuration?: IntFieldUpdateOperationsInput | number
    scheduledDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledStartTime?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RouteStepCreateInput = {
    id?: string
    name: string
    expectedSeconds: number
    order: number
    instructionType?: $Enums.InstructionType
    instructionUrl?: string | null
    instructionText?: string | null
    autoLoop?: boolean
    kittingJob: KittingJobCreateNestedOneWithoutRouteStepsInput
    stepExecutions?: StepExecutionCreateNestedManyWithoutRouteStepInput
  }

  export type RouteStepUncheckedCreateInput = {
    id?: string
    name: string
    expectedSeconds: number
    order: number
    instructionType?: $Enums.InstructionType
    instructionUrl?: string | null
    instructionText?: string | null
    autoLoop?: boolean
    kittingJobId: string
    stepExecutions?: StepExecutionUncheckedCreateNestedManyWithoutRouteStepInput
  }

  export type RouteStepUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    expectedSeconds?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    instructionType?: EnumInstructionTypeFieldUpdateOperationsInput | $Enums.InstructionType
    instructionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instructionText?: NullableStringFieldUpdateOperationsInput | string | null
    autoLoop?: BoolFieldUpdateOperationsInput | boolean
    kittingJob?: KittingJobUpdateOneRequiredWithoutRouteStepsNestedInput
    stepExecutions?: StepExecutionUpdateManyWithoutRouteStepNestedInput
  }

  export type RouteStepUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    expectedSeconds?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    instructionType?: EnumInstructionTypeFieldUpdateOperationsInput | $Enums.InstructionType
    instructionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instructionText?: NullableStringFieldUpdateOperationsInput | string | null
    autoLoop?: BoolFieldUpdateOperationsInput | boolean
    kittingJobId?: StringFieldUpdateOperationsInput | string
    stepExecutions?: StepExecutionUncheckedUpdateManyWithoutRouteStepNestedInput
  }

  export type RouteStepCreateManyInput = {
    id?: string
    name: string
    expectedSeconds: number
    order: number
    instructionType?: $Enums.InstructionType
    instructionUrl?: string | null
    instructionText?: string | null
    autoLoop?: boolean
    kittingJobId: string
  }

  export type RouteStepUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    expectedSeconds?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    instructionType?: EnumInstructionTypeFieldUpdateOperationsInput | $Enums.InstructionType
    instructionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instructionText?: NullableStringFieldUpdateOperationsInput | string | null
    autoLoop?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RouteStepUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    expectedSeconds?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    instructionType?: EnumInstructionTypeFieldUpdateOperationsInput | $Enums.InstructionType
    instructionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instructionText?: NullableStringFieldUpdateOperationsInput | string | null
    autoLoop?: BoolFieldUpdateOperationsInput | boolean
    kittingJobId?: StringFieldUpdateOperationsInput | string
  }

  export type JobProgressCreateInput = {
    id?: string
    startTime?: Date | string | null
    endTime?: Date | string | null
    actualJobDuration?: number | null
    completedKits?: number
    remainingKits: number
    currentKitNumber?: number | null
    isActive?: boolean
    pausedTime?: number
    assignedWorker?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    kittingJob: KittingJobCreateNestedOneWithoutJobProgressInput
    workCenter?: WorkCenterCreateNestedOneWithoutJobProgressInput
    kitExecutions?: KitExecutionCreateNestedManyWithoutJobProgressInput
  }

  export type JobProgressUncheckedCreateInput = {
    id?: string
    jobId: string
    startTime?: Date | string | null
    endTime?: Date | string | null
    actualJobDuration?: number | null
    completedKits?: number
    remainingKits: number
    currentKitNumber?: number | null
    isActive?: boolean
    pausedTime?: number
    workCenterId?: string | null
    assignedWorker?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    kitExecutions?: KitExecutionUncheckedCreateNestedManyWithoutJobProgressInput
  }

  export type JobProgressUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualJobDuration?: NullableIntFieldUpdateOperationsInput | number | null
    completedKits?: IntFieldUpdateOperationsInput | number
    remainingKits?: IntFieldUpdateOperationsInput | number
    currentKitNumber?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    pausedTime?: IntFieldUpdateOperationsInput | number
    assignedWorker?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kittingJob?: KittingJobUpdateOneRequiredWithoutJobProgressNestedInput
    workCenter?: WorkCenterUpdateOneWithoutJobProgressNestedInput
    kitExecutions?: KitExecutionUpdateManyWithoutJobProgressNestedInput
  }

  export type JobProgressUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualJobDuration?: NullableIntFieldUpdateOperationsInput | number | null
    completedKits?: IntFieldUpdateOperationsInput | number
    remainingKits?: IntFieldUpdateOperationsInput | number
    currentKitNumber?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    pausedTime?: IntFieldUpdateOperationsInput | number
    workCenterId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedWorker?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kitExecutions?: KitExecutionUncheckedUpdateManyWithoutJobProgressNestedInput
  }

  export type JobProgressCreateManyInput = {
    id?: string
    jobId: string
    startTime?: Date | string | null
    endTime?: Date | string | null
    actualJobDuration?: number | null
    completedKits?: number
    remainingKits: number
    currentKitNumber?: number | null
    isActive?: boolean
    pausedTime?: number
    workCenterId?: string | null
    assignedWorker?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobProgressUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualJobDuration?: NullableIntFieldUpdateOperationsInput | number | null
    completedKits?: IntFieldUpdateOperationsInput | number
    remainingKits?: IntFieldUpdateOperationsInput | number
    currentKitNumber?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    pausedTime?: IntFieldUpdateOperationsInput | number
    assignedWorker?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobProgressUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualJobDuration?: NullableIntFieldUpdateOperationsInput | number | null
    completedKits?: IntFieldUpdateOperationsInput | number
    remainingKits?: IntFieldUpdateOperationsInput | number
    currentKitNumber?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    pausedTime?: IntFieldUpdateOperationsInput | number
    workCenterId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedWorker?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KitExecutionCreateInput = {
    id?: string
    kitNumber: number
    startTime: Date | string
    endTime?: Date | string | null
    actualDuration?: number | null
    completed?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    jobProgress: JobProgressCreateNestedOneWithoutKitExecutionsInput
    stepExecutions?: StepExecutionCreateNestedManyWithoutKitExecutionInput
  }

  export type KitExecutionUncheckedCreateInput = {
    id?: string
    jobProgressId: string
    kitNumber: number
    startTime: Date | string
    endTime?: Date | string | null
    actualDuration?: number | null
    completed?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    stepExecutions?: StepExecutionUncheckedCreateNestedManyWithoutKitExecutionInput
  }

  export type KitExecutionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    kitNumber?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobProgress?: JobProgressUpdateOneRequiredWithoutKitExecutionsNestedInput
    stepExecutions?: StepExecutionUpdateManyWithoutKitExecutionNestedInput
  }

  export type KitExecutionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobProgressId?: StringFieldUpdateOperationsInput | string
    kitNumber?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stepExecutions?: StepExecutionUncheckedUpdateManyWithoutKitExecutionNestedInput
  }

  export type KitExecutionCreateManyInput = {
    id?: string
    jobProgressId: string
    kitNumber: number
    startTime: Date | string
    endTime?: Date | string | null
    actualDuration?: number | null
    completed?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KitExecutionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    kitNumber?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KitExecutionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobProgressId?: StringFieldUpdateOperationsInput | string
    kitNumber?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StepExecutionCreateInput = {
    id?: string
    startTime: Date | string
    endTime?: Date | string | null
    actualDuration?: number | null
    completed?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    kitExecution: KitExecutionCreateNestedOneWithoutStepExecutionsInput
    routeStep: RouteStepCreateNestedOneWithoutStepExecutionsInput
  }

  export type StepExecutionUncheckedCreateInput = {
    id?: string
    kitExecutionId: string
    routeStepId: string
    startTime: Date | string
    endTime?: Date | string | null
    actualDuration?: number | null
    completed?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StepExecutionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kitExecution?: KitExecutionUpdateOneRequiredWithoutStepExecutionsNestedInput
    routeStep?: RouteStepUpdateOneRequiredWithoutStepExecutionsNestedInput
  }

  export type StepExecutionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    kitExecutionId?: StringFieldUpdateOperationsInput | string
    routeStepId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StepExecutionCreateManyInput = {
    id?: string
    kitExecutionId: string
    routeStepId: string
    startTime: Date | string
    endTime?: Date | string | null
    actualDuration?: number | null
    completed?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StepExecutionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StepExecutionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    kitExecutionId?: StringFieldUpdateOperationsInput | string
    routeStepId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobAnalyticsCreateInput = {
    id?: string
    totalExpectedTime: number
    totalActualTime?: number | null
    efficiencyPercent?: number | null
    avgKitTime?: number | null
    fastestKitTime?: number | null
    slowestKitTime?: number | null
    stepAnalytics?: NullableJsonNullValueInput | InputJsonValue
    timeVariance?: number | null
    consistencyScore?: number | null
    onTimeCompletion?: boolean | null
    qualityIssues?: number
    lastCalculated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    kittingJob: KittingJobCreateNestedOneWithoutAnalyticsInput
  }

  export type JobAnalyticsUncheckedCreateInput = {
    id?: string
    jobId: string
    totalExpectedTime: number
    totalActualTime?: number | null
    efficiencyPercent?: number | null
    avgKitTime?: number | null
    fastestKitTime?: number | null
    slowestKitTime?: number | null
    stepAnalytics?: NullableJsonNullValueInput | InputJsonValue
    timeVariance?: number | null
    consistencyScore?: number | null
    onTimeCompletion?: boolean | null
    qualityIssues?: number
    lastCalculated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobAnalyticsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalExpectedTime?: IntFieldUpdateOperationsInput | number
    totalActualTime?: NullableIntFieldUpdateOperationsInput | number | null
    efficiencyPercent?: NullableFloatFieldUpdateOperationsInput | number | null
    avgKitTime?: NullableFloatFieldUpdateOperationsInput | number | null
    fastestKitTime?: NullableIntFieldUpdateOperationsInput | number | null
    slowestKitTime?: NullableIntFieldUpdateOperationsInput | number | null
    stepAnalytics?: NullableJsonNullValueInput | InputJsonValue
    timeVariance?: NullableFloatFieldUpdateOperationsInput | number | null
    consistencyScore?: NullableFloatFieldUpdateOperationsInput | number | null
    onTimeCompletion?: NullableBoolFieldUpdateOperationsInput | boolean | null
    qualityIssues?: IntFieldUpdateOperationsInput | number
    lastCalculated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kittingJob?: KittingJobUpdateOneRequiredWithoutAnalyticsNestedInput
  }

  export type JobAnalyticsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    totalExpectedTime?: IntFieldUpdateOperationsInput | number
    totalActualTime?: NullableIntFieldUpdateOperationsInput | number | null
    efficiencyPercent?: NullableFloatFieldUpdateOperationsInput | number | null
    avgKitTime?: NullableFloatFieldUpdateOperationsInput | number | null
    fastestKitTime?: NullableIntFieldUpdateOperationsInput | number | null
    slowestKitTime?: NullableIntFieldUpdateOperationsInput | number | null
    stepAnalytics?: NullableJsonNullValueInput | InputJsonValue
    timeVariance?: NullableFloatFieldUpdateOperationsInput | number | null
    consistencyScore?: NullableFloatFieldUpdateOperationsInput | number | null
    onTimeCompletion?: NullableBoolFieldUpdateOperationsInput | boolean | null
    qualityIssues?: IntFieldUpdateOperationsInput | number
    lastCalculated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobAnalyticsCreateManyInput = {
    id?: string
    jobId: string
    totalExpectedTime: number
    totalActualTime?: number | null
    efficiencyPercent?: number | null
    avgKitTime?: number | null
    fastestKitTime?: number | null
    slowestKitTime?: number | null
    stepAnalytics?: NullableJsonNullValueInput | InputJsonValue
    timeVariance?: number | null
    consistencyScore?: number | null
    onTimeCompletion?: boolean | null
    qualityIssues?: number
    lastCalculated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobAnalyticsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalExpectedTime?: IntFieldUpdateOperationsInput | number
    totalActualTime?: NullableIntFieldUpdateOperationsInput | number | null
    efficiencyPercent?: NullableFloatFieldUpdateOperationsInput | number | null
    avgKitTime?: NullableFloatFieldUpdateOperationsInput | number | null
    fastestKitTime?: NullableIntFieldUpdateOperationsInput | number | null
    slowestKitTime?: NullableIntFieldUpdateOperationsInput | number | null
    stepAnalytics?: NullableJsonNullValueInput | InputJsonValue
    timeVariance?: NullableFloatFieldUpdateOperationsInput | number | null
    consistencyScore?: NullableFloatFieldUpdateOperationsInput | number | null
    onTimeCompletion?: NullableBoolFieldUpdateOperationsInput | boolean | null
    qualityIssues?: IntFieldUpdateOperationsInput | number
    lastCalculated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobAnalyticsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    totalExpectedTime?: IntFieldUpdateOperationsInput | number
    totalActualTime?: NullableIntFieldUpdateOperationsInput | number | null
    efficiencyPercent?: NullableFloatFieldUpdateOperationsInput | number | null
    avgKitTime?: NullableFloatFieldUpdateOperationsInput | number | null
    fastestKitTime?: NullableIntFieldUpdateOperationsInput | number | null
    slowestKitTime?: NullableIntFieldUpdateOperationsInput | number | null
    stepAnalytics?: NullableJsonNullValueInput | InputJsonValue
    timeVariance?: NullableFloatFieldUpdateOperationsInput | number | null
    consistencyScore?: NullableFloatFieldUpdateOperationsInput | number | null
    onTimeCompletion?: NullableBoolFieldUpdateOperationsInput | boolean | null
    qualityIssues?: IntFieldUpdateOperationsInput | number
    lastCalculated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    name: string
    email: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    workCenter?: WorkCenterCreateNestedOneWithoutUsersInput
    assignedJobs?: JobAssignmentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    role?: $Enums.UserRole
    workCenterId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedJobs?: JobAssignmentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workCenter?: WorkCenterUpdateOneWithoutUsersNestedInput
    assignedJobs?: JobAssignmentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    workCenterId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedJobs?: JobAssignmentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    email: string
    role?: $Enums.UserRole
    workCenterId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    workCenterId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkCenterCreateInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutWorkCenterInput
    jobProgress?: JobProgressCreateNestedManyWithoutWorkCenterInput
  }

  export type WorkCenterUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutWorkCenterInput
    jobProgress?: JobProgressUncheckedCreateNestedManyWithoutWorkCenterInput
  }

  export type WorkCenterUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutWorkCenterNestedInput
    jobProgress?: JobProgressUpdateManyWithoutWorkCenterNestedInput
  }

  export type WorkCenterUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutWorkCenterNestedInput
    jobProgress?: JobProgressUncheckedUpdateManyWithoutWorkCenterNestedInput
  }

  export type WorkCenterCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkCenterUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkCenterUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobAssignmentCreateInput = {
    id?: string
    assignedAt?: Date | string
    assignedBy: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    job: KittingJobCreateNestedOneWithoutAssignmentsInput
    user: UserCreateNestedOneWithoutAssignedJobsInput
  }

  export type JobAssignmentUncheckedCreateInput = {
    id?: string
    jobId: string
    userId: string
    assignedAt?: Date | string
    assignedBy: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobAssignmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: KittingJobUpdateOneRequiredWithoutAssignmentsNestedInput
    user?: UserUpdateOneRequiredWithoutAssignedJobsNestedInput
  }

  export type JobAssignmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobAssignmentCreateManyInput = {
    id?: string
    jobId: string
    userId: string
    assignedAt?: Date | string
    assignedBy: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobAssignmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobAssignmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumJobStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusFilter<$PrismaModel> | $Enums.JobStatus
  }

  export type RouteStepListRelationFilter = {
    every?: RouteStepWhereInput
    some?: RouteStepWhereInput
    none?: RouteStepWhereInput
  }

  export type JobProgressNullableScalarRelationFilter = {
    is?: JobProgressWhereInput | null
    isNot?: JobProgressWhereInput | null
  }

  export type JobAnalyticsNullableScalarRelationFilter = {
    is?: JobAnalyticsWhereInput | null
    isNot?: JobAnalyticsWhereInput | null
  }

  export type JobAssignmentListRelationFilter = {
    every?: JobAssignmentWhereInput
    some?: JobAssignmentWhereInput
    none?: JobAssignmentWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type RouteStepOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobAssignmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type KittingJobCountOrderByAggregateInput = {
    id?: SortOrder
    customerName?: SortOrder
    jobNumber?: SortOrder
    dueDate?: SortOrder
    orderedQuantity?: SortOrder
    runLength?: SortOrder
    customerSpec?: SortOrder
    description?: SortOrder
    setup?: SortOrder
    makeReady?: SortOrder
    takeDown?: SortOrder
    expectedKitDuration?: SortOrder
    expectedJobDuration?: SortOrder
    scheduledDate?: SortOrder
    scheduledStartTime?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KittingJobAvgOrderByAggregateInput = {
    orderedQuantity?: SortOrder
    runLength?: SortOrder
    setup?: SortOrder
    makeReady?: SortOrder
    takeDown?: SortOrder
    expectedKitDuration?: SortOrder
    expectedJobDuration?: SortOrder
  }

  export type KittingJobMaxOrderByAggregateInput = {
    id?: SortOrder
    customerName?: SortOrder
    jobNumber?: SortOrder
    dueDate?: SortOrder
    orderedQuantity?: SortOrder
    runLength?: SortOrder
    customerSpec?: SortOrder
    description?: SortOrder
    setup?: SortOrder
    makeReady?: SortOrder
    takeDown?: SortOrder
    expectedKitDuration?: SortOrder
    expectedJobDuration?: SortOrder
    scheduledDate?: SortOrder
    scheduledStartTime?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KittingJobMinOrderByAggregateInput = {
    id?: SortOrder
    customerName?: SortOrder
    jobNumber?: SortOrder
    dueDate?: SortOrder
    orderedQuantity?: SortOrder
    runLength?: SortOrder
    customerSpec?: SortOrder
    description?: SortOrder
    setup?: SortOrder
    makeReady?: SortOrder
    takeDown?: SortOrder
    expectedKitDuration?: SortOrder
    expectedJobDuration?: SortOrder
    scheduledDate?: SortOrder
    scheduledStartTime?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KittingJobSumOrderByAggregateInput = {
    orderedQuantity?: SortOrder
    runLength?: SortOrder
    setup?: SortOrder
    makeReady?: SortOrder
    takeDown?: SortOrder
    expectedKitDuration?: SortOrder
    expectedJobDuration?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumJobStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusWithAggregatesFilter<$PrismaModel> | $Enums.JobStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJobStatusFilter<$PrismaModel>
    _max?: NestedEnumJobStatusFilter<$PrismaModel>
  }

  export type EnumInstructionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.InstructionType | EnumInstructionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InstructionType[] | ListEnumInstructionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InstructionType[] | ListEnumInstructionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInstructionTypeFilter<$PrismaModel> | $Enums.InstructionType
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type KittingJobScalarRelationFilter = {
    is?: KittingJobWhereInput
    isNot?: KittingJobWhereInput
  }

  export type StepExecutionListRelationFilter = {
    every?: StepExecutionWhereInput
    some?: StepExecutionWhereInput
    none?: StepExecutionWhereInput
  }

  export type StepExecutionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RouteStepCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    expectedSeconds?: SortOrder
    order?: SortOrder
    instructionType?: SortOrder
    instructionUrl?: SortOrder
    instructionText?: SortOrder
    autoLoop?: SortOrder
    kittingJobId?: SortOrder
  }

  export type RouteStepAvgOrderByAggregateInput = {
    expectedSeconds?: SortOrder
    order?: SortOrder
  }

  export type RouteStepMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    expectedSeconds?: SortOrder
    order?: SortOrder
    instructionType?: SortOrder
    instructionUrl?: SortOrder
    instructionText?: SortOrder
    autoLoop?: SortOrder
    kittingJobId?: SortOrder
  }

  export type RouteStepMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    expectedSeconds?: SortOrder
    order?: SortOrder
    instructionType?: SortOrder
    instructionUrl?: SortOrder
    instructionText?: SortOrder
    autoLoop?: SortOrder
    kittingJobId?: SortOrder
  }

  export type RouteStepSumOrderByAggregateInput = {
    expectedSeconds?: SortOrder
    order?: SortOrder
  }

  export type EnumInstructionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InstructionType | EnumInstructionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InstructionType[] | ListEnumInstructionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InstructionType[] | ListEnumInstructionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInstructionTypeWithAggregatesFilter<$PrismaModel> | $Enums.InstructionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInstructionTypeFilter<$PrismaModel>
    _max?: NestedEnumInstructionTypeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type WorkCenterNullableScalarRelationFilter = {
    is?: WorkCenterWhereInput | null
    isNot?: WorkCenterWhereInput | null
  }

  export type KitExecutionListRelationFilter = {
    every?: KitExecutionWhereInput
    some?: KitExecutionWhereInput
    none?: KitExecutionWhereInput
  }

  export type KitExecutionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobProgressCountOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    actualJobDuration?: SortOrder
    completedKits?: SortOrder
    remainingKits?: SortOrder
    currentKitNumber?: SortOrder
    isActive?: SortOrder
    pausedTime?: SortOrder
    workCenterId?: SortOrder
    assignedWorker?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobProgressAvgOrderByAggregateInput = {
    actualJobDuration?: SortOrder
    completedKits?: SortOrder
    remainingKits?: SortOrder
    currentKitNumber?: SortOrder
    pausedTime?: SortOrder
  }

  export type JobProgressMaxOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    actualJobDuration?: SortOrder
    completedKits?: SortOrder
    remainingKits?: SortOrder
    currentKitNumber?: SortOrder
    isActive?: SortOrder
    pausedTime?: SortOrder
    workCenterId?: SortOrder
    assignedWorker?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobProgressMinOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    actualJobDuration?: SortOrder
    completedKits?: SortOrder
    remainingKits?: SortOrder
    currentKitNumber?: SortOrder
    isActive?: SortOrder
    pausedTime?: SortOrder
    workCenterId?: SortOrder
    assignedWorker?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobProgressSumOrderByAggregateInput = {
    actualJobDuration?: SortOrder
    completedKits?: SortOrder
    remainingKits?: SortOrder
    currentKitNumber?: SortOrder
    pausedTime?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type JobProgressScalarRelationFilter = {
    is?: JobProgressWhereInput
    isNot?: JobProgressWhereInput
  }

  export type KitExecutionCountOrderByAggregateInput = {
    id?: SortOrder
    jobProgressId?: SortOrder
    kitNumber?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    actualDuration?: SortOrder
    completed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KitExecutionAvgOrderByAggregateInput = {
    kitNumber?: SortOrder
    actualDuration?: SortOrder
  }

  export type KitExecutionMaxOrderByAggregateInput = {
    id?: SortOrder
    jobProgressId?: SortOrder
    kitNumber?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    actualDuration?: SortOrder
    completed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KitExecutionMinOrderByAggregateInput = {
    id?: SortOrder
    jobProgressId?: SortOrder
    kitNumber?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    actualDuration?: SortOrder
    completed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KitExecutionSumOrderByAggregateInput = {
    kitNumber?: SortOrder
    actualDuration?: SortOrder
  }

  export type KitExecutionScalarRelationFilter = {
    is?: KitExecutionWhereInput
    isNot?: KitExecutionWhereInput
  }

  export type RouteStepScalarRelationFilter = {
    is?: RouteStepWhereInput
    isNot?: RouteStepWhereInput
  }

  export type StepExecutionCountOrderByAggregateInput = {
    id?: SortOrder
    kitExecutionId?: SortOrder
    routeStepId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    actualDuration?: SortOrder
    completed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StepExecutionAvgOrderByAggregateInput = {
    actualDuration?: SortOrder
  }

  export type StepExecutionMaxOrderByAggregateInput = {
    id?: SortOrder
    kitExecutionId?: SortOrder
    routeStepId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    actualDuration?: SortOrder
    completed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StepExecutionMinOrderByAggregateInput = {
    id?: SortOrder
    kitExecutionId?: SortOrder
    routeStepId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    actualDuration?: SortOrder
    completed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StepExecutionSumOrderByAggregateInput = {
    actualDuration?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type JobAnalyticsCountOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    totalExpectedTime?: SortOrder
    totalActualTime?: SortOrder
    efficiencyPercent?: SortOrder
    avgKitTime?: SortOrder
    fastestKitTime?: SortOrder
    slowestKitTime?: SortOrder
    stepAnalytics?: SortOrder
    timeVariance?: SortOrder
    consistencyScore?: SortOrder
    onTimeCompletion?: SortOrder
    qualityIssues?: SortOrder
    lastCalculated?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobAnalyticsAvgOrderByAggregateInput = {
    totalExpectedTime?: SortOrder
    totalActualTime?: SortOrder
    efficiencyPercent?: SortOrder
    avgKitTime?: SortOrder
    fastestKitTime?: SortOrder
    slowestKitTime?: SortOrder
    timeVariance?: SortOrder
    consistencyScore?: SortOrder
    qualityIssues?: SortOrder
  }

  export type JobAnalyticsMaxOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    totalExpectedTime?: SortOrder
    totalActualTime?: SortOrder
    efficiencyPercent?: SortOrder
    avgKitTime?: SortOrder
    fastestKitTime?: SortOrder
    slowestKitTime?: SortOrder
    timeVariance?: SortOrder
    consistencyScore?: SortOrder
    onTimeCompletion?: SortOrder
    qualityIssues?: SortOrder
    lastCalculated?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobAnalyticsMinOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    totalExpectedTime?: SortOrder
    totalActualTime?: SortOrder
    efficiencyPercent?: SortOrder
    avgKitTime?: SortOrder
    fastestKitTime?: SortOrder
    slowestKitTime?: SortOrder
    timeVariance?: SortOrder
    consistencyScore?: SortOrder
    onTimeCompletion?: SortOrder
    qualityIssues?: SortOrder
    lastCalculated?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobAnalyticsSumOrderByAggregateInput = {
    totalExpectedTime?: SortOrder
    totalActualTime?: SortOrder
    efficiencyPercent?: SortOrder
    avgKitTime?: SortOrder
    fastestKitTime?: SortOrder
    slowestKitTime?: SortOrder
    timeVariance?: SortOrder
    consistencyScore?: SortOrder
    qualityIssues?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    role?: SortOrder
    workCenterId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    role?: SortOrder
    workCenterId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    role?: SortOrder
    workCenterId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type JobProgressListRelationFilter = {
    every?: JobProgressWhereInput
    some?: JobProgressWhereInput
    none?: JobProgressWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobProgressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkCenterCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkCenterMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkCenterMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type JobAssignmentJobIdUserIdCompoundUniqueInput = {
    jobId: string
    userId: string
  }

  export type JobAssignmentCountOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    userId?: SortOrder
    assignedAt?: SortOrder
    assignedBy?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobAssignmentMaxOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    userId?: SortOrder
    assignedAt?: SortOrder
    assignedBy?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobAssignmentMinOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    userId?: SortOrder
    assignedAt?: SortOrder
    assignedBy?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RouteStepCreateNestedManyWithoutKittingJobInput = {
    create?: XOR<RouteStepCreateWithoutKittingJobInput, RouteStepUncheckedCreateWithoutKittingJobInput> | RouteStepCreateWithoutKittingJobInput[] | RouteStepUncheckedCreateWithoutKittingJobInput[]
    connectOrCreate?: RouteStepCreateOrConnectWithoutKittingJobInput | RouteStepCreateOrConnectWithoutKittingJobInput[]
    createMany?: RouteStepCreateManyKittingJobInputEnvelope
    connect?: RouteStepWhereUniqueInput | RouteStepWhereUniqueInput[]
  }

  export type JobProgressCreateNestedOneWithoutKittingJobInput = {
    create?: XOR<JobProgressCreateWithoutKittingJobInput, JobProgressUncheckedCreateWithoutKittingJobInput>
    connectOrCreate?: JobProgressCreateOrConnectWithoutKittingJobInput
    connect?: JobProgressWhereUniqueInput
  }

  export type JobAnalyticsCreateNestedOneWithoutKittingJobInput = {
    create?: XOR<JobAnalyticsCreateWithoutKittingJobInput, JobAnalyticsUncheckedCreateWithoutKittingJobInput>
    connectOrCreate?: JobAnalyticsCreateOrConnectWithoutKittingJobInput
    connect?: JobAnalyticsWhereUniqueInput
  }

  export type JobAssignmentCreateNestedManyWithoutJobInput = {
    create?: XOR<JobAssignmentCreateWithoutJobInput, JobAssignmentUncheckedCreateWithoutJobInput> | JobAssignmentCreateWithoutJobInput[] | JobAssignmentUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobAssignmentCreateOrConnectWithoutJobInput | JobAssignmentCreateOrConnectWithoutJobInput[]
    createMany?: JobAssignmentCreateManyJobInputEnvelope
    connect?: JobAssignmentWhereUniqueInput | JobAssignmentWhereUniqueInput[]
  }

  export type RouteStepUncheckedCreateNestedManyWithoutKittingJobInput = {
    create?: XOR<RouteStepCreateWithoutKittingJobInput, RouteStepUncheckedCreateWithoutKittingJobInput> | RouteStepCreateWithoutKittingJobInput[] | RouteStepUncheckedCreateWithoutKittingJobInput[]
    connectOrCreate?: RouteStepCreateOrConnectWithoutKittingJobInput | RouteStepCreateOrConnectWithoutKittingJobInput[]
    createMany?: RouteStepCreateManyKittingJobInputEnvelope
    connect?: RouteStepWhereUniqueInput | RouteStepWhereUniqueInput[]
  }

  export type JobProgressUncheckedCreateNestedOneWithoutKittingJobInput = {
    create?: XOR<JobProgressCreateWithoutKittingJobInput, JobProgressUncheckedCreateWithoutKittingJobInput>
    connectOrCreate?: JobProgressCreateOrConnectWithoutKittingJobInput
    connect?: JobProgressWhereUniqueInput
  }

  export type JobAnalyticsUncheckedCreateNestedOneWithoutKittingJobInput = {
    create?: XOR<JobAnalyticsCreateWithoutKittingJobInput, JobAnalyticsUncheckedCreateWithoutKittingJobInput>
    connectOrCreate?: JobAnalyticsCreateOrConnectWithoutKittingJobInput
    connect?: JobAnalyticsWhereUniqueInput
  }

  export type JobAssignmentUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<JobAssignmentCreateWithoutJobInput, JobAssignmentUncheckedCreateWithoutJobInput> | JobAssignmentCreateWithoutJobInput[] | JobAssignmentUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobAssignmentCreateOrConnectWithoutJobInput | JobAssignmentCreateOrConnectWithoutJobInput[]
    createMany?: JobAssignmentCreateManyJobInputEnvelope
    connect?: JobAssignmentWhereUniqueInput | JobAssignmentWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnumJobStatusFieldUpdateOperationsInput = {
    set?: $Enums.JobStatus
  }

  export type RouteStepUpdateManyWithoutKittingJobNestedInput = {
    create?: XOR<RouteStepCreateWithoutKittingJobInput, RouteStepUncheckedCreateWithoutKittingJobInput> | RouteStepCreateWithoutKittingJobInput[] | RouteStepUncheckedCreateWithoutKittingJobInput[]
    connectOrCreate?: RouteStepCreateOrConnectWithoutKittingJobInput | RouteStepCreateOrConnectWithoutKittingJobInput[]
    upsert?: RouteStepUpsertWithWhereUniqueWithoutKittingJobInput | RouteStepUpsertWithWhereUniqueWithoutKittingJobInput[]
    createMany?: RouteStepCreateManyKittingJobInputEnvelope
    set?: RouteStepWhereUniqueInput | RouteStepWhereUniqueInput[]
    disconnect?: RouteStepWhereUniqueInput | RouteStepWhereUniqueInput[]
    delete?: RouteStepWhereUniqueInput | RouteStepWhereUniqueInput[]
    connect?: RouteStepWhereUniqueInput | RouteStepWhereUniqueInput[]
    update?: RouteStepUpdateWithWhereUniqueWithoutKittingJobInput | RouteStepUpdateWithWhereUniqueWithoutKittingJobInput[]
    updateMany?: RouteStepUpdateManyWithWhereWithoutKittingJobInput | RouteStepUpdateManyWithWhereWithoutKittingJobInput[]
    deleteMany?: RouteStepScalarWhereInput | RouteStepScalarWhereInput[]
  }

  export type JobProgressUpdateOneWithoutKittingJobNestedInput = {
    create?: XOR<JobProgressCreateWithoutKittingJobInput, JobProgressUncheckedCreateWithoutKittingJobInput>
    connectOrCreate?: JobProgressCreateOrConnectWithoutKittingJobInput
    upsert?: JobProgressUpsertWithoutKittingJobInput
    disconnect?: JobProgressWhereInput | boolean
    delete?: JobProgressWhereInput | boolean
    connect?: JobProgressWhereUniqueInput
    update?: XOR<XOR<JobProgressUpdateToOneWithWhereWithoutKittingJobInput, JobProgressUpdateWithoutKittingJobInput>, JobProgressUncheckedUpdateWithoutKittingJobInput>
  }

  export type JobAnalyticsUpdateOneWithoutKittingJobNestedInput = {
    create?: XOR<JobAnalyticsCreateWithoutKittingJobInput, JobAnalyticsUncheckedCreateWithoutKittingJobInput>
    connectOrCreate?: JobAnalyticsCreateOrConnectWithoutKittingJobInput
    upsert?: JobAnalyticsUpsertWithoutKittingJobInput
    disconnect?: JobAnalyticsWhereInput | boolean
    delete?: JobAnalyticsWhereInput | boolean
    connect?: JobAnalyticsWhereUniqueInput
    update?: XOR<XOR<JobAnalyticsUpdateToOneWithWhereWithoutKittingJobInput, JobAnalyticsUpdateWithoutKittingJobInput>, JobAnalyticsUncheckedUpdateWithoutKittingJobInput>
  }

  export type JobAssignmentUpdateManyWithoutJobNestedInput = {
    create?: XOR<JobAssignmentCreateWithoutJobInput, JobAssignmentUncheckedCreateWithoutJobInput> | JobAssignmentCreateWithoutJobInput[] | JobAssignmentUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobAssignmentCreateOrConnectWithoutJobInput | JobAssignmentCreateOrConnectWithoutJobInput[]
    upsert?: JobAssignmentUpsertWithWhereUniqueWithoutJobInput | JobAssignmentUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: JobAssignmentCreateManyJobInputEnvelope
    set?: JobAssignmentWhereUniqueInput | JobAssignmentWhereUniqueInput[]
    disconnect?: JobAssignmentWhereUniqueInput | JobAssignmentWhereUniqueInput[]
    delete?: JobAssignmentWhereUniqueInput | JobAssignmentWhereUniqueInput[]
    connect?: JobAssignmentWhereUniqueInput | JobAssignmentWhereUniqueInput[]
    update?: JobAssignmentUpdateWithWhereUniqueWithoutJobInput | JobAssignmentUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: JobAssignmentUpdateManyWithWhereWithoutJobInput | JobAssignmentUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: JobAssignmentScalarWhereInput | JobAssignmentScalarWhereInput[]
  }

  export type RouteStepUncheckedUpdateManyWithoutKittingJobNestedInput = {
    create?: XOR<RouteStepCreateWithoutKittingJobInput, RouteStepUncheckedCreateWithoutKittingJobInput> | RouteStepCreateWithoutKittingJobInput[] | RouteStepUncheckedCreateWithoutKittingJobInput[]
    connectOrCreate?: RouteStepCreateOrConnectWithoutKittingJobInput | RouteStepCreateOrConnectWithoutKittingJobInput[]
    upsert?: RouteStepUpsertWithWhereUniqueWithoutKittingJobInput | RouteStepUpsertWithWhereUniqueWithoutKittingJobInput[]
    createMany?: RouteStepCreateManyKittingJobInputEnvelope
    set?: RouteStepWhereUniqueInput | RouteStepWhereUniqueInput[]
    disconnect?: RouteStepWhereUniqueInput | RouteStepWhereUniqueInput[]
    delete?: RouteStepWhereUniqueInput | RouteStepWhereUniqueInput[]
    connect?: RouteStepWhereUniqueInput | RouteStepWhereUniqueInput[]
    update?: RouteStepUpdateWithWhereUniqueWithoutKittingJobInput | RouteStepUpdateWithWhereUniqueWithoutKittingJobInput[]
    updateMany?: RouteStepUpdateManyWithWhereWithoutKittingJobInput | RouteStepUpdateManyWithWhereWithoutKittingJobInput[]
    deleteMany?: RouteStepScalarWhereInput | RouteStepScalarWhereInput[]
  }

  export type JobProgressUncheckedUpdateOneWithoutKittingJobNestedInput = {
    create?: XOR<JobProgressCreateWithoutKittingJobInput, JobProgressUncheckedCreateWithoutKittingJobInput>
    connectOrCreate?: JobProgressCreateOrConnectWithoutKittingJobInput
    upsert?: JobProgressUpsertWithoutKittingJobInput
    disconnect?: JobProgressWhereInput | boolean
    delete?: JobProgressWhereInput | boolean
    connect?: JobProgressWhereUniqueInput
    update?: XOR<XOR<JobProgressUpdateToOneWithWhereWithoutKittingJobInput, JobProgressUpdateWithoutKittingJobInput>, JobProgressUncheckedUpdateWithoutKittingJobInput>
  }

  export type JobAnalyticsUncheckedUpdateOneWithoutKittingJobNestedInput = {
    create?: XOR<JobAnalyticsCreateWithoutKittingJobInput, JobAnalyticsUncheckedCreateWithoutKittingJobInput>
    connectOrCreate?: JobAnalyticsCreateOrConnectWithoutKittingJobInput
    upsert?: JobAnalyticsUpsertWithoutKittingJobInput
    disconnect?: JobAnalyticsWhereInput | boolean
    delete?: JobAnalyticsWhereInput | boolean
    connect?: JobAnalyticsWhereUniqueInput
    update?: XOR<XOR<JobAnalyticsUpdateToOneWithWhereWithoutKittingJobInput, JobAnalyticsUpdateWithoutKittingJobInput>, JobAnalyticsUncheckedUpdateWithoutKittingJobInput>
  }

  export type JobAssignmentUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<JobAssignmentCreateWithoutJobInput, JobAssignmentUncheckedCreateWithoutJobInput> | JobAssignmentCreateWithoutJobInput[] | JobAssignmentUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobAssignmentCreateOrConnectWithoutJobInput | JobAssignmentCreateOrConnectWithoutJobInput[]
    upsert?: JobAssignmentUpsertWithWhereUniqueWithoutJobInput | JobAssignmentUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: JobAssignmentCreateManyJobInputEnvelope
    set?: JobAssignmentWhereUniqueInput | JobAssignmentWhereUniqueInput[]
    disconnect?: JobAssignmentWhereUniqueInput | JobAssignmentWhereUniqueInput[]
    delete?: JobAssignmentWhereUniqueInput | JobAssignmentWhereUniqueInput[]
    connect?: JobAssignmentWhereUniqueInput | JobAssignmentWhereUniqueInput[]
    update?: JobAssignmentUpdateWithWhereUniqueWithoutJobInput | JobAssignmentUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: JobAssignmentUpdateManyWithWhereWithoutJobInput | JobAssignmentUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: JobAssignmentScalarWhereInput | JobAssignmentScalarWhereInput[]
  }

  export type KittingJobCreateNestedOneWithoutRouteStepsInput = {
    create?: XOR<KittingJobCreateWithoutRouteStepsInput, KittingJobUncheckedCreateWithoutRouteStepsInput>
    connectOrCreate?: KittingJobCreateOrConnectWithoutRouteStepsInput
    connect?: KittingJobWhereUniqueInput
  }

  export type StepExecutionCreateNestedManyWithoutRouteStepInput = {
    create?: XOR<StepExecutionCreateWithoutRouteStepInput, StepExecutionUncheckedCreateWithoutRouteStepInput> | StepExecutionCreateWithoutRouteStepInput[] | StepExecutionUncheckedCreateWithoutRouteStepInput[]
    connectOrCreate?: StepExecutionCreateOrConnectWithoutRouteStepInput | StepExecutionCreateOrConnectWithoutRouteStepInput[]
    createMany?: StepExecutionCreateManyRouteStepInputEnvelope
    connect?: StepExecutionWhereUniqueInput | StepExecutionWhereUniqueInput[]
  }

  export type StepExecutionUncheckedCreateNestedManyWithoutRouteStepInput = {
    create?: XOR<StepExecutionCreateWithoutRouteStepInput, StepExecutionUncheckedCreateWithoutRouteStepInput> | StepExecutionCreateWithoutRouteStepInput[] | StepExecutionUncheckedCreateWithoutRouteStepInput[]
    connectOrCreate?: StepExecutionCreateOrConnectWithoutRouteStepInput | StepExecutionCreateOrConnectWithoutRouteStepInput[]
    createMany?: StepExecutionCreateManyRouteStepInputEnvelope
    connect?: StepExecutionWhereUniqueInput | StepExecutionWhereUniqueInput[]
  }

  export type EnumInstructionTypeFieldUpdateOperationsInput = {
    set?: $Enums.InstructionType
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type KittingJobUpdateOneRequiredWithoutRouteStepsNestedInput = {
    create?: XOR<KittingJobCreateWithoutRouteStepsInput, KittingJobUncheckedCreateWithoutRouteStepsInput>
    connectOrCreate?: KittingJobCreateOrConnectWithoutRouteStepsInput
    upsert?: KittingJobUpsertWithoutRouteStepsInput
    connect?: KittingJobWhereUniqueInput
    update?: XOR<XOR<KittingJobUpdateToOneWithWhereWithoutRouteStepsInput, KittingJobUpdateWithoutRouteStepsInput>, KittingJobUncheckedUpdateWithoutRouteStepsInput>
  }

  export type StepExecutionUpdateManyWithoutRouteStepNestedInput = {
    create?: XOR<StepExecutionCreateWithoutRouteStepInput, StepExecutionUncheckedCreateWithoutRouteStepInput> | StepExecutionCreateWithoutRouteStepInput[] | StepExecutionUncheckedCreateWithoutRouteStepInput[]
    connectOrCreate?: StepExecutionCreateOrConnectWithoutRouteStepInput | StepExecutionCreateOrConnectWithoutRouteStepInput[]
    upsert?: StepExecutionUpsertWithWhereUniqueWithoutRouteStepInput | StepExecutionUpsertWithWhereUniqueWithoutRouteStepInput[]
    createMany?: StepExecutionCreateManyRouteStepInputEnvelope
    set?: StepExecutionWhereUniqueInput | StepExecutionWhereUniqueInput[]
    disconnect?: StepExecutionWhereUniqueInput | StepExecutionWhereUniqueInput[]
    delete?: StepExecutionWhereUniqueInput | StepExecutionWhereUniqueInput[]
    connect?: StepExecutionWhereUniqueInput | StepExecutionWhereUniqueInput[]
    update?: StepExecutionUpdateWithWhereUniqueWithoutRouteStepInput | StepExecutionUpdateWithWhereUniqueWithoutRouteStepInput[]
    updateMany?: StepExecutionUpdateManyWithWhereWithoutRouteStepInput | StepExecutionUpdateManyWithWhereWithoutRouteStepInput[]
    deleteMany?: StepExecutionScalarWhereInput | StepExecutionScalarWhereInput[]
  }

  export type StepExecutionUncheckedUpdateManyWithoutRouteStepNestedInput = {
    create?: XOR<StepExecutionCreateWithoutRouteStepInput, StepExecutionUncheckedCreateWithoutRouteStepInput> | StepExecutionCreateWithoutRouteStepInput[] | StepExecutionUncheckedCreateWithoutRouteStepInput[]
    connectOrCreate?: StepExecutionCreateOrConnectWithoutRouteStepInput | StepExecutionCreateOrConnectWithoutRouteStepInput[]
    upsert?: StepExecutionUpsertWithWhereUniqueWithoutRouteStepInput | StepExecutionUpsertWithWhereUniqueWithoutRouteStepInput[]
    createMany?: StepExecutionCreateManyRouteStepInputEnvelope
    set?: StepExecutionWhereUniqueInput | StepExecutionWhereUniqueInput[]
    disconnect?: StepExecutionWhereUniqueInput | StepExecutionWhereUniqueInput[]
    delete?: StepExecutionWhereUniqueInput | StepExecutionWhereUniqueInput[]
    connect?: StepExecutionWhereUniqueInput | StepExecutionWhereUniqueInput[]
    update?: StepExecutionUpdateWithWhereUniqueWithoutRouteStepInput | StepExecutionUpdateWithWhereUniqueWithoutRouteStepInput[]
    updateMany?: StepExecutionUpdateManyWithWhereWithoutRouteStepInput | StepExecutionUpdateManyWithWhereWithoutRouteStepInput[]
    deleteMany?: StepExecutionScalarWhereInput | StepExecutionScalarWhereInput[]
  }

  export type KittingJobCreateNestedOneWithoutJobProgressInput = {
    create?: XOR<KittingJobCreateWithoutJobProgressInput, KittingJobUncheckedCreateWithoutJobProgressInput>
    connectOrCreate?: KittingJobCreateOrConnectWithoutJobProgressInput
    connect?: KittingJobWhereUniqueInput
  }

  export type WorkCenterCreateNestedOneWithoutJobProgressInput = {
    create?: XOR<WorkCenterCreateWithoutJobProgressInput, WorkCenterUncheckedCreateWithoutJobProgressInput>
    connectOrCreate?: WorkCenterCreateOrConnectWithoutJobProgressInput
    connect?: WorkCenterWhereUniqueInput
  }

  export type KitExecutionCreateNestedManyWithoutJobProgressInput = {
    create?: XOR<KitExecutionCreateWithoutJobProgressInput, KitExecutionUncheckedCreateWithoutJobProgressInput> | KitExecutionCreateWithoutJobProgressInput[] | KitExecutionUncheckedCreateWithoutJobProgressInput[]
    connectOrCreate?: KitExecutionCreateOrConnectWithoutJobProgressInput | KitExecutionCreateOrConnectWithoutJobProgressInput[]
    createMany?: KitExecutionCreateManyJobProgressInputEnvelope
    connect?: KitExecutionWhereUniqueInput | KitExecutionWhereUniqueInput[]
  }

  export type KitExecutionUncheckedCreateNestedManyWithoutJobProgressInput = {
    create?: XOR<KitExecutionCreateWithoutJobProgressInput, KitExecutionUncheckedCreateWithoutJobProgressInput> | KitExecutionCreateWithoutJobProgressInput[] | KitExecutionUncheckedCreateWithoutJobProgressInput[]
    connectOrCreate?: KitExecutionCreateOrConnectWithoutJobProgressInput | KitExecutionCreateOrConnectWithoutJobProgressInput[]
    createMany?: KitExecutionCreateManyJobProgressInputEnvelope
    connect?: KitExecutionWhereUniqueInput | KitExecutionWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type KittingJobUpdateOneRequiredWithoutJobProgressNestedInput = {
    create?: XOR<KittingJobCreateWithoutJobProgressInput, KittingJobUncheckedCreateWithoutJobProgressInput>
    connectOrCreate?: KittingJobCreateOrConnectWithoutJobProgressInput
    upsert?: KittingJobUpsertWithoutJobProgressInput
    connect?: KittingJobWhereUniqueInput
    update?: XOR<XOR<KittingJobUpdateToOneWithWhereWithoutJobProgressInput, KittingJobUpdateWithoutJobProgressInput>, KittingJobUncheckedUpdateWithoutJobProgressInput>
  }

  export type WorkCenterUpdateOneWithoutJobProgressNestedInput = {
    create?: XOR<WorkCenterCreateWithoutJobProgressInput, WorkCenterUncheckedCreateWithoutJobProgressInput>
    connectOrCreate?: WorkCenterCreateOrConnectWithoutJobProgressInput
    upsert?: WorkCenterUpsertWithoutJobProgressInput
    disconnect?: WorkCenterWhereInput | boolean
    delete?: WorkCenterWhereInput | boolean
    connect?: WorkCenterWhereUniqueInput
    update?: XOR<XOR<WorkCenterUpdateToOneWithWhereWithoutJobProgressInput, WorkCenterUpdateWithoutJobProgressInput>, WorkCenterUncheckedUpdateWithoutJobProgressInput>
  }

  export type KitExecutionUpdateManyWithoutJobProgressNestedInput = {
    create?: XOR<KitExecutionCreateWithoutJobProgressInput, KitExecutionUncheckedCreateWithoutJobProgressInput> | KitExecutionCreateWithoutJobProgressInput[] | KitExecutionUncheckedCreateWithoutJobProgressInput[]
    connectOrCreate?: KitExecutionCreateOrConnectWithoutJobProgressInput | KitExecutionCreateOrConnectWithoutJobProgressInput[]
    upsert?: KitExecutionUpsertWithWhereUniqueWithoutJobProgressInput | KitExecutionUpsertWithWhereUniqueWithoutJobProgressInput[]
    createMany?: KitExecutionCreateManyJobProgressInputEnvelope
    set?: KitExecutionWhereUniqueInput | KitExecutionWhereUniqueInput[]
    disconnect?: KitExecutionWhereUniqueInput | KitExecutionWhereUniqueInput[]
    delete?: KitExecutionWhereUniqueInput | KitExecutionWhereUniqueInput[]
    connect?: KitExecutionWhereUniqueInput | KitExecutionWhereUniqueInput[]
    update?: KitExecutionUpdateWithWhereUniqueWithoutJobProgressInput | KitExecutionUpdateWithWhereUniqueWithoutJobProgressInput[]
    updateMany?: KitExecutionUpdateManyWithWhereWithoutJobProgressInput | KitExecutionUpdateManyWithWhereWithoutJobProgressInput[]
    deleteMany?: KitExecutionScalarWhereInput | KitExecutionScalarWhereInput[]
  }

  export type KitExecutionUncheckedUpdateManyWithoutJobProgressNestedInput = {
    create?: XOR<KitExecutionCreateWithoutJobProgressInput, KitExecutionUncheckedCreateWithoutJobProgressInput> | KitExecutionCreateWithoutJobProgressInput[] | KitExecutionUncheckedCreateWithoutJobProgressInput[]
    connectOrCreate?: KitExecutionCreateOrConnectWithoutJobProgressInput | KitExecutionCreateOrConnectWithoutJobProgressInput[]
    upsert?: KitExecutionUpsertWithWhereUniqueWithoutJobProgressInput | KitExecutionUpsertWithWhereUniqueWithoutJobProgressInput[]
    createMany?: KitExecutionCreateManyJobProgressInputEnvelope
    set?: KitExecutionWhereUniqueInput | KitExecutionWhereUniqueInput[]
    disconnect?: KitExecutionWhereUniqueInput | KitExecutionWhereUniqueInput[]
    delete?: KitExecutionWhereUniqueInput | KitExecutionWhereUniqueInput[]
    connect?: KitExecutionWhereUniqueInput | KitExecutionWhereUniqueInput[]
    update?: KitExecutionUpdateWithWhereUniqueWithoutJobProgressInput | KitExecutionUpdateWithWhereUniqueWithoutJobProgressInput[]
    updateMany?: KitExecutionUpdateManyWithWhereWithoutJobProgressInput | KitExecutionUpdateManyWithWhereWithoutJobProgressInput[]
    deleteMany?: KitExecutionScalarWhereInput | KitExecutionScalarWhereInput[]
  }

  export type JobProgressCreateNestedOneWithoutKitExecutionsInput = {
    create?: XOR<JobProgressCreateWithoutKitExecutionsInput, JobProgressUncheckedCreateWithoutKitExecutionsInput>
    connectOrCreate?: JobProgressCreateOrConnectWithoutKitExecutionsInput
    connect?: JobProgressWhereUniqueInput
  }

  export type StepExecutionCreateNestedManyWithoutKitExecutionInput = {
    create?: XOR<StepExecutionCreateWithoutKitExecutionInput, StepExecutionUncheckedCreateWithoutKitExecutionInput> | StepExecutionCreateWithoutKitExecutionInput[] | StepExecutionUncheckedCreateWithoutKitExecutionInput[]
    connectOrCreate?: StepExecutionCreateOrConnectWithoutKitExecutionInput | StepExecutionCreateOrConnectWithoutKitExecutionInput[]
    createMany?: StepExecutionCreateManyKitExecutionInputEnvelope
    connect?: StepExecutionWhereUniqueInput | StepExecutionWhereUniqueInput[]
  }

  export type StepExecutionUncheckedCreateNestedManyWithoutKitExecutionInput = {
    create?: XOR<StepExecutionCreateWithoutKitExecutionInput, StepExecutionUncheckedCreateWithoutKitExecutionInput> | StepExecutionCreateWithoutKitExecutionInput[] | StepExecutionUncheckedCreateWithoutKitExecutionInput[]
    connectOrCreate?: StepExecutionCreateOrConnectWithoutKitExecutionInput | StepExecutionCreateOrConnectWithoutKitExecutionInput[]
    createMany?: StepExecutionCreateManyKitExecutionInputEnvelope
    connect?: StepExecutionWhereUniqueInput | StepExecutionWhereUniqueInput[]
  }

  export type JobProgressUpdateOneRequiredWithoutKitExecutionsNestedInput = {
    create?: XOR<JobProgressCreateWithoutKitExecutionsInput, JobProgressUncheckedCreateWithoutKitExecutionsInput>
    connectOrCreate?: JobProgressCreateOrConnectWithoutKitExecutionsInput
    upsert?: JobProgressUpsertWithoutKitExecutionsInput
    connect?: JobProgressWhereUniqueInput
    update?: XOR<XOR<JobProgressUpdateToOneWithWhereWithoutKitExecutionsInput, JobProgressUpdateWithoutKitExecutionsInput>, JobProgressUncheckedUpdateWithoutKitExecutionsInput>
  }

  export type StepExecutionUpdateManyWithoutKitExecutionNestedInput = {
    create?: XOR<StepExecutionCreateWithoutKitExecutionInput, StepExecutionUncheckedCreateWithoutKitExecutionInput> | StepExecutionCreateWithoutKitExecutionInput[] | StepExecutionUncheckedCreateWithoutKitExecutionInput[]
    connectOrCreate?: StepExecutionCreateOrConnectWithoutKitExecutionInput | StepExecutionCreateOrConnectWithoutKitExecutionInput[]
    upsert?: StepExecutionUpsertWithWhereUniqueWithoutKitExecutionInput | StepExecutionUpsertWithWhereUniqueWithoutKitExecutionInput[]
    createMany?: StepExecutionCreateManyKitExecutionInputEnvelope
    set?: StepExecutionWhereUniqueInput | StepExecutionWhereUniqueInput[]
    disconnect?: StepExecutionWhereUniqueInput | StepExecutionWhereUniqueInput[]
    delete?: StepExecutionWhereUniqueInput | StepExecutionWhereUniqueInput[]
    connect?: StepExecutionWhereUniqueInput | StepExecutionWhereUniqueInput[]
    update?: StepExecutionUpdateWithWhereUniqueWithoutKitExecutionInput | StepExecutionUpdateWithWhereUniqueWithoutKitExecutionInput[]
    updateMany?: StepExecutionUpdateManyWithWhereWithoutKitExecutionInput | StepExecutionUpdateManyWithWhereWithoutKitExecutionInput[]
    deleteMany?: StepExecutionScalarWhereInput | StepExecutionScalarWhereInput[]
  }

  export type StepExecutionUncheckedUpdateManyWithoutKitExecutionNestedInput = {
    create?: XOR<StepExecutionCreateWithoutKitExecutionInput, StepExecutionUncheckedCreateWithoutKitExecutionInput> | StepExecutionCreateWithoutKitExecutionInput[] | StepExecutionUncheckedCreateWithoutKitExecutionInput[]
    connectOrCreate?: StepExecutionCreateOrConnectWithoutKitExecutionInput | StepExecutionCreateOrConnectWithoutKitExecutionInput[]
    upsert?: StepExecutionUpsertWithWhereUniqueWithoutKitExecutionInput | StepExecutionUpsertWithWhereUniqueWithoutKitExecutionInput[]
    createMany?: StepExecutionCreateManyKitExecutionInputEnvelope
    set?: StepExecutionWhereUniqueInput | StepExecutionWhereUniqueInput[]
    disconnect?: StepExecutionWhereUniqueInput | StepExecutionWhereUniqueInput[]
    delete?: StepExecutionWhereUniqueInput | StepExecutionWhereUniqueInput[]
    connect?: StepExecutionWhereUniqueInput | StepExecutionWhereUniqueInput[]
    update?: StepExecutionUpdateWithWhereUniqueWithoutKitExecutionInput | StepExecutionUpdateWithWhereUniqueWithoutKitExecutionInput[]
    updateMany?: StepExecutionUpdateManyWithWhereWithoutKitExecutionInput | StepExecutionUpdateManyWithWhereWithoutKitExecutionInput[]
    deleteMany?: StepExecutionScalarWhereInput | StepExecutionScalarWhereInput[]
  }

  export type KitExecutionCreateNestedOneWithoutStepExecutionsInput = {
    create?: XOR<KitExecutionCreateWithoutStepExecutionsInput, KitExecutionUncheckedCreateWithoutStepExecutionsInput>
    connectOrCreate?: KitExecutionCreateOrConnectWithoutStepExecutionsInput
    connect?: KitExecutionWhereUniqueInput
  }

  export type RouteStepCreateNestedOneWithoutStepExecutionsInput = {
    create?: XOR<RouteStepCreateWithoutStepExecutionsInput, RouteStepUncheckedCreateWithoutStepExecutionsInput>
    connectOrCreate?: RouteStepCreateOrConnectWithoutStepExecutionsInput
    connect?: RouteStepWhereUniqueInput
  }

  export type KitExecutionUpdateOneRequiredWithoutStepExecutionsNestedInput = {
    create?: XOR<KitExecutionCreateWithoutStepExecutionsInput, KitExecutionUncheckedCreateWithoutStepExecutionsInput>
    connectOrCreate?: KitExecutionCreateOrConnectWithoutStepExecutionsInput
    upsert?: KitExecutionUpsertWithoutStepExecutionsInput
    connect?: KitExecutionWhereUniqueInput
    update?: XOR<XOR<KitExecutionUpdateToOneWithWhereWithoutStepExecutionsInput, KitExecutionUpdateWithoutStepExecutionsInput>, KitExecutionUncheckedUpdateWithoutStepExecutionsInput>
  }

  export type RouteStepUpdateOneRequiredWithoutStepExecutionsNestedInput = {
    create?: XOR<RouteStepCreateWithoutStepExecutionsInput, RouteStepUncheckedCreateWithoutStepExecutionsInput>
    connectOrCreate?: RouteStepCreateOrConnectWithoutStepExecutionsInput
    upsert?: RouteStepUpsertWithoutStepExecutionsInput
    connect?: RouteStepWhereUniqueInput
    update?: XOR<XOR<RouteStepUpdateToOneWithWhereWithoutStepExecutionsInput, RouteStepUpdateWithoutStepExecutionsInput>, RouteStepUncheckedUpdateWithoutStepExecutionsInput>
  }

  export type KittingJobCreateNestedOneWithoutAnalyticsInput = {
    create?: XOR<KittingJobCreateWithoutAnalyticsInput, KittingJobUncheckedCreateWithoutAnalyticsInput>
    connectOrCreate?: KittingJobCreateOrConnectWithoutAnalyticsInput
    connect?: KittingJobWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type KittingJobUpdateOneRequiredWithoutAnalyticsNestedInput = {
    create?: XOR<KittingJobCreateWithoutAnalyticsInput, KittingJobUncheckedCreateWithoutAnalyticsInput>
    connectOrCreate?: KittingJobCreateOrConnectWithoutAnalyticsInput
    upsert?: KittingJobUpsertWithoutAnalyticsInput
    connect?: KittingJobWhereUniqueInput
    update?: XOR<XOR<KittingJobUpdateToOneWithWhereWithoutAnalyticsInput, KittingJobUpdateWithoutAnalyticsInput>, KittingJobUncheckedUpdateWithoutAnalyticsInput>
  }

  export type WorkCenterCreateNestedOneWithoutUsersInput = {
    create?: XOR<WorkCenterCreateWithoutUsersInput, WorkCenterUncheckedCreateWithoutUsersInput>
    connectOrCreate?: WorkCenterCreateOrConnectWithoutUsersInput
    connect?: WorkCenterWhereUniqueInput
  }

  export type JobAssignmentCreateNestedManyWithoutUserInput = {
    create?: XOR<JobAssignmentCreateWithoutUserInput, JobAssignmentUncheckedCreateWithoutUserInput> | JobAssignmentCreateWithoutUserInput[] | JobAssignmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: JobAssignmentCreateOrConnectWithoutUserInput | JobAssignmentCreateOrConnectWithoutUserInput[]
    createMany?: JobAssignmentCreateManyUserInputEnvelope
    connect?: JobAssignmentWhereUniqueInput | JobAssignmentWhereUniqueInput[]
  }

  export type JobAssignmentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<JobAssignmentCreateWithoutUserInput, JobAssignmentUncheckedCreateWithoutUserInput> | JobAssignmentCreateWithoutUserInput[] | JobAssignmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: JobAssignmentCreateOrConnectWithoutUserInput | JobAssignmentCreateOrConnectWithoutUserInput[]
    createMany?: JobAssignmentCreateManyUserInputEnvelope
    connect?: JobAssignmentWhereUniqueInput | JobAssignmentWhereUniqueInput[]
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type WorkCenterUpdateOneWithoutUsersNestedInput = {
    create?: XOR<WorkCenterCreateWithoutUsersInput, WorkCenterUncheckedCreateWithoutUsersInput>
    connectOrCreate?: WorkCenterCreateOrConnectWithoutUsersInput
    upsert?: WorkCenterUpsertWithoutUsersInput
    disconnect?: WorkCenterWhereInput | boolean
    delete?: WorkCenterWhereInput | boolean
    connect?: WorkCenterWhereUniqueInput
    update?: XOR<XOR<WorkCenterUpdateToOneWithWhereWithoutUsersInput, WorkCenterUpdateWithoutUsersInput>, WorkCenterUncheckedUpdateWithoutUsersInput>
  }

  export type JobAssignmentUpdateManyWithoutUserNestedInput = {
    create?: XOR<JobAssignmentCreateWithoutUserInput, JobAssignmentUncheckedCreateWithoutUserInput> | JobAssignmentCreateWithoutUserInput[] | JobAssignmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: JobAssignmentCreateOrConnectWithoutUserInput | JobAssignmentCreateOrConnectWithoutUserInput[]
    upsert?: JobAssignmentUpsertWithWhereUniqueWithoutUserInput | JobAssignmentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: JobAssignmentCreateManyUserInputEnvelope
    set?: JobAssignmentWhereUniqueInput | JobAssignmentWhereUniqueInput[]
    disconnect?: JobAssignmentWhereUniqueInput | JobAssignmentWhereUniqueInput[]
    delete?: JobAssignmentWhereUniqueInput | JobAssignmentWhereUniqueInput[]
    connect?: JobAssignmentWhereUniqueInput | JobAssignmentWhereUniqueInput[]
    update?: JobAssignmentUpdateWithWhereUniqueWithoutUserInput | JobAssignmentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: JobAssignmentUpdateManyWithWhereWithoutUserInput | JobAssignmentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: JobAssignmentScalarWhereInput | JobAssignmentScalarWhereInput[]
  }

  export type JobAssignmentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<JobAssignmentCreateWithoutUserInput, JobAssignmentUncheckedCreateWithoutUserInput> | JobAssignmentCreateWithoutUserInput[] | JobAssignmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: JobAssignmentCreateOrConnectWithoutUserInput | JobAssignmentCreateOrConnectWithoutUserInput[]
    upsert?: JobAssignmentUpsertWithWhereUniqueWithoutUserInput | JobAssignmentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: JobAssignmentCreateManyUserInputEnvelope
    set?: JobAssignmentWhereUniqueInput | JobAssignmentWhereUniqueInput[]
    disconnect?: JobAssignmentWhereUniqueInput | JobAssignmentWhereUniqueInput[]
    delete?: JobAssignmentWhereUniqueInput | JobAssignmentWhereUniqueInput[]
    connect?: JobAssignmentWhereUniqueInput | JobAssignmentWhereUniqueInput[]
    update?: JobAssignmentUpdateWithWhereUniqueWithoutUserInput | JobAssignmentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: JobAssignmentUpdateManyWithWhereWithoutUserInput | JobAssignmentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: JobAssignmentScalarWhereInput | JobAssignmentScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutWorkCenterInput = {
    create?: XOR<UserCreateWithoutWorkCenterInput, UserUncheckedCreateWithoutWorkCenterInput> | UserCreateWithoutWorkCenterInput[] | UserUncheckedCreateWithoutWorkCenterInput[]
    connectOrCreate?: UserCreateOrConnectWithoutWorkCenterInput | UserCreateOrConnectWithoutWorkCenterInput[]
    createMany?: UserCreateManyWorkCenterInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type JobProgressCreateNestedManyWithoutWorkCenterInput = {
    create?: XOR<JobProgressCreateWithoutWorkCenterInput, JobProgressUncheckedCreateWithoutWorkCenterInput> | JobProgressCreateWithoutWorkCenterInput[] | JobProgressUncheckedCreateWithoutWorkCenterInput[]
    connectOrCreate?: JobProgressCreateOrConnectWithoutWorkCenterInput | JobProgressCreateOrConnectWithoutWorkCenterInput[]
    createMany?: JobProgressCreateManyWorkCenterInputEnvelope
    connect?: JobProgressWhereUniqueInput | JobProgressWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutWorkCenterInput = {
    create?: XOR<UserCreateWithoutWorkCenterInput, UserUncheckedCreateWithoutWorkCenterInput> | UserCreateWithoutWorkCenterInput[] | UserUncheckedCreateWithoutWorkCenterInput[]
    connectOrCreate?: UserCreateOrConnectWithoutWorkCenterInput | UserCreateOrConnectWithoutWorkCenterInput[]
    createMany?: UserCreateManyWorkCenterInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type JobProgressUncheckedCreateNestedManyWithoutWorkCenterInput = {
    create?: XOR<JobProgressCreateWithoutWorkCenterInput, JobProgressUncheckedCreateWithoutWorkCenterInput> | JobProgressCreateWithoutWorkCenterInput[] | JobProgressUncheckedCreateWithoutWorkCenterInput[]
    connectOrCreate?: JobProgressCreateOrConnectWithoutWorkCenterInput | JobProgressCreateOrConnectWithoutWorkCenterInput[]
    createMany?: JobProgressCreateManyWorkCenterInputEnvelope
    connect?: JobProgressWhereUniqueInput | JobProgressWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutWorkCenterNestedInput = {
    create?: XOR<UserCreateWithoutWorkCenterInput, UserUncheckedCreateWithoutWorkCenterInput> | UserCreateWithoutWorkCenterInput[] | UserUncheckedCreateWithoutWorkCenterInput[]
    connectOrCreate?: UserCreateOrConnectWithoutWorkCenterInput | UserCreateOrConnectWithoutWorkCenterInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutWorkCenterInput | UserUpsertWithWhereUniqueWithoutWorkCenterInput[]
    createMany?: UserCreateManyWorkCenterInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutWorkCenterInput | UserUpdateWithWhereUniqueWithoutWorkCenterInput[]
    updateMany?: UserUpdateManyWithWhereWithoutWorkCenterInput | UserUpdateManyWithWhereWithoutWorkCenterInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type JobProgressUpdateManyWithoutWorkCenterNestedInput = {
    create?: XOR<JobProgressCreateWithoutWorkCenterInput, JobProgressUncheckedCreateWithoutWorkCenterInput> | JobProgressCreateWithoutWorkCenterInput[] | JobProgressUncheckedCreateWithoutWorkCenterInput[]
    connectOrCreate?: JobProgressCreateOrConnectWithoutWorkCenterInput | JobProgressCreateOrConnectWithoutWorkCenterInput[]
    upsert?: JobProgressUpsertWithWhereUniqueWithoutWorkCenterInput | JobProgressUpsertWithWhereUniqueWithoutWorkCenterInput[]
    createMany?: JobProgressCreateManyWorkCenterInputEnvelope
    set?: JobProgressWhereUniqueInput | JobProgressWhereUniqueInput[]
    disconnect?: JobProgressWhereUniqueInput | JobProgressWhereUniqueInput[]
    delete?: JobProgressWhereUniqueInput | JobProgressWhereUniqueInput[]
    connect?: JobProgressWhereUniqueInput | JobProgressWhereUniqueInput[]
    update?: JobProgressUpdateWithWhereUniqueWithoutWorkCenterInput | JobProgressUpdateWithWhereUniqueWithoutWorkCenterInput[]
    updateMany?: JobProgressUpdateManyWithWhereWithoutWorkCenterInput | JobProgressUpdateManyWithWhereWithoutWorkCenterInput[]
    deleteMany?: JobProgressScalarWhereInput | JobProgressScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutWorkCenterNestedInput = {
    create?: XOR<UserCreateWithoutWorkCenterInput, UserUncheckedCreateWithoutWorkCenterInput> | UserCreateWithoutWorkCenterInput[] | UserUncheckedCreateWithoutWorkCenterInput[]
    connectOrCreate?: UserCreateOrConnectWithoutWorkCenterInput | UserCreateOrConnectWithoutWorkCenterInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutWorkCenterInput | UserUpsertWithWhereUniqueWithoutWorkCenterInput[]
    createMany?: UserCreateManyWorkCenterInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutWorkCenterInput | UserUpdateWithWhereUniqueWithoutWorkCenterInput[]
    updateMany?: UserUpdateManyWithWhereWithoutWorkCenterInput | UserUpdateManyWithWhereWithoutWorkCenterInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type JobProgressUncheckedUpdateManyWithoutWorkCenterNestedInput = {
    create?: XOR<JobProgressCreateWithoutWorkCenterInput, JobProgressUncheckedCreateWithoutWorkCenterInput> | JobProgressCreateWithoutWorkCenterInput[] | JobProgressUncheckedCreateWithoutWorkCenterInput[]
    connectOrCreate?: JobProgressCreateOrConnectWithoutWorkCenterInput | JobProgressCreateOrConnectWithoutWorkCenterInput[]
    upsert?: JobProgressUpsertWithWhereUniqueWithoutWorkCenterInput | JobProgressUpsertWithWhereUniqueWithoutWorkCenterInput[]
    createMany?: JobProgressCreateManyWorkCenterInputEnvelope
    set?: JobProgressWhereUniqueInput | JobProgressWhereUniqueInput[]
    disconnect?: JobProgressWhereUniqueInput | JobProgressWhereUniqueInput[]
    delete?: JobProgressWhereUniqueInput | JobProgressWhereUniqueInput[]
    connect?: JobProgressWhereUniqueInput | JobProgressWhereUniqueInput[]
    update?: JobProgressUpdateWithWhereUniqueWithoutWorkCenterInput | JobProgressUpdateWithWhereUniqueWithoutWorkCenterInput[]
    updateMany?: JobProgressUpdateManyWithWhereWithoutWorkCenterInput | JobProgressUpdateManyWithWhereWithoutWorkCenterInput[]
    deleteMany?: JobProgressScalarWhereInput | JobProgressScalarWhereInput[]
  }

  export type KittingJobCreateNestedOneWithoutAssignmentsInput = {
    create?: XOR<KittingJobCreateWithoutAssignmentsInput, KittingJobUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: KittingJobCreateOrConnectWithoutAssignmentsInput
    connect?: KittingJobWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignedJobsInput = {
    create?: XOR<UserCreateWithoutAssignedJobsInput, UserUncheckedCreateWithoutAssignedJobsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedJobsInput
    connect?: UserWhereUniqueInput
  }

  export type KittingJobUpdateOneRequiredWithoutAssignmentsNestedInput = {
    create?: XOR<KittingJobCreateWithoutAssignmentsInput, KittingJobUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: KittingJobCreateOrConnectWithoutAssignmentsInput
    upsert?: KittingJobUpsertWithoutAssignmentsInput
    connect?: KittingJobWhereUniqueInput
    update?: XOR<XOR<KittingJobUpdateToOneWithWhereWithoutAssignmentsInput, KittingJobUpdateWithoutAssignmentsInput>, KittingJobUncheckedUpdateWithoutAssignmentsInput>
  }

  export type UserUpdateOneRequiredWithoutAssignedJobsNestedInput = {
    create?: XOR<UserCreateWithoutAssignedJobsInput, UserUncheckedCreateWithoutAssignedJobsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedJobsInput
    upsert?: UserUpsertWithoutAssignedJobsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedJobsInput, UserUpdateWithoutAssignedJobsInput>, UserUncheckedUpdateWithoutAssignedJobsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumJobStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusFilter<$PrismaModel> | $Enums.JobStatus
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumJobStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusWithAggregatesFilter<$PrismaModel> | $Enums.JobStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJobStatusFilter<$PrismaModel>
    _max?: NestedEnumJobStatusFilter<$PrismaModel>
  }

  export type NestedEnumInstructionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.InstructionType | EnumInstructionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InstructionType[] | ListEnumInstructionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InstructionType[] | ListEnumInstructionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInstructionTypeFilter<$PrismaModel> | $Enums.InstructionType
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumInstructionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InstructionType | EnumInstructionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InstructionType[] | ListEnumInstructionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InstructionType[] | ListEnumInstructionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInstructionTypeWithAggregatesFilter<$PrismaModel> | $Enums.InstructionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInstructionTypeFilter<$PrismaModel>
    _max?: NestedEnumInstructionTypeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type RouteStepCreateWithoutKittingJobInput = {
    id?: string
    name: string
    expectedSeconds: number
    order: number
    instructionType?: $Enums.InstructionType
    instructionUrl?: string | null
    instructionText?: string | null
    autoLoop?: boolean
    stepExecutions?: StepExecutionCreateNestedManyWithoutRouteStepInput
  }

  export type RouteStepUncheckedCreateWithoutKittingJobInput = {
    id?: string
    name: string
    expectedSeconds: number
    order: number
    instructionType?: $Enums.InstructionType
    instructionUrl?: string | null
    instructionText?: string | null
    autoLoop?: boolean
    stepExecutions?: StepExecutionUncheckedCreateNestedManyWithoutRouteStepInput
  }

  export type RouteStepCreateOrConnectWithoutKittingJobInput = {
    where: RouteStepWhereUniqueInput
    create: XOR<RouteStepCreateWithoutKittingJobInput, RouteStepUncheckedCreateWithoutKittingJobInput>
  }

  export type RouteStepCreateManyKittingJobInputEnvelope = {
    data: RouteStepCreateManyKittingJobInput | RouteStepCreateManyKittingJobInput[]
    skipDuplicates?: boolean
  }

  export type JobProgressCreateWithoutKittingJobInput = {
    id?: string
    startTime?: Date | string | null
    endTime?: Date | string | null
    actualJobDuration?: number | null
    completedKits?: number
    remainingKits: number
    currentKitNumber?: number | null
    isActive?: boolean
    pausedTime?: number
    assignedWorker?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workCenter?: WorkCenterCreateNestedOneWithoutJobProgressInput
    kitExecutions?: KitExecutionCreateNestedManyWithoutJobProgressInput
  }

  export type JobProgressUncheckedCreateWithoutKittingJobInput = {
    id?: string
    startTime?: Date | string | null
    endTime?: Date | string | null
    actualJobDuration?: number | null
    completedKits?: number
    remainingKits: number
    currentKitNumber?: number | null
    isActive?: boolean
    pausedTime?: number
    workCenterId?: string | null
    assignedWorker?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    kitExecutions?: KitExecutionUncheckedCreateNestedManyWithoutJobProgressInput
  }

  export type JobProgressCreateOrConnectWithoutKittingJobInput = {
    where: JobProgressWhereUniqueInput
    create: XOR<JobProgressCreateWithoutKittingJobInput, JobProgressUncheckedCreateWithoutKittingJobInput>
  }

  export type JobAnalyticsCreateWithoutKittingJobInput = {
    id?: string
    totalExpectedTime: number
    totalActualTime?: number | null
    efficiencyPercent?: number | null
    avgKitTime?: number | null
    fastestKitTime?: number | null
    slowestKitTime?: number | null
    stepAnalytics?: NullableJsonNullValueInput | InputJsonValue
    timeVariance?: number | null
    consistencyScore?: number | null
    onTimeCompletion?: boolean | null
    qualityIssues?: number
    lastCalculated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobAnalyticsUncheckedCreateWithoutKittingJobInput = {
    id?: string
    totalExpectedTime: number
    totalActualTime?: number | null
    efficiencyPercent?: number | null
    avgKitTime?: number | null
    fastestKitTime?: number | null
    slowestKitTime?: number | null
    stepAnalytics?: NullableJsonNullValueInput | InputJsonValue
    timeVariance?: number | null
    consistencyScore?: number | null
    onTimeCompletion?: boolean | null
    qualityIssues?: number
    lastCalculated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobAnalyticsCreateOrConnectWithoutKittingJobInput = {
    where: JobAnalyticsWhereUniqueInput
    create: XOR<JobAnalyticsCreateWithoutKittingJobInput, JobAnalyticsUncheckedCreateWithoutKittingJobInput>
  }

  export type JobAssignmentCreateWithoutJobInput = {
    id?: string
    assignedAt?: Date | string
    assignedBy: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAssignedJobsInput
  }

  export type JobAssignmentUncheckedCreateWithoutJobInput = {
    id?: string
    userId: string
    assignedAt?: Date | string
    assignedBy: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobAssignmentCreateOrConnectWithoutJobInput = {
    where: JobAssignmentWhereUniqueInput
    create: XOR<JobAssignmentCreateWithoutJobInput, JobAssignmentUncheckedCreateWithoutJobInput>
  }

  export type JobAssignmentCreateManyJobInputEnvelope = {
    data: JobAssignmentCreateManyJobInput | JobAssignmentCreateManyJobInput[]
    skipDuplicates?: boolean
  }

  export type RouteStepUpsertWithWhereUniqueWithoutKittingJobInput = {
    where: RouteStepWhereUniqueInput
    update: XOR<RouteStepUpdateWithoutKittingJobInput, RouteStepUncheckedUpdateWithoutKittingJobInput>
    create: XOR<RouteStepCreateWithoutKittingJobInput, RouteStepUncheckedCreateWithoutKittingJobInput>
  }

  export type RouteStepUpdateWithWhereUniqueWithoutKittingJobInput = {
    where: RouteStepWhereUniqueInput
    data: XOR<RouteStepUpdateWithoutKittingJobInput, RouteStepUncheckedUpdateWithoutKittingJobInput>
  }

  export type RouteStepUpdateManyWithWhereWithoutKittingJobInput = {
    where: RouteStepScalarWhereInput
    data: XOR<RouteStepUpdateManyMutationInput, RouteStepUncheckedUpdateManyWithoutKittingJobInput>
  }

  export type RouteStepScalarWhereInput = {
    AND?: RouteStepScalarWhereInput | RouteStepScalarWhereInput[]
    OR?: RouteStepScalarWhereInput[]
    NOT?: RouteStepScalarWhereInput | RouteStepScalarWhereInput[]
    id?: StringFilter<"RouteStep"> | string
    name?: StringFilter<"RouteStep"> | string
    expectedSeconds?: IntFilter<"RouteStep"> | number
    order?: IntFilter<"RouteStep"> | number
    instructionType?: EnumInstructionTypeFilter<"RouteStep"> | $Enums.InstructionType
    instructionUrl?: StringNullableFilter<"RouteStep"> | string | null
    instructionText?: StringNullableFilter<"RouteStep"> | string | null
    autoLoop?: BoolFilter<"RouteStep"> | boolean
    kittingJobId?: StringFilter<"RouteStep"> | string
  }

  export type JobProgressUpsertWithoutKittingJobInput = {
    update: XOR<JobProgressUpdateWithoutKittingJobInput, JobProgressUncheckedUpdateWithoutKittingJobInput>
    create: XOR<JobProgressCreateWithoutKittingJobInput, JobProgressUncheckedCreateWithoutKittingJobInput>
    where?: JobProgressWhereInput
  }

  export type JobProgressUpdateToOneWithWhereWithoutKittingJobInput = {
    where?: JobProgressWhereInput
    data: XOR<JobProgressUpdateWithoutKittingJobInput, JobProgressUncheckedUpdateWithoutKittingJobInput>
  }

  export type JobProgressUpdateWithoutKittingJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualJobDuration?: NullableIntFieldUpdateOperationsInput | number | null
    completedKits?: IntFieldUpdateOperationsInput | number
    remainingKits?: IntFieldUpdateOperationsInput | number
    currentKitNumber?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    pausedTime?: IntFieldUpdateOperationsInput | number
    assignedWorker?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workCenter?: WorkCenterUpdateOneWithoutJobProgressNestedInput
    kitExecutions?: KitExecutionUpdateManyWithoutJobProgressNestedInput
  }

  export type JobProgressUncheckedUpdateWithoutKittingJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualJobDuration?: NullableIntFieldUpdateOperationsInput | number | null
    completedKits?: IntFieldUpdateOperationsInput | number
    remainingKits?: IntFieldUpdateOperationsInput | number
    currentKitNumber?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    pausedTime?: IntFieldUpdateOperationsInput | number
    workCenterId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedWorker?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kitExecutions?: KitExecutionUncheckedUpdateManyWithoutJobProgressNestedInput
  }

  export type JobAnalyticsUpsertWithoutKittingJobInput = {
    update: XOR<JobAnalyticsUpdateWithoutKittingJobInput, JobAnalyticsUncheckedUpdateWithoutKittingJobInput>
    create: XOR<JobAnalyticsCreateWithoutKittingJobInput, JobAnalyticsUncheckedCreateWithoutKittingJobInput>
    where?: JobAnalyticsWhereInput
  }

  export type JobAnalyticsUpdateToOneWithWhereWithoutKittingJobInput = {
    where?: JobAnalyticsWhereInput
    data: XOR<JobAnalyticsUpdateWithoutKittingJobInput, JobAnalyticsUncheckedUpdateWithoutKittingJobInput>
  }

  export type JobAnalyticsUpdateWithoutKittingJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalExpectedTime?: IntFieldUpdateOperationsInput | number
    totalActualTime?: NullableIntFieldUpdateOperationsInput | number | null
    efficiencyPercent?: NullableFloatFieldUpdateOperationsInput | number | null
    avgKitTime?: NullableFloatFieldUpdateOperationsInput | number | null
    fastestKitTime?: NullableIntFieldUpdateOperationsInput | number | null
    slowestKitTime?: NullableIntFieldUpdateOperationsInput | number | null
    stepAnalytics?: NullableJsonNullValueInput | InputJsonValue
    timeVariance?: NullableFloatFieldUpdateOperationsInput | number | null
    consistencyScore?: NullableFloatFieldUpdateOperationsInput | number | null
    onTimeCompletion?: NullableBoolFieldUpdateOperationsInput | boolean | null
    qualityIssues?: IntFieldUpdateOperationsInput | number
    lastCalculated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobAnalyticsUncheckedUpdateWithoutKittingJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalExpectedTime?: IntFieldUpdateOperationsInput | number
    totalActualTime?: NullableIntFieldUpdateOperationsInput | number | null
    efficiencyPercent?: NullableFloatFieldUpdateOperationsInput | number | null
    avgKitTime?: NullableFloatFieldUpdateOperationsInput | number | null
    fastestKitTime?: NullableIntFieldUpdateOperationsInput | number | null
    slowestKitTime?: NullableIntFieldUpdateOperationsInput | number | null
    stepAnalytics?: NullableJsonNullValueInput | InputJsonValue
    timeVariance?: NullableFloatFieldUpdateOperationsInput | number | null
    consistencyScore?: NullableFloatFieldUpdateOperationsInput | number | null
    onTimeCompletion?: NullableBoolFieldUpdateOperationsInput | boolean | null
    qualityIssues?: IntFieldUpdateOperationsInput | number
    lastCalculated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobAssignmentUpsertWithWhereUniqueWithoutJobInput = {
    where: JobAssignmentWhereUniqueInput
    update: XOR<JobAssignmentUpdateWithoutJobInput, JobAssignmentUncheckedUpdateWithoutJobInput>
    create: XOR<JobAssignmentCreateWithoutJobInput, JobAssignmentUncheckedCreateWithoutJobInput>
  }

  export type JobAssignmentUpdateWithWhereUniqueWithoutJobInput = {
    where: JobAssignmentWhereUniqueInput
    data: XOR<JobAssignmentUpdateWithoutJobInput, JobAssignmentUncheckedUpdateWithoutJobInput>
  }

  export type JobAssignmentUpdateManyWithWhereWithoutJobInput = {
    where: JobAssignmentScalarWhereInput
    data: XOR<JobAssignmentUpdateManyMutationInput, JobAssignmentUncheckedUpdateManyWithoutJobInput>
  }

  export type JobAssignmentScalarWhereInput = {
    AND?: JobAssignmentScalarWhereInput | JobAssignmentScalarWhereInput[]
    OR?: JobAssignmentScalarWhereInput[]
    NOT?: JobAssignmentScalarWhereInput | JobAssignmentScalarWhereInput[]
    id?: StringFilter<"JobAssignment"> | string
    jobId?: StringFilter<"JobAssignment"> | string
    userId?: StringFilter<"JobAssignment"> | string
    assignedAt?: DateTimeFilter<"JobAssignment"> | Date | string
    assignedBy?: StringFilter<"JobAssignment"> | string
    isActive?: BoolFilter<"JobAssignment"> | boolean
    createdAt?: DateTimeFilter<"JobAssignment"> | Date | string
    updatedAt?: DateTimeFilter<"JobAssignment"> | Date | string
  }

  export type KittingJobCreateWithoutRouteStepsInput = {
    id?: string
    customerName: string
    jobNumber: string
    dueDate: Date | string
    orderedQuantity: number
    runLength: number
    customerSpec?: string | null
    description: string
    setup: number
    makeReady: number
    takeDown: number
    expectedKitDuration: number
    expectedJobDuration: number
    scheduledDate?: Date | string | null
    scheduledStartTime?: string | null
    status?: $Enums.JobStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    jobProgress?: JobProgressCreateNestedOneWithoutKittingJobInput
    analytics?: JobAnalyticsCreateNestedOneWithoutKittingJobInput
    assignments?: JobAssignmentCreateNestedManyWithoutJobInput
  }

  export type KittingJobUncheckedCreateWithoutRouteStepsInput = {
    id?: string
    customerName: string
    jobNumber: string
    dueDate: Date | string
    orderedQuantity: number
    runLength: number
    customerSpec?: string | null
    description: string
    setup: number
    makeReady: number
    takeDown: number
    expectedKitDuration: number
    expectedJobDuration: number
    scheduledDate?: Date | string | null
    scheduledStartTime?: string | null
    status?: $Enums.JobStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    jobProgress?: JobProgressUncheckedCreateNestedOneWithoutKittingJobInput
    analytics?: JobAnalyticsUncheckedCreateNestedOneWithoutKittingJobInput
    assignments?: JobAssignmentUncheckedCreateNestedManyWithoutJobInput
  }

  export type KittingJobCreateOrConnectWithoutRouteStepsInput = {
    where: KittingJobWhereUniqueInput
    create: XOR<KittingJobCreateWithoutRouteStepsInput, KittingJobUncheckedCreateWithoutRouteStepsInput>
  }

  export type StepExecutionCreateWithoutRouteStepInput = {
    id?: string
    startTime: Date | string
    endTime?: Date | string | null
    actualDuration?: number | null
    completed?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    kitExecution: KitExecutionCreateNestedOneWithoutStepExecutionsInput
  }

  export type StepExecutionUncheckedCreateWithoutRouteStepInput = {
    id?: string
    kitExecutionId: string
    startTime: Date | string
    endTime?: Date | string | null
    actualDuration?: number | null
    completed?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StepExecutionCreateOrConnectWithoutRouteStepInput = {
    where: StepExecutionWhereUniqueInput
    create: XOR<StepExecutionCreateWithoutRouteStepInput, StepExecutionUncheckedCreateWithoutRouteStepInput>
  }

  export type StepExecutionCreateManyRouteStepInputEnvelope = {
    data: StepExecutionCreateManyRouteStepInput | StepExecutionCreateManyRouteStepInput[]
    skipDuplicates?: boolean
  }

  export type KittingJobUpsertWithoutRouteStepsInput = {
    update: XOR<KittingJobUpdateWithoutRouteStepsInput, KittingJobUncheckedUpdateWithoutRouteStepsInput>
    create: XOR<KittingJobCreateWithoutRouteStepsInput, KittingJobUncheckedCreateWithoutRouteStepsInput>
    where?: KittingJobWhereInput
  }

  export type KittingJobUpdateToOneWithWhereWithoutRouteStepsInput = {
    where?: KittingJobWhereInput
    data: XOR<KittingJobUpdateWithoutRouteStepsInput, KittingJobUncheckedUpdateWithoutRouteStepsInput>
  }

  export type KittingJobUpdateWithoutRouteStepsInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerName?: StringFieldUpdateOperationsInput | string
    jobNumber?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    orderedQuantity?: IntFieldUpdateOperationsInput | number
    runLength?: IntFieldUpdateOperationsInput | number
    customerSpec?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    setup?: IntFieldUpdateOperationsInput | number
    makeReady?: IntFieldUpdateOperationsInput | number
    takeDown?: IntFieldUpdateOperationsInput | number
    expectedKitDuration?: IntFieldUpdateOperationsInput | number
    expectedJobDuration?: IntFieldUpdateOperationsInput | number
    scheduledDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledStartTime?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobProgress?: JobProgressUpdateOneWithoutKittingJobNestedInput
    analytics?: JobAnalyticsUpdateOneWithoutKittingJobNestedInput
    assignments?: JobAssignmentUpdateManyWithoutJobNestedInput
  }

  export type KittingJobUncheckedUpdateWithoutRouteStepsInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerName?: StringFieldUpdateOperationsInput | string
    jobNumber?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    orderedQuantity?: IntFieldUpdateOperationsInput | number
    runLength?: IntFieldUpdateOperationsInput | number
    customerSpec?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    setup?: IntFieldUpdateOperationsInput | number
    makeReady?: IntFieldUpdateOperationsInput | number
    takeDown?: IntFieldUpdateOperationsInput | number
    expectedKitDuration?: IntFieldUpdateOperationsInput | number
    expectedJobDuration?: IntFieldUpdateOperationsInput | number
    scheduledDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledStartTime?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobProgress?: JobProgressUncheckedUpdateOneWithoutKittingJobNestedInput
    analytics?: JobAnalyticsUncheckedUpdateOneWithoutKittingJobNestedInput
    assignments?: JobAssignmentUncheckedUpdateManyWithoutJobNestedInput
  }

  export type StepExecutionUpsertWithWhereUniqueWithoutRouteStepInput = {
    where: StepExecutionWhereUniqueInput
    update: XOR<StepExecutionUpdateWithoutRouteStepInput, StepExecutionUncheckedUpdateWithoutRouteStepInput>
    create: XOR<StepExecutionCreateWithoutRouteStepInput, StepExecutionUncheckedCreateWithoutRouteStepInput>
  }

  export type StepExecutionUpdateWithWhereUniqueWithoutRouteStepInput = {
    where: StepExecutionWhereUniqueInput
    data: XOR<StepExecutionUpdateWithoutRouteStepInput, StepExecutionUncheckedUpdateWithoutRouteStepInput>
  }

  export type StepExecutionUpdateManyWithWhereWithoutRouteStepInput = {
    where: StepExecutionScalarWhereInput
    data: XOR<StepExecutionUpdateManyMutationInput, StepExecutionUncheckedUpdateManyWithoutRouteStepInput>
  }

  export type StepExecutionScalarWhereInput = {
    AND?: StepExecutionScalarWhereInput | StepExecutionScalarWhereInput[]
    OR?: StepExecutionScalarWhereInput[]
    NOT?: StepExecutionScalarWhereInput | StepExecutionScalarWhereInput[]
    id?: StringFilter<"StepExecution"> | string
    kitExecutionId?: StringFilter<"StepExecution"> | string
    routeStepId?: StringFilter<"StepExecution"> | string
    startTime?: DateTimeFilter<"StepExecution"> | Date | string
    endTime?: DateTimeNullableFilter<"StepExecution"> | Date | string | null
    actualDuration?: IntNullableFilter<"StepExecution"> | number | null
    completed?: BoolFilter<"StepExecution"> | boolean
    createdAt?: DateTimeFilter<"StepExecution"> | Date | string
    updatedAt?: DateTimeFilter<"StepExecution"> | Date | string
  }

  export type KittingJobCreateWithoutJobProgressInput = {
    id?: string
    customerName: string
    jobNumber: string
    dueDate: Date | string
    orderedQuantity: number
    runLength: number
    customerSpec?: string | null
    description: string
    setup: number
    makeReady: number
    takeDown: number
    expectedKitDuration: number
    expectedJobDuration: number
    scheduledDate?: Date | string | null
    scheduledStartTime?: string | null
    status?: $Enums.JobStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    routeSteps?: RouteStepCreateNestedManyWithoutKittingJobInput
    analytics?: JobAnalyticsCreateNestedOneWithoutKittingJobInput
    assignments?: JobAssignmentCreateNestedManyWithoutJobInput
  }

  export type KittingJobUncheckedCreateWithoutJobProgressInput = {
    id?: string
    customerName: string
    jobNumber: string
    dueDate: Date | string
    orderedQuantity: number
    runLength: number
    customerSpec?: string | null
    description: string
    setup: number
    makeReady: number
    takeDown: number
    expectedKitDuration: number
    expectedJobDuration: number
    scheduledDate?: Date | string | null
    scheduledStartTime?: string | null
    status?: $Enums.JobStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    routeSteps?: RouteStepUncheckedCreateNestedManyWithoutKittingJobInput
    analytics?: JobAnalyticsUncheckedCreateNestedOneWithoutKittingJobInput
    assignments?: JobAssignmentUncheckedCreateNestedManyWithoutJobInput
  }

  export type KittingJobCreateOrConnectWithoutJobProgressInput = {
    where: KittingJobWhereUniqueInput
    create: XOR<KittingJobCreateWithoutJobProgressInput, KittingJobUncheckedCreateWithoutJobProgressInput>
  }

  export type WorkCenterCreateWithoutJobProgressInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutWorkCenterInput
  }

  export type WorkCenterUncheckedCreateWithoutJobProgressInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutWorkCenterInput
  }

  export type WorkCenterCreateOrConnectWithoutJobProgressInput = {
    where: WorkCenterWhereUniqueInput
    create: XOR<WorkCenterCreateWithoutJobProgressInput, WorkCenterUncheckedCreateWithoutJobProgressInput>
  }

  export type KitExecutionCreateWithoutJobProgressInput = {
    id?: string
    kitNumber: number
    startTime: Date | string
    endTime?: Date | string | null
    actualDuration?: number | null
    completed?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    stepExecutions?: StepExecutionCreateNestedManyWithoutKitExecutionInput
  }

  export type KitExecutionUncheckedCreateWithoutJobProgressInput = {
    id?: string
    kitNumber: number
    startTime: Date | string
    endTime?: Date | string | null
    actualDuration?: number | null
    completed?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    stepExecutions?: StepExecutionUncheckedCreateNestedManyWithoutKitExecutionInput
  }

  export type KitExecutionCreateOrConnectWithoutJobProgressInput = {
    where: KitExecutionWhereUniqueInput
    create: XOR<KitExecutionCreateWithoutJobProgressInput, KitExecutionUncheckedCreateWithoutJobProgressInput>
  }

  export type KitExecutionCreateManyJobProgressInputEnvelope = {
    data: KitExecutionCreateManyJobProgressInput | KitExecutionCreateManyJobProgressInput[]
    skipDuplicates?: boolean
  }

  export type KittingJobUpsertWithoutJobProgressInput = {
    update: XOR<KittingJobUpdateWithoutJobProgressInput, KittingJobUncheckedUpdateWithoutJobProgressInput>
    create: XOR<KittingJobCreateWithoutJobProgressInput, KittingJobUncheckedCreateWithoutJobProgressInput>
    where?: KittingJobWhereInput
  }

  export type KittingJobUpdateToOneWithWhereWithoutJobProgressInput = {
    where?: KittingJobWhereInput
    data: XOR<KittingJobUpdateWithoutJobProgressInput, KittingJobUncheckedUpdateWithoutJobProgressInput>
  }

  export type KittingJobUpdateWithoutJobProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerName?: StringFieldUpdateOperationsInput | string
    jobNumber?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    orderedQuantity?: IntFieldUpdateOperationsInput | number
    runLength?: IntFieldUpdateOperationsInput | number
    customerSpec?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    setup?: IntFieldUpdateOperationsInput | number
    makeReady?: IntFieldUpdateOperationsInput | number
    takeDown?: IntFieldUpdateOperationsInput | number
    expectedKitDuration?: IntFieldUpdateOperationsInput | number
    expectedJobDuration?: IntFieldUpdateOperationsInput | number
    scheduledDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledStartTime?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    routeSteps?: RouteStepUpdateManyWithoutKittingJobNestedInput
    analytics?: JobAnalyticsUpdateOneWithoutKittingJobNestedInput
    assignments?: JobAssignmentUpdateManyWithoutJobNestedInput
  }

  export type KittingJobUncheckedUpdateWithoutJobProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerName?: StringFieldUpdateOperationsInput | string
    jobNumber?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    orderedQuantity?: IntFieldUpdateOperationsInput | number
    runLength?: IntFieldUpdateOperationsInput | number
    customerSpec?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    setup?: IntFieldUpdateOperationsInput | number
    makeReady?: IntFieldUpdateOperationsInput | number
    takeDown?: IntFieldUpdateOperationsInput | number
    expectedKitDuration?: IntFieldUpdateOperationsInput | number
    expectedJobDuration?: IntFieldUpdateOperationsInput | number
    scheduledDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledStartTime?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    routeSteps?: RouteStepUncheckedUpdateManyWithoutKittingJobNestedInput
    analytics?: JobAnalyticsUncheckedUpdateOneWithoutKittingJobNestedInput
    assignments?: JobAssignmentUncheckedUpdateManyWithoutJobNestedInput
  }

  export type WorkCenterUpsertWithoutJobProgressInput = {
    update: XOR<WorkCenterUpdateWithoutJobProgressInput, WorkCenterUncheckedUpdateWithoutJobProgressInput>
    create: XOR<WorkCenterCreateWithoutJobProgressInput, WorkCenterUncheckedCreateWithoutJobProgressInput>
    where?: WorkCenterWhereInput
  }

  export type WorkCenterUpdateToOneWithWhereWithoutJobProgressInput = {
    where?: WorkCenterWhereInput
    data: XOR<WorkCenterUpdateWithoutJobProgressInput, WorkCenterUncheckedUpdateWithoutJobProgressInput>
  }

  export type WorkCenterUpdateWithoutJobProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutWorkCenterNestedInput
  }

  export type WorkCenterUncheckedUpdateWithoutJobProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutWorkCenterNestedInput
  }

  export type KitExecutionUpsertWithWhereUniqueWithoutJobProgressInput = {
    where: KitExecutionWhereUniqueInput
    update: XOR<KitExecutionUpdateWithoutJobProgressInput, KitExecutionUncheckedUpdateWithoutJobProgressInput>
    create: XOR<KitExecutionCreateWithoutJobProgressInput, KitExecutionUncheckedCreateWithoutJobProgressInput>
  }

  export type KitExecutionUpdateWithWhereUniqueWithoutJobProgressInput = {
    where: KitExecutionWhereUniqueInput
    data: XOR<KitExecutionUpdateWithoutJobProgressInput, KitExecutionUncheckedUpdateWithoutJobProgressInput>
  }

  export type KitExecutionUpdateManyWithWhereWithoutJobProgressInput = {
    where: KitExecutionScalarWhereInput
    data: XOR<KitExecutionUpdateManyMutationInput, KitExecutionUncheckedUpdateManyWithoutJobProgressInput>
  }

  export type KitExecutionScalarWhereInput = {
    AND?: KitExecutionScalarWhereInput | KitExecutionScalarWhereInput[]
    OR?: KitExecutionScalarWhereInput[]
    NOT?: KitExecutionScalarWhereInput | KitExecutionScalarWhereInput[]
    id?: StringFilter<"KitExecution"> | string
    jobProgressId?: StringFilter<"KitExecution"> | string
    kitNumber?: IntFilter<"KitExecution"> | number
    startTime?: DateTimeFilter<"KitExecution"> | Date | string
    endTime?: DateTimeNullableFilter<"KitExecution"> | Date | string | null
    actualDuration?: IntNullableFilter<"KitExecution"> | number | null
    completed?: BoolFilter<"KitExecution"> | boolean
    createdAt?: DateTimeFilter<"KitExecution"> | Date | string
    updatedAt?: DateTimeFilter<"KitExecution"> | Date | string
  }

  export type JobProgressCreateWithoutKitExecutionsInput = {
    id?: string
    startTime?: Date | string | null
    endTime?: Date | string | null
    actualJobDuration?: number | null
    completedKits?: number
    remainingKits: number
    currentKitNumber?: number | null
    isActive?: boolean
    pausedTime?: number
    assignedWorker?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    kittingJob: KittingJobCreateNestedOneWithoutJobProgressInput
    workCenter?: WorkCenterCreateNestedOneWithoutJobProgressInput
  }

  export type JobProgressUncheckedCreateWithoutKitExecutionsInput = {
    id?: string
    jobId: string
    startTime?: Date | string | null
    endTime?: Date | string | null
    actualJobDuration?: number | null
    completedKits?: number
    remainingKits: number
    currentKitNumber?: number | null
    isActive?: boolean
    pausedTime?: number
    workCenterId?: string | null
    assignedWorker?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobProgressCreateOrConnectWithoutKitExecutionsInput = {
    where: JobProgressWhereUniqueInput
    create: XOR<JobProgressCreateWithoutKitExecutionsInput, JobProgressUncheckedCreateWithoutKitExecutionsInput>
  }

  export type StepExecutionCreateWithoutKitExecutionInput = {
    id?: string
    startTime: Date | string
    endTime?: Date | string | null
    actualDuration?: number | null
    completed?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    routeStep: RouteStepCreateNestedOneWithoutStepExecutionsInput
  }

  export type StepExecutionUncheckedCreateWithoutKitExecutionInput = {
    id?: string
    routeStepId: string
    startTime: Date | string
    endTime?: Date | string | null
    actualDuration?: number | null
    completed?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StepExecutionCreateOrConnectWithoutKitExecutionInput = {
    where: StepExecutionWhereUniqueInput
    create: XOR<StepExecutionCreateWithoutKitExecutionInput, StepExecutionUncheckedCreateWithoutKitExecutionInput>
  }

  export type StepExecutionCreateManyKitExecutionInputEnvelope = {
    data: StepExecutionCreateManyKitExecutionInput | StepExecutionCreateManyKitExecutionInput[]
    skipDuplicates?: boolean
  }

  export type JobProgressUpsertWithoutKitExecutionsInput = {
    update: XOR<JobProgressUpdateWithoutKitExecutionsInput, JobProgressUncheckedUpdateWithoutKitExecutionsInput>
    create: XOR<JobProgressCreateWithoutKitExecutionsInput, JobProgressUncheckedCreateWithoutKitExecutionsInput>
    where?: JobProgressWhereInput
  }

  export type JobProgressUpdateToOneWithWhereWithoutKitExecutionsInput = {
    where?: JobProgressWhereInput
    data: XOR<JobProgressUpdateWithoutKitExecutionsInput, JobProgressUncheckedUpdateWithoutKitExecutionsInput>
  }

  export type JobProgressUpdateWithoutKitExecutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualJobDuration?: NullableIntFieldUpdateOperationsInput | number | null
    completedKits?: IntFieldUpdateOperationsInput | number
    remainingKits?: IntFieldUpdateOperationsInput | number
    currentKitNumber?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    pausedTime?: IntFieldUpdateOperationsInput | number
    assignedWorker?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kittingJob?: KittingJobUpdateOneRequiredWithoutJobProgressNestedInput
    workCenter?: WorkCenterUpdateOneWithoutJobProgressNestedInput
  }

  export type JobProgressUncheckedUpdateWithoutKitExecutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualJobDuration?: NullableIntFieldUpdateOperationsInput | number | null
    completedKits?: IntFieldUpdateOperationsInput | number
    remainingKits?: IntFieldUpdateOperationsInput | number
    currentKitNumber?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    pausedTime?: IntFieldUpdateOperationsInput | number
    workCenterId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedWorker?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StepExecutionUpsertWithWhereUniqueWithoutKitExecutionInput = {
    where: StepExecutionWhereUniqueInput
    update: XOR<StepExecutionUpdateWithoutKitExecutionInput, StepExecutionUncheckedUpdateWithoutKitExecutionInput>
    create: XOR<StepExecutionCreateWithoutKitExecutionInput, StepExecutionUncheckedCreateWithoutKitExecutionInput>
  }

  export type StepExecutionUpdateWithWhereUniqueWithoutKitExecutionInput = {
    where: StepExecutionWhereUniqueInput
    data: XOR<StepExecutionUpdateWithoutKitExecutionInput, StepExecutionUncheckedUpdateWithoutKitExecutionInput>
  }

  export type StepExecutionUpdateManyWithWhereWithoutKitExecutionInput = {
    where: StepExecutionScalarWhereInput
    data: XOR<StepExecutionUpdateManyMutationInput, StepExecutionUncheckedUpdateManyWithoutKitExecutionInput>
  }

  export type KitExecutionCreateWithoutStepExecutionsInput = {
    id?: string
    kitNumber: number
    startTime: Date | string
    endTime?: Date | string | null
    actualDuration?: number | null
    completed?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    jobProgress: JobProgressCreateNestedOneWithoutKitExecutionsInput
  }

  export type KitExecutionUncheckedCreateWithoutStepExecutionsInput = {
    id?: string
    jobProgressId: string
    kitNumber: number
    startTime: Date | string
    endTime?: Date | string | null
    actualDuration?: number | null
    completed?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KitExecutionCreateOrConnectWithoutStepExecutionsInput = {
    where: KitExecutionWhereUniqueInput
    create: XOR<KitExecutionCreateWithoutStepExecutionsInput, KitExecutionUncheckedCreateWithoutStepExecutionsInput>
  }

  export type RouteStepCreateWithoutStepExecutionsInput = {
    id?: string
    name: string
    expectedSeconds: number
    order: number
    instructionType?: $Enums.InstructionType
    instructionUrl?: string | null
    instructionText?: string | null
    autoLoop?: boolean
    kittingJob: KittingJobCreateNestedOneWithoutRouteStepsInput
  }

  export type RouteStepUncheckedCreateWithoutStepExecutionsInput = {
    id?: string
    name: string
    expectedSeconds: number
    order: number
    instructionType?: $Enums.InstructionType
    instructionUrl?: string | null
    instructionText?: string | null
    autoLoop?: boolean
    kittingJobId: string
  }

  export type RouteStepCreateOrConnectWithoutStepExecutionsInput = {
    where: RouteStepWhereUniqueInput
    create: XOR<RouteStepCreateWithoutStepExecutionsInput, RouteStepUncheckedCreateWithoutStepExecutionsInput>
  }

  export type KitExecutionUpsertWithoutStepExecutionsInput = {
    update: XOR<KitExecutionUpdateWithoutStepExecutionsInput, KitExecutionUncheckedUpdateWithoutStepExecutionsInput>
    create: XOR<KitExecutionCreateWithoutStepExecutionsInput, KitExecutionUncheckedCreateWithoutStepExecutionsInput>
    where?: KitExecutionWhereInput
  }

  export type KitExecutionUpdateToOneWithWhereWithoutStepExecutionsInput = {
    where?: KitExecutionWhereInput
    data: XOR<KitExecutionUpdateWithoutStepExecutionsInput, KitExecutionUncheckedUpdateWithoutStepExecutionsInput>
  }

  export type KitExecutionUpdateWithoutStepExecutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    kitNumber?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobProgress?: JobProgressUpdateOneRequiredWithoutKitExecutionsNestedInput
  }

  export type KitExecutionUncheckedUpdateWithoutStepExecutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobProgressId?: StringFieldUpdateOperationsInput | string
    kitNumber?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RouteStepUpsertWithoutStepExecutionsInput = {
    update: XOR<RouteStepUpdateWithoutStepExecutionsInput, RouteStepUncheckedUpdateWithoutStepExecutionsInput>
    create: XOR<RouteStepCreateWithoutStepExecutionsInput, RouteStepUncheckedCreateWithoutStepExecutionsInput>
    where?: RouteStepWhereInput
  }

  export type RouteStepUpdateToOneWithWhereWithoutStepExecutionsInput = {
    where?: RouteStepWhereInput
    data: XOR<RouteStepUpdateWithoutStepExecutionsInput, RouteStepUncheckedUpdateWithoutStepExecutionsInput>
  }

  export type RouteStepUpdateWithoutStepExecutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    expectedSeconds?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    instructionType?: EnumInstructionTypeFieldUpdateOperationsInput | $Enums.InstructionType
    instructionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instructionText?: NullableStringFieldUpdateOperationsInput | string | null
    autoLoop?: BoolFieldUpdateOperationsInput | boolean
    kittingJob?: KittingJobUpdateOneRequiredWithoutRouteStepsNestedInput
  }

  export type RouteStepUncheckedUpdateWithoutStepExecutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    expectedSeconds?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    instructionType?: EnumInstructionTypeFieldUpdateOperationsInput | $Enums.InstructionType
    instructionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instructionText?: NullableStringFieldUpdateOperationsInput | string | null
    autoLoop?: BoolFieldUpdateOperationsInput | boolean
    kittingJobId?: StringFieldUpdateOperationsInput | string
  }

  export type KittingJobCreateWithoutAnalyticsInput = {
    id?: string
    customerName: string
    jobNumber: string
    dueDate: Date | string
    orderedQuantity: number
    runLength: number
    customerSpec?: string | null
    description: string
    setup: number
    makeReady: number
    takeDown: number
    expectedKitDuration: number
    expectedJobDuration: number
    scheduledDate?: Date | string | null
    scheduledStartTime?: string | null
    status?: $Enums.JobStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    routeSteps?: RouteStepCreateNestedManyWithoutKittingJobInput
    jobProgress?: JobProgressCreateNestedOneWithoutKittingJobInput
    assignments?: JobAssignmentCreateNestedManyWithoutJobInput
  }

  export type KittingJobUncheckedCreateWithoutAnalyticsInput = {
    id?: string
    customerName: string
    jobNumber: string
    dueDate: Date | string
    orderedQuantity: number
    runLength: number
    customerSpec?: string | null
    description: string
    setup: number
    makeReady: number
    takeDown: number
    expectedKitDuration: number
    expectedJobDuration: number
    scheduledDate?: Date | string | null
    scheduledStartTime?: string | null
    status?: $Enums.JobStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    routeSteps?: RouteStepUncheckedCreateNestedManyWithoutKittingJobInput
    jobProgress?: JobProgressUncheckedCreateNestedOneWithoutKittingJobInput
    assignments?: JobAssignmentUncheckedCreateNestedManyWithoutJobInput
  }

  export type KittingJobCreateOrConnectWithoutAnalyticsInput = {
    where: KittingJobWhereUniqueInput
    create: XOR<KittingJobCreateWithoutAnalyticsInput, KittingJobUncheckedCreateWithoutAnalyticsInput>
  }

  export type KittingJobUpsertWithoutAnalyticsInput = {
    update: XOR<KittingJobUpdateWithoutAnalyticsInput, KittingJobUncheckedUpdateWithoutAnalyticsInput>
    create: XOR<KittingJobCreateWithoutAnalyticsInput, KittingJobUncheckedCreateWithoutAnalyticsInput>
    where?: KittingJobWhereInput
  }

  export type KittingJobUpdateToOneWithWhereWithoutAnalyticsInput = {
    where?: KittingJobWhereInput
    data: XOR<KittingJobUpdateWithoutAnalyticsInput, KittingJobUncheckedUpdateWithoutAnalyticsInput>
  }

  export type KittingJobUpdateWithoutAnalyticsInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerName?: StringFieldUpdateOperationsInput | string
    jobNumber?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    orderedQuantity?: IntFieldUpdateOperationsInput | number
    runLength?: IntFieldUpdateOperationsInput | number
    customerSpec?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    setup?: IntFieldUpdateOperationsInput | number
    makeReady?: IntFieldUpdateOperationsInput | number
    takeDown?: IntFieldUpdateOperationsInput | number
    expectedKitDuration?: IntFieldUpdateOperationsInput | number
    expectedJobDuration?: IntFieldUpdateOperationsInput | number
    scheduledDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledStartTime?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    routeSteps?: RouteStepUpdateManyWithoutKittingJobNestedInput
    jobProgress?: JobProgressUpdateOneWithoutKittingJobNestedInput
    assignments?: JobAssignmentUpdateManyWithoutJobNestedInput
  }

  export type KittingJobUncheckedUpdateWithoutAnalyticsInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerName?: StringFieldUpdateOperationsInput | string
    jobNumber?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    orderedQuantity?: IntFieldUpdateOperationsInput | number
    runLength?: IntFieldUpdateOperationsInput | number
    customerSpec?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    setup?: IntFieldUpdateOperationsInput | number
    makeReady?: IntFieldUpdateOperationsInput | number
    takeDown?: IntFieldUpdateOperationsInput | number
    expectedKitDuration?: IntFieldUpdateOperationsInput | number
    expectedJobDuration?: IntFieldUpdateOperationsInput | number
    scheduledDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledStartTime?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    routeSteps?: RouteStepUncheckedUpdateManyWithoutKittingJobNestedInput
    jobProgress?: JobProgressUncheckedUpdateOneWithoutKittingJobNestedInput
    assignments?: JobAssignmentUncheckedUpdateManyWithoutJobNestedInput
  }

  export type WorkCenterCreateWithoutUsersInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    jobProgress?: JobProgressCreateNestedManyWithoutWorkCenterInput
  }

  export type WorkCenterUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    jobProgress?: JobProgressUncheckedCreateNestedManyWithoutWorkCenterInput
  }

  export type WorkCenterCreateOrConnectWithoutUsersInput = {
    where: WorkCenterWhereUniqueInput
    create: XOR<WorkCenterCreateWithoutUsersInput, WorkCenterUncheckedCreateWithoutUsersInput>
  }

  export type JobAssignmentCreateWithoutUserInput = {
    id?: string
    assignedAt?: Date | string
    assignedBy: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    job: KittingJobCreateNestedOneWithoutAssignmentsInput
  }

  export type JobAssignmentUncheckedCreateWithoutUserInput = {
    id?: string
    jobId: string
    assignedAt?: Date | string
    assignedBy: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobAssignmentCreateOrConnectWithoutUserInput = {
    where: JobAssignmentWhereUniqueInput
    create: XOR<JobAssignmentCreateWithoutUserInput, JobAssignmentUncheckedCreateWithoutUserInput>
  }

  export type JobAssignmentCreateManyUserInputEnvelope = {
    data: JobAssignmentCreateManyUserInput | JobAssignmentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type WorkCenterUpsertWithoutUsersInput = {
    update: XOR<WorkCenterUpdateWithoutUsersInput, WorkCenterUncheckedUpdateWithoutUsersInput>
    create: XOR<WorkCenterCreateWithoutUsersInput, WorkCenterUncheckedCreateWithoutUsersInput>
    where?: WorkCenterWhereInput
  }

  export type WorkCenterUpdateToOneWithWhereWithoutUsersInput = {
    where?: WorkCenterWhereInput
    data: XOR<WorkCenterUpdateWithoutUsersInput, WorkCenterUncheckedUpdateWithoutUsersInput>
  }

  export type WorkCenterUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobProgress?: JobProgressUpdateManyWithoutWorkCenterNestedInput
  }

  export type WorkCenterUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobProgress?: JobProgressUncheckedUpdateManyWithoutWorkCenterNestedInput
  }

  export type JobAssignmentUpsertWithWhereUniqueWithoutUserInput = {
    where: JobAssignmentWhereUniqueInput
    update: XOR<JobAssignmentUpdateWithoutUserInput, JobAssignmentUncheckedUpdateWithoutUserInput>
    create: XOR<JobAssignmentCreateWithoutUserInput, JobAssignmentUncheckedCreateWithoutUserInput>
  }

  export type JobAssignmentUpdateWithWhereUniqueWithoutUserInput = {
    where: JobAssignmentWhereUniqueInput
    data: XOR<JobAssignmentUpdateWithoutUserInput, JobAssignmentUncheckedUpdateWithoutUserInput>
  }

  export type JobAssignmentUpdateManyWithWhereWithoutUserInput = {
    where: JobAssignmentScalarWhereInput
    data: XOR<JobAssignmentUpdateManyMutationInput, JobAssignmentUncheckedUpdateManyWithoutUserInput>
  }

  export type UserCreateWithoutWorkCenterInput = {
    id?: string
    name: string
    email: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedJobs?: JobAssignmentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWorkCenterInput = {
    id?: string
    name: string
    email: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedJobs?: JobAssignmentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWorkCenterInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWorkCenterInput, UserUncheckedCreateWithoutWorkCenterInput>
  }

  export type UserCreateManyWorkCenterInputEnvelope = {
    data: UserCreateManyWorkCenterInput | UserCreateManyWorkCenterInput[]
    skipDuplicates?: boolean
  }

  export type JobProgressCreateWithoutWorkCenterInput = {
    id?: string
    startTime?: Date | string | null
    endTime?: Date | string | null
    actualJobDuration?: number | null
    completedKits?: number
    remainingKits: number
    currentKitNumber?: number | null
    isActive?: boolean
    pausedTime?: number
    assignedWorker?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    kittingJob: KittingJobCreateNestedOneWithoutJobProgressInput
    kitExecutions?: KitExecutionCreateNestedManyWithoutJobProgressInput
  }

  export type JobProgressUncheckedCreateWithoutWorkCenterInput = {
    id?: string
    jobId: string
    startTime?: Date | string | null
    endTime?: Date | string | null
    actualJobDuration?: number | null
    completedKits?: number
    remainingKits: number
    currentKitNumber?: number | null
    isActive?: boolean
    pausedTime?: number
    assignedWorker?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    kitExecutions?: KitExecutionUncheckedCreateNestedManyWithoutJobProgressInput
  }

  export type JobProgressCreateOrConnectWithoutWorkCenterInput = {
    where: JobProgressWhereUniqueInput
    create: XOR<JobProgressCreateWithoutWorkCenterInput, JobProgressUncheckedCreateWithoutWorkCenterInput>
  }

  export type JobProgressCreateManyWorkCenterInputEnvelope = {
    data: JobProgressCreateManyWorkCenterInput | JobProgressCreateManyWorkCenterInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutWorkCenterInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutWorkCenterInput, UserUncheckedUpdateWithoutWorkCenterInput>
    create: XOR<UserCreateWithoutWorkCenterInput, UserUncheckedCreateWithoutWorkCenterInput>
  }

  export type UserUpdateWithWhereUniqueWithoutWorkCenterInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutWorkCenterInput, UserUncheckedUpdateWithoutWorkCenterInput>
  }

  export type UserUpdateManyWithWhereWithoutWorkCenterInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutWorkCenterInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    workCenterId?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type JobProgressUpsertWithWhereUniqueWithoutWorkCenterInput = {
    where: JobProgressWhereUniqueInput
    update: XOR<JobProgressUpdateWithoutWorkCenterInput, JobProgressUncheckedUpdateWithoutWorkCenterInput>
    create: XOR<JobProgressCreateWithoutWorkCenterInput, JobProgressUncheckedCreateWithoutWorkCenterInput>
  }

  export type JobProgressUpdateWithWhereUniqueWithoutWorkCenterInput = {
    where: JobProgressWhereUniqueInput
    data: XOR<JobProgressUpdateWithoutWorkCenterInput, JobProgressUncheckedUpdateWithoutWorkCenterInput>
  }

  export type JobProgressUpdateManyWithWhereWithoutWorkCenterInput = {
    where: JobProgressScalarWhereInput
    data: XOR<JobProgressUpdateManyMutationInput, JobProgressUncheckedUpdateManyWithoutWorkCenterInput>
  }

  export type JobProgressScalarWhereInput = {
    AND?: JobProgressScalarWhereInput | JobProgressScalarWhereInput[]
    OR?: JobProgressScalarWhereInput[]
    NOT?: JobProgressScalarWhereInput | JobProgressScalarWhereInput[]
    id?: StringFilter<"JobProgress"> | string
    jobId?: StringFilter<"JobProgress"> | string
    startTime?: DateTimeNullableFilter<"JobProgress"> | Date | string | null
    endTime?: DateTimeNullableFilter<"JobProgress"> | Date | string | null
    actualJobDuration?: IntNullableFilter<"JobProgress"> | number | null
    completedKits?: IntFilter<"JobProgress"> | number
    remainingKits?: IntFilter<"JobProgress"> | number
    currentKitNumber?: IntNullableFilter<"JobProgress"> | number | null
    isActive?: BoolFilter<"JobProgress"> | boolean
    pausedTime?: IntFilter<"JobProgress"> | number
    workCenterId?: StringNullableFilter<"JobProgress"> | string | null
    assignedWorker?: StringNullableFilter<"JobProgress"> | string | null
    createdAt?: DateTimeFilter<"JobProgress"> | Date | string
    updatedAt?: DateTimeFilter<"JobProgress"> | Date | string
  }

  export type KittingJobCreateWithoutAssignmentsInput = {
    id?: string
    customerName: string
    jobNumber: string
    dueDate: Date | string
    orderedQuantity: number
    runLength: number
    customerSpec?: string | null
    description: string
    setup: number
    makeReady: number
    takeDown: number
    expectedKitDuration: number
    expectedJobDuration: number
    scheduledDate?: Date | string | null
    scheduledStartTime?: string | null
    status?: $Enums.JobStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    routeSteps?: RouteStepCreateNestedManyWithoutKittingJobInput
    jobProgress?: JobProgressCreateNestedOneWithoutKittingJobInput
    analytics?: JobAnalyticsCreateNestedOneWithoutKittingJobInput
  }

  export type KittingJobUncheckedCreateWithoutAssignmentsInput = {
    id?: string
    customerName: string
    jobNumber: string
    dueDate: Date | string
    orderedQuantity: number
    runLength: number
    customerSpec?: string | null
    description: string
    setup: number
    makeReady: number
    takeDown: number
    expectedKitDuration: number
    expectedJobDuration: number
    scheduledDate?: Date | string | null
    scheduledStartTime?: string | null
    status?: $Enums.JobStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    routeSteps?: RouteStepUncheckedCreateNestedManyWithoutKittingJobInput
    jobProgress?: JobProgressUncheckedCreateNestedOneWithoutKittingJobInput
    analytics?: JobAnalyticsUncheckedCreateNestedOneWithoutKittingJobInput
  }

  export type KittingJobCreateOrConnectWithoutAssignmentsInput = {
    where: KittingJobWhereUniqueInput
    create: XOR<KittingJobCreateWithoutAssignmentsInput, KittingJobUncheckedCreateWithoutAssignmentsInput>
  }

  export type UserCreateWithoutAssignedJobsInput = {
    id?: string
    name: string
    email: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    workCenter?: WorkCenterCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutAssignedJobsInput = {
    id?: string
    name: string
    email: string
    role?: $Enums.UserRole
    workCenterId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutAssignedJobsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedJobsInput, UserUncheckedCreateWithoutAssignedJobsInput>
  }

  export type KittingJobUpsertWithoutAssignmentsInput = {
    update: XOR<KittingJobUpdateWithoutAssignmentsInput, KittingJobUncheckedUpdateWithoutAssignmentsInput>
    create: XOR<KittingJobCreateWithoutAssignmentsInput, KittingJobUncheckedCreateWithoutAssignmentsInput>
    where?: KittingJobWhereInput
  }

  export type KittingJobUpdateToOneWithWhereWithoutAssignmentsInput = {
    where?: KittingJobWhereInput
    data: XOR<KittingJobUpdateWithoutAssignmentsInput, KittingJobUncheckedUpdateWithoutAssignmentsInput>
  }

  export type KittingJobUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerName?: StringFieldUpdateOperationsInput | string
    jobNumber?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    orderedQuantity?: IntFieldUpdateOperationsInput | number
    runLength?: IntFieldUpdateOperationsInput | number
    customerSpec?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    setup?: IntFieldUpdateOperationsInput | number
    makeReady?: IntFieldUpdateOperationsInput | number
    takeDown?: IntFieldUpdateOperationsInput | number
    expectedKitDuration?: IntFieldUpdateOperationsInput | number
    expectedJobDuration?: IntFieldUpdateOperationsInput | number
    scheduledDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledStartTime?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    routeSteps?: RouteStepUpdateManyWithoutKittingJobNestedInput
    jobProgress?: JobProgressUpdateOneWithoutKittingJobNestedInput
    analytics?: JobAnalyticsUpdateOneWithoutKittingJobNestedInput
  }

  export type KittingJobUncheckedUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerName?: StringFieldUpdateOperationsInput | string
    jobNumber?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    orderedQuantity?: IntFieldUpdateOperationsInput | number
    runLength?: IntFieldUpdateOperationsInput | number
    customerSpec?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    setup?: IntFieldUpdateOperationsInput | number
    makeReady?: IntFieldUpdateOperationsInput | number
    takeDown?: IntFieldUpdateOperationsInput | number
    expectedKitDuration?: IntFieldUpdateOperationsInput | number
    expectedJobDuration?: IntFieldUpdateOperationsInput | number
    scheduledDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledStartTime?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    routeSteps?: RouteStepUncheckedUpdateManyWithoutKittingJobNestedInput
    jobProgress?: JobProgressUncheckedUpdateOneWithoutKittingJobNestedInput
    analytics?: JobAnalyticsUncheckedUpdateOneWithoutKittingJobNestedInput
  }

  export type UserUpsertWithoutAssignedJobsInput = {
    update: XOR<UserUpdateWithoutAssignedJobsInput, UserUncheckedUpdateWithoutAssignedJobsInput>
    create: XOR<UserCreateWithoutAssignedJobsInput, UserUncheckedCreateWithoutAssignedJobsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedJobsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedJobsInput, UserUncheckedUpdateWithoutAssignedJobsInput>
  }

  export type UserUpdateWithoutAssignedJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workCenter?: WorkCenterUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    workCenterId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RouteStepCreateManyKittingJobInput = {
    id?: string
    name: string
    expectedSeconds: number
    order: number
    instructionType?: $Enums.InstructionType
    instructionUrl?: string | null
    instructionText?: string | null
    autoLoop?: boolean
  }

  export type JobAssignmentCreateManyJobInput = {
    id?: string
    userId: string
    assignedAt?: Date | string
    assignedBy: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RouteStepUpdateWithoutKittingJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    expectedSeconds?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    instructionType?: EnumInstructionTypeFieldUpdateOperationsInput | $Enums.InstructionType
    instructionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instructionText?: NullableStringFieldUpdateOperationsInput | string | null
    autoLoop?: BoolFieldUpdateOperationsInput | boolean
    stepExecutions?: StepExecutionUpdateManyWithoutRouteStepNestedInput
  }

  export type RouteStepUncheckedUpdateWithoutKittingJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    expectedSeconds?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    instructionType?: EnumInstructionTypeFieldUpdateOperationsInput | $Enums.InstructionType
    instructionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instructionText?: NullableStringFieldUpdateOperationsInput | string | null
    autoLoop?: BoolFieldUpdateOperationsInput | boolean
    stepExecutions?: StepExecutionUncheckedUpdateManyWithoutRouteStepNestedInput
  }

  export type RouteStepUncheckedUpdateManyWithoutKittingJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    expectedSeconds?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    instructionType?: EnumInstructionTypeFieldUpdateOperationsInput | $Enums.InstructionType
    instructionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instructionText?: NullableStringFieldUpdateOperationsInput | string | null
    autoLoop?: BoolFieldUpdateOperationsInput | boolean
  }

  export type JobAssignmentUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAssignedJobsNestedInput
  }

  export type JobAssignmentUncheckedUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobAssignmentUncheckedUpdateManyWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StepExecutionCreateManyRouteStepInput = {
    id?: string
    kitExecutionId: string
    startTime: Date | string
    endTime?: Date | string | null
    actualDuration?: number | null
    completed?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StepExecutionUpdateWithoutRouteStepInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kitExecution?: KitExecutionUpdateOneRequiredWithoutStepExecutionsNestedInput
  }

  export type StepExecutionUncheckedUpdateWithoutRouteStepInput = {
    id?: StringFieldUpdateOperationsInput | string
    kitExecutionId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StepExecutionUncheckedUpdateManyWithoutRouteStepInput = {
    id?: StringFieldUpdateOperationsInput | string
    kitExecutionId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KitExecutionCreateManyJobProgressInput = {
    id?: string
    kitNumber: number
    startTime: Date | string
    endTime?: Date | string | null
    actualDuration?: number | null
    completed?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KitExecutionUpdateWithoutJobProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    kitNumber?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stepExecutions?: StepExecutionUpdateManyWithoutKitExecutionNestedInput
  }

  export type KitExecutionUncheckedUpdateWithoutJobProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    kitNumber?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stepExecutions?: StepExecutionUncheckedUpdateManyWithoutKitExecutionNestedInput
  }

  export type KitExecutionUncheckedUpdateManyWithoutJobProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    kitNumber?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StepExecutionCreateManyKitExecutionInput = {
    id?: string
    routeStepId: string
    startTime: Date | string
    endTime?: Date | string | null
    actualDuration?: number | null
    completed?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StepExecutionUpdateWithoutKitExecutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    routeStep?: RouteStepUpdateOneRequiredWithoutStepExecutionsNestedInput
  }

  export type StepExecutionUncheckedUpdateWithoutKitExecutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    routeStepId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StepExecutionUncheckedUpdateManyWithoutKitExecutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    routeStepId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobAssignmentCreateManyUserInput = {
    id?: string
    jobId: string
    assignedAt?: Date | string
    assignedBy: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobAssignmentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: KittingJobUpdateOneRequiredWithoutAssignmentsNestedInput
  }

  export type JobAssignmentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobAssignmentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyWorkCenterInput = {
    id?: string
    name: string
    email: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobProgressCreateManyWorkCenterInput = {
    id?: string
    jobId: string
    startTime?: Date | string | null
    endTime?: Date | string | null
    actualJobDuration?: number | null
    completedKits?: number
    remainingKits: number
    currentKitNumber?: number | null
    isActive?: boolean
    pausedTime?: number
    assignedWorker?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateWithoutWorkCenterInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedJobs?: JobAssignmentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWorkCenterInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedJobs?: JobAssignmentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutWorkCenterInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobProgressUpdateWithoutWorkCenterInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualJobDuration?: NullableIntFieldUpdateOperationsInput | number | null
    completedKits?: IntFieldUpdateOperationsInput | number
    remainingKits?: IntFieldUpdateOperationsInput | number
    currentKitNumber?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    pausedTime?: IntFieldUpdateOperationsInput | number
    assignedWorker?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kittingJob?: KittingJobUpdateOneRequiredWithoutJobProgressNestedInput
    kitExecutions?: KitExecutionUpdateManyWithoutJobProgressNestedInput
  }

  export type JobProgressUncheckedUpdateWithoutWorkCenterInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualJobDuration?: NullableIntFieldUpdateOperationsInput | number | null
    completedKits?: IntFieldUpdateOperationsInput | number
    remainingKits?: IntFieldUpdateOperationsInput | number
    currentKitNumber?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    pausedTime?: IntFieldUpdateOperationsInput | number
    assignedWorker?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kitExecutions?: KitExecutionUncheckedUpdateManyWithoutJobProgressNestedInput
  }

  export type JobProgressUncheckedUpdateManyWithoutWorkCenterInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualJobDuration?: NullableIntFieldUpdateOperationsInput | number | null
    completedKits?: IntFieldUpdateOperationsInput | number
    remainingKits?: IntFieldUpdateOperationsInput | number
    currentKitNumber?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    pausedTime?: IntFieldUpdateOperationsInput | number
    assignedWorker?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}